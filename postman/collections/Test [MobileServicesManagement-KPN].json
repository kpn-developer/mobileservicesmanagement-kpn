{
	"info": {
		"_postman_id": "3ada0cd0-4b15-47a7-806d-97f69363e264",
		"name": "Test [MobileServicesManagement-KPN]",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_uid": "4406147-3ada0cd0-4b15-47a7-806d-97f69363e264"
	},
	"item": [
		{
			"name": "01 - Order New Products- New mobile with Physical Sim Card",
			"item": [
				{
					"name": "1- Find all subscribers whom user manages",
					"id": "62f63b3b-25b4-40b6-8ed7-1773e093d0fc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/hierarchy/subscribers",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"hierarchy",
								"subscribers"
							]
						},
						"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
					},
					"response": [
						{
							"id": "dcef8499-7c92-4c4a-8735-6c6a83a2018f",
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hierarchy/subscribers",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"subscribers"
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "0121d25c-4351-408d-af27-85b1c6867b80",
							"name": "Bad Request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hierarchy/subscribers",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"subscribers"
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "f8cbd4f6-28f2-4020-9b5f-2ea4a1fcfc22",
							"name": "Unauthorized",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hierarchy/subscribers",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"subscribers"
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "41d99994-3844-4184-9126-c170a8f28d46",
							"name": "Forbidden",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hierarchy/subscribers",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"subscribers"
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "13154b1d-a055-4e97-8115-d62409317dd3",
							"name": "Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hierarchy/subscribers",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"subscribers"
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "2b2dcf04-379e-4ddf-8290-d1008849cca9",
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hierarchy/subscribers",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"subscribers"
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "9e2fc405-dae6-400b-b18c-a8a232afef7a",
							"name": "Server Error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hierarchy/subscribers",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"subscribers"
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "eea54e64-1a9a-49ac-a3c1-831a05db1382",
							"name": "Service Unavailable",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hierarchy/subscribers",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"subscribers"
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "2- Modify state of current basket",
					"id": "01924976-b474-4a1f-a66c-f1bf11bbb0a0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"accountGroupId\": 14092066\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/contracting/basket",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"contracting",
								"basket"
							]
						},
						"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
					},
					"response": [
						{
							"id": "e4971c91-6754-4cde-8abe-ef64b0294b3f",
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"accountGroupId\": 14092066\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "d26c9093-6dd7-4de2-9358-66098e9be0b3",
							"name": "Bad Request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"accountGroupId\": 14092066\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "4d19733e-f0cb-4957-b396-406cd1165a1b",
							"name": "Unauthorized",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"accountGroupId\": 14092066\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "deb229ba-59ca-4193-8c65-725a0e9009f2",
							"name": "Forbidden",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"accountGroupId\": 14092066\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "04bc7ff0-1295-4cac-b6b4-72e984f90d6c",
							"name": "Not Found",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"accountGroupId\": 14092066\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "cffbd2c6-5b45-4960-a5e6-fe40c6369df8",
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"accountGroupId\": 14092066\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "d348d1af-b100-404b-8b2a-fd56939ed0c0",
							"name": "Server Error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"accountGroupId\": 14092066\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "c85ebd28-ac0f-4058-8fdf-5132eca5d2a7",
							"name": "Service Unavailable",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"accountGroupId\": 14092066\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "3- Get list of main products to order",
					"id": "7a807730-e070-40a8-ad02-5772c224f8a0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"description": "Content-Language",
								"key": "Content-Language",
								"value": "elit aute",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/contracting/basket/main-products?sessionId=4ee6fccc-bed7-4ca3-b15c-c77388773dfa&category=MOBILE",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"contracting",
								"basket",
								"main-products"
							],
							"query": [
								{
									"key": "sessionId",
									"value": "4ee6fccc-bed7-4ca3-b15c-c77388773dfa"
								},
								{
									"key": "category",
									"value": "MOBILE"
								}
							]
						},
						"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
					},
					"response": [
						{
							"id": "fc67e862-712b-49da-9de6-5d87738d2ec8",
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Content-Language",
										"key": "Content-Language",
										"value": "elit aute",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contracting/basket/main-products?sessionId=4ee6fccc-bed7-4ca3-b15c-c77388773dfa&category=MOBILE",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket",
										"main-products"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "4ee6fccc-bed7-4ca3-b15c-c77388773dfa"
										},
										{
											"key": "category",
											"value": "MOBILE"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "d6fd39c6-313c-4c29-88ae-03b964a530ba",
							"name": "Bad Request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Content-Language",
										"key": "Content-Language",
										"value": "elit aute",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contracting/basket/main-products?sessionId=4ee6fccc-bed7-4ca3-b15c-c77388773dfa&category=MOBILE",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket",
										"main-products"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "4ee6fccc-bed7-4ca3-b15c-c77388773dfa"
										},
										{
											"key": "category",
											"value": "MOBILE"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "7ca59138-92bc-42ee-b584-8a98f231c0ff",
							"name": "Unauthorized",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Content-Language",
										"key": "Content-Language",
										"value": "elit aute",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contracting/basket/main-products?sessionId=4ee6fccc-bed7-4ca3-b15c-c77388773dfa&category=MOBILE",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket",
										"main-products"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "4ee6fccc-bed7-4ca3-b15c-c77388773dfa"
										},
										{
											"key": "category",
											"value": "MOBILE"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "19e60f96-fd4b-4816-8eb7-3e38979d11cf",
							"name": "Forbidden",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Content-Language",
										"key": "Content-Language",
										"value": "elit aute",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contracting/basket/main-products?sessionId=4ee6fccc-bed7-4ca3-b15c-c77388773dfa&category=MOBILE",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket",
										"main-products"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "4ee6fccc-bed7-4ca3-b15c-c77388773dfa"
										},
										{
											"key": "category",
											"value": "MOBILE"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "9b25d1a0-ca7f-453c-b57b-efa8cc9233f0",
							"name": "Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Content-Language",
										"key": "Content-Language",
										"value": "elit aute",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contracting/basket/main-products?sessionId=4ee6fccc-bed7-4ca3-b15c-c77388773dfa&category=MOBILE",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket",
										"main-products"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "4ee6fccc-bed7-4ca3-b15c-c77388773dfa"
										},
										{
											"key": "category",
											"value": "MOBILE"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "2e1aaef3-cb1f-4fcd-8ba3-4f09ab9cf0d0",
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Content-Language",
										"key": "Content-Language",
										"value": "elit aute",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contracting/basket/main-products?sessionId=4ee6fccc-bed7-4ca3-b15c-c77388773dfa&category=MOBILE",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket",
										"main-products"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "4ee6fccc-bed7-4ca3-b15c-c77388773dfa"
										},
										{
											"key": "category",
											"value": "MOBILE"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "2abc6411-1879-4873-b53c-348a6a7fcea5",
							"name": "Server Error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Content-Language",
										"key": "Content-Language",
										"value": "elit aute",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contracting/basket/main-products?sessionId=4ee6fccc-bed7-4ca3-b15c-c77388773dfa&category=MOBILE",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket",
										"main-products"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "4ee6fccc-bed7-4ca3-b15c-c77388773dfa"
										},
										{
											"key": "category",
											"value": "MOBILE"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "be88d5bd-d577-44f3-a816-36314ece0b41",
							"name": "Service Unavailable",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Content-Language",
										"key": "Content-Language",
										"value": "elit aute",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contracting/basket/main-products?sessionId=4ee6fccc-bed7-4ca3-b15c-c77388773dfa&category=MOBILE",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket",
										"main-products"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "4ee6fccc-bed7-4ca3-b15c-c77388773dfa"
										},
										{
											"key": "category",
											"value": "MOBILE"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "4- Add mobile product to Basket",
					"id": "f8be6f77-ebef-486d-9f78-6d5e63b74209",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"productActions\": [{\n    \"productId\": \"TreeNode_28301_1664881919334\",\n    \"amount\": 1,\n    \"type\": \"PUT\" \n  }]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/contracting/basket?sessionId=4ee6fccc-bed7-4ca3-b15c-c77388773dfa",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"contracting",
								"basket"
							],
							"query": [
								{
									"key": "sessionId",
									"value": "4ee6fccc-bed7-4ca3-b15c-c77388773dfa"
								}
							]
						},
						"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
					},
					"response": [
						{
							"id": "fa0b72f8-f348-4b18-9084-4a3b3e3a0bd6",
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"productActions\": [{\n    \"productId\": \"TreeNode_28301_1664881919334\",\n    \"amount\": 1,\n    \"type\": \"PUT\" \n  }]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=4ee6fccc-bed7-4ca3-b15c-c77388773dfa",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "4ee6fccc-bed7-4ca3-b15c-c77388773dfa"
										}
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "345b4ffb-ab6d-4a4d-9735-d9d78a656426",
							"name": "Bad Request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"productActions\": [{\n    \"productId\": \"TreeNode_28301_1664881919334\",\n    \"amount\": 1,\n    \"type\": \"PUT\" \n  }]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=4ee6fccc-bed7-4ca3-b15c-c77388773dfa",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "4ee6fccc-bed7-4ca3-b15c-c77388773dfa"
										}
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "9a5409b0-0783-4cf0-9e98-4bc7ff8484f7",
							"name": "Unauthorized",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"productActions\": [{\n    \"productId\": \"TreeNode_28301_1664881919334\",\n    \"amount\": 1,\n    \"type\": \"PUT\" \n  }]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=4ee6fccc-bed7-4ca3-b15c-c77388773dfa",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "4ee6fccc-bed7-4ca3-b15c-c77388773dfa"
										}
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "4bc4a3b1-9b15-4a0c-b9ad-dd30ae81d14f",
							"name": "Forbidden",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"productActions\": [{\n    \"productId\": \"TreeNode_28301_1664881919334\",\n    \"amount\": 1,\n    \"type\": \"PUT\" \n  }]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=4ee6fccc-bed7-4ca3-b15c-c77388773dfa",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "4ee6fccc-bed7-4ca3-b15c-c77388773dfa"
										}
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "64020a68-5f11-4aab-be64-5358d0fdc295",
							"name": "Not Found",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"productActions\": [{\n    \"productId\": \"TreeNode_28301_1664881919334\",\n    \"amount\": 1,\n    \"type\": \"PUT\" \n  }]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=4ee6fccc-bed7-4ca3-b15c-c77388773dfa",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "4ee6fccc-bed7-4ca3-b15c-c77388773dfa"
										}
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "bcc9c205-e78c-4edf-8cd0-f3db48e5eb58",
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"productActions\": [{\n    \"productId\": \"TreeNode_28301_1664881919334\",\n    \"amount\": 1,\n    \"type\": \"PUT\" \n  }]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=4ee6fccc-bed7-4ca3-b15c-c77388773dfa",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "4ee6fccc-bed7-4ca3-b15c-c77388773dfa"
										}
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "d4c9d342-4390-485e-917f-edba82b8ea95",
							"name": "Server Error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"productActions\": [{\n    \"productId\": \"TreeNode_28301_1664881919334\",\n    \"amount\": 1,\n    \"type\": \"PUT\" \n  }]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=4ee6fccc-bed7-4ca3-b15c-c77388773dfa",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "4ee6fccc-bed7-4ca3-b15c-c77388773dfa"
										}
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "2fa62b14-2b08-49bd-ac34-65d9b68ca424",
							"name": "Service Unavailable",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"productActions\": [{\n    \"productId\": \"TreeNode_28301_1664881919334\",\n    \"amount\": 1,\n    \"type\": \"PUT\" \n  }]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=4ee6fccc-bed7-4ca3-b15c-c77388773dfa",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "4ee6fccc-bed7-4ca3-b15c-c77388773dfa"
										}
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "5- Get basket content with products tree and prices",
					"id": "4edb28d2-5ff5-471e-a950-f1788f1d2a5a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/contracting/basket?sessionId=4ee6fccc-bed7-4ca3-b15c-c77388773dfa",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"contracting",
								"basket"
							],
							"query": [
								{
									"key": "sessionId",
									"value": "4ee6fccc-bed7-4ca3-b15c-c77388773dfa"
								},
								{
									"key": "category",
									"value": "MOBILE",
									"disabled": true
								}
							]
						},
						"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
					},
					"response": [
						{
							"id": "249a2e51-6255-4457-b3b8-75a181821a84",
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=4ee6fccc-bed7-4ca3-b15c-c77388773dfa",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "4ee6fccc-bed7-4ca3-b15c-c77388773dfa"
										},
										{
											"key": "category",
											"value": "MOBILE",
											"disabled": true
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "0f821c44-c711-49b3-9f7e-2de9827b6130",
							"name": "Bad Request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=4ee6fccc-bed7-4ca3-b15c-c77388773dfa&category=MOBILE",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "4ee6fccc-bed7-4ca3-b15c-c77388773dfa"
										},
										{
											"key": "category",
											"value": "MOBILE",
											"disabled": true
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "ccd2d579-b6e4-4b4d-afe3-893df882556d",
							"name": "Unauthorized",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=4ee6fccc-bed7-4ca3-b15c-c77388773dfa&category=MOBILE",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "4ee6fccc-bed7-4ca3-b15c-c77388773dfa"
										},
										{
											"key": "category",
											"value": "MOBILE",
											"disabled": true
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "be000df2-12e2-48df-a530-d4325f66ee0f",
							"name": "Forbidden",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=4ee6fccc-bed7-4ca3-b15c-c77388773dfa&category=MOBILE",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "4ee6fccc-bed7-4ca3-b15c-c77388773dfa"
										},
										{
											"key": "category",
											"value": "MOBILE",
											"disabled": true
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "d89505e9-c8f7-4df3-a303-fe87dd6f9199",
							"name": "Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=4ee6fccc-bed7-4ca3-b15c-c77388773dfa&category=MOBILE",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "4ee6fccc-bed7-4ca3-b15c-c77388773dfa"
										},
										{
											"key": "category",
											"value": "MOBILE",
											"disabled": true
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "2487ffdd-1526-4433-9d1e-e1b739f94fe0",
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=4ee6fccc-bed7-4ca3-b15c-c77388773dfa&category=MOBILE",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "4ee6fccc-bed7-4ca3-b15c-c77388773dfa"
										},
										{
											"key": "category",
											"value": "MOBILE",
											"disabled": true
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "e10f52e5-42d7-40ed-ae50-e46ef572dba9",
							"name": "Server Error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=4ee6fccc-bed7-4ca3-b15c-c77388773dfa&category=MOBILE",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "4ee6fccc-bed7-4ca3-b15c-c77388773dfa"
										},
										{
											"key": "category",
											"value": "MOBILE",
											"disabled": true
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "c6ba5d36-d13c-48e6-b509-97322de34724",
							"name": "Service Unavailable",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=4ee6fccc-bed7-4ca3-b15c-c77388773dfa&category=MOBILE",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "4ee6fccc-bed7-4ca3-b15c-c77388773dfa"
										},
										{
											"key": "category",
											"value": "MOBILE",
											"disabled": true
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "6- Get available hardware categories",
					"id": "44e8cb4b-2eba-47f4-9660-b97747eacc21",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/contracting/hardware/categories?sessionId=4ee6fccc-bed7-4ca3-b15c-c77388773dfa",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"contracting",
								"hardware",
								"categories"
							],
							"query": [
								{
									"key": "sessionId",
									"value": "4ee6fccc-bed7-4ca3-b15c-c77388773dfa",
									"description": "sessionId"
								}
							]
						},
						"description": "Possible values: `handsets`, `additional mobile hardware`, `sim cards`\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
					},
					"response": [
						{
							"id": "2ce58835-d01b-4588-a9c1-41b14680590b",
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contracting/hardware/categories?sessionId=4ee6fccc-bed7-4ca3-b15c-c77388773dfa",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"hardware",
										"categories"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "4ee6fccc-bed7-4ca3-b15c-c77388773dfa",
											"description": "sessionId"
										}
									]
								},
								"description": "Possible values: `handsets`, `additional mobile hardware`, `sim cards`\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "0b5c5558-c08a-45bb-938c-95fb4d048a2a",
							"name": "Bad Request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contracting/hardware/categories?sessionId=4ee6fccc-bed7-4ca3-b15c-c77388773dfa",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"hardware",
										"categories"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "4ee6fccc-bed7-4ca3-b15c-c77388773dfa",
											"description": "sessionId"
										}
									]
								},
								"description": "Possible values: `handsets`, `additional mobile hardware`, `sim cards`\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "c61728ce-ef72-4131-a88b-2a107fee7cef",
							"name": "Unauthorized",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contracting/hardware/categories?sessionId=4ee6fccc-bed7-4ca3-b15c-c77388773dfa",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"hardware",
										"categories"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "4ee6fccc-bed7-4ca3-b15c-c77388773dfa",
											"description": "sessionId"
										}
									]
								},
								"description": "Possible values: `handsets`, `additional mobile hardware`, `sim cards`\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "616ce709-f3ae-4dc8-ac29-71ed5b22ccff",
							"name": "Forbidden",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contracting/hardware/categories?sessionId=4ee6fccc-bed7-4ca3-b15c-c77388773dfa",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"hardware",
										"categories"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "4ee6fccc-bed7-4ca3-b15c-c77388773dfa",
											"description": "sessionId"
										}
									]
								},
								"description": "Possible values: `handsets`, `additional mobile hardware`, `sim cards`\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "a0a8a211-30bb-4874-8535-96c4238f12bc",
							"name": "Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contracting/hardware/categories?sessionId=4ee6fccc-bed7-4ca3-b15c-c77388773dfa",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"hardware",
										"categories"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "4ee6fccc-bed7-4ca3-b15c-c77388773dfa",
											"description": "sessionId"
										}
									]
								},
								"description": "Possible values: `handsets`, `additional mobile hardware`, `sim cards`\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "98021243-7b37-4873-9da5-7c142012c9b5",
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contracting/hardware/categories?sessionId=4ee6fccc-bed7-4ca3-b15c-c77388773dfa",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"hardware",
										"categories"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "4ee6fccc-bed7-4ca3-b15c-c77388773dfa",
											"description": "sessionId"
										}
									]
								},
								"description": "Possible values: `handsets`, `additional mobile hardware`, `sim cards`\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "8a3e630e-77f8-4706-a128-8887e9360207",
							"name": "Server Error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contracting/hardware/categories?sessionId=4ee6fccc-bed7-4ca3-b15c-c77388773dfa",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"hardware",
										"categories"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "4ee6fccc-bed7-4ca3-b15c-c77388773dfa",
											"description": "sessionId"
										}
									]
								},
								"description": "Possible values: `handsets`, `additional mobile hardware`, `sim cards`\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "44abb086-0048-462b-aa9d-7335e039d962",
							"name": "Service Unavailable",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contracting/hardware/categories?sessionId=4ee6fccc-bed7-4ca3-b15c-c77388773dfa",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"hardware",
										"categories"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "4ee6fccc-bed7-4ca3-b15c-c77388773dfa",
											"description": "sessionId"
										}
									]
								},
								"description": "Possible values: `handsets`, `additional mobile hardware`, `sim cards`\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "7- Get list of Sim card product",
					"id": "ebd8c23d-a13f-4f9e-9236-cd3c86c1db8b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"description": "Content-Language",
								"key": "Content-Language",
								"value": "elit aute",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/contracting/basket/main-products?sessionId=4ee6fccc-bed7-4ca3-b15c-c77388773dfa&category=sim cards",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"contracting",
								"basket",
								"main-products"
							],
							"query": [
								{
									"key": "sessionId",
									"value": "4ee6fccc-bed7-4ca3-b15c-c77388773dfa"
								},
								{
									"key": "category",
									"value": "sim cards"
								}
							]
						},
						"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
					},
					"response": [
						{
							"id": "dc17de53-cb04-4d8d-95ec-df27f32c8d8b",
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Content-Language",
										"key": "Content-Language",
										"value": "elit aute",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contracting/basket/main-products?sessionId=4ee6fccc-bed7-4ca3-b15c-c77388773dfa&category=sim cards",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket",
										"main-products"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "4ee6fccc-bed7-4ca3-b15c-c77388773dfa"
										},
										{
											"key": "category",
											"value": "sim cards"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "5502c912-57f1-4515-ba13-7831fd1c9c5e",
							"name": "Bad Request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Content-Language",
										"key": "Content-Language",
										"value": "elit aute",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contracting/basket/main-products?sessionId=4ee6fccc-bed7-4ca3-b15c-c77388773dfa&category=sim cards",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket",
										"main-products"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "4ee6fccc-bed7-4ca3-b15c-c77388773dfa"
										},
										{
											"key": "category",
											"value": "sim cards"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "8d118068-c4da-4e64-9e15-50feb55ecfe2",
							"name": "Unauthorized",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Content-Language",
										"key": "Content-Language",
										"value": "elit aute",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contracting/basket/main-products?sessionId=4ee6fccc-bed7-4ca3-b15c-c77388773dfa&category=sim cards",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket",
										"main-products"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "4ee6fccc-bed7-4ca3-b15c-c77388773dfa"
										},
										{
											"key": "category",
											"value": "sim cards"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "1eacf9ae-4eb7-4e8a-a1fc-413454db7985",
							"name": "Forbidden",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Content-Language",
										"key": "Content-Language",
										"value": "elit aute",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contracting/basket/main-products?sessionId=4ee6fccc-bed7-4ca3-b15c-c77388773dfa&category=sim cards",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket",
										"main-products"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "4ee6fccc-bed7-4ca3-b15c-c77388773dfa"
										},
										{
											"key": "category",
											"value": "sim cards"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "51eaf407-ca6f-4f05-88b1-44e2d558f4fb",
							"name": "Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Content-Language",
										"key": "Content-Language",
										"value": "elit aute",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contracting/basket/main-products?sessionId=4ee6fccc-bed7-4ca3-b15c-c77388773dfa&category=sim cards",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket",
										"main-products"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "4ee6fccc-bed7-4ca3-b15c-c77388773dfa"
										},
										{
											"key": "category",
											"value": "sim cards"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "8fa3aabc-a6ea-4edd-b437-242298610b2d",
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Content-Language",
										"key": "Content-Language",
										"value": "elit aute",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contracting/basket/main-products?sessionId=4ee6fccc-bed7-4ca3-b15c-c77388773dfa&category=sim cards",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket",
										"main-products"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "4ee6fccc-bed7-4ca3-b15c-c77388773dfa"
										},
										{
											"key": "category",
											"value": "sim cards"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "0248da7f-4f5a-483a-addd-362924bc7f74",
							"name": "Server Error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Content-Language",
										"key": "Content-Language",
										"value": "elit aute",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contracting/basket/main-products?sessionId=4ee6fccc-bed7-4ca3-b15c-c77388773dfa&category=sim cards",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket",
										"main-products"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "4ee6fccc-bed7-4ca3-b15c-c77388773dfa"
										},
										{
											"key": "category",
											"value": "sim cards"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "223874b0-7ff2-4f7d-b373-6148b0515af5",
							"name": "Service Unavailable",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Content-Language",
										"key": "Content-Language",
										"value": "elit aute",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contracting/basket/main-products?sessionId=4ee6fccc-bed7-4ca3-b15c-c77388773dfa&category=sim cards",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket",
										"main-products"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "4ee6fccc-bed7-4ca3-b15c-c77388773dfa"
										},
										{
											"key": "category",
											"value": "sim cards"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "8- Add SIM card product to basket",
					"id": "47952880-1ccf-4c8d-b5eb-957f5a408c81",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"productActions\": [{\n    \"productId\": \"TreeNode_28276_1664881919333\",\n    \"amount\": 1,\n    \"type\": \"PUT\" \n  }]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/contracting/basket?sessionId=4ee6fccc-bed7-4ca3-b15c-c77388773dfa",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"contracting",
								"basket"
							],
							"query": [
								{
									"key": "sessionId",
									"value": "4ee6fccc-bed7-4ca3-b15c-c77388773dfa"
								}
							]
						},
						"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
					},
					"response": [
						{
							"id": "6095fc3d-5e5d-4e7b-bb74-59416f6b06c8",
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"productActions\": [{\n    \"productId\": \"TreeNode_28276_1664881919333\",\n    \"amount\": 1,\n    \"type\": \"PUT\" \n  }]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=4ee6fccc-bed7-4ca3-b15c-c77388773dfa",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "4ee6fccc-bed7-4ca3-b15c-c77388773dfa"
										}
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "b9245b48-e1a5-4609-a28b-5b08b89455ea",
							"name": "Bad Request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"productActions\": [{\n    \"productId\": \"TreeNode_28276_1664881919333\",\n    \"amount\": 1,\n    \"type\": \"PUT\" \n  }]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=4ee6fccc-bed7-4ca3-b15c-c77388773dfa",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "4ee6fccc-bed7-4ca3-b15c-c77388773dfa"
										}
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "2789952d-8cdc-491e-b726-74b88c95e1ff",
							"name": "Unauthorized",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"productActions\": [{\n    \"productId\": \"TreeNode_28276_1664881919333\",\n    \"amount\": 1,\n    \"type\": \"PUT\" \n  }]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=4ee6fccc-bed7-4ca3-b15c-c77388773dfa",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "4ee6fccc-bed7-4ca3-b15c-c77388773dfa"
										}
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "b03c4dac-d185-4ba2-bb99-aceec59f9412",
							"name": "Forbidden",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"productActions\": [{\n    \"productId\": \"TreeNode_28276_1664881919333\",\n    \"amount\": 1,\n    \"type\": \"PUT\" \n  }]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=4ee6fccc-bed7-4ca3-b15c-c77388773dfa",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "4ee6fccc-bed7-4ca3-b15c-c77388773dfa"
										}
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "651ff081-8d1f-4792-96c9-b37da0b3d4f1",
							"name": "Not Found",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"productActions\": [{\n    \"productId\": \"TreeNode_28276_1664881919333\",\n    \"amount\": 1,\n    \"type\": \"PUT\" \n  }]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=4ee6fccc-bed7-4ca3-b15c-c77388773dfa",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "4ee6fccc-bed7-4ca3-b15c-c77388773dfa"
										}
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "6b9e385c-2b1d-400f-8b9a-d285925ce37d",
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"productActions\": [{\n    \"productId\": \"TreeNode_28276_1664881919333\",\n    \"amount\": 1,\n    \"type\": \"PUT\" \n  }]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=4ee6fccc-bed7-4ca3-b15c-c77388773dfa",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "4ee6fccc-bed7-4ca3-b15c-c77388773dfa"
										}
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "09bb06ba-3cec-4131-b097-5290fa9c7c58",
							"name": "Server Error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"productActions\": [{\n    \"productId\": \"TreeNode_28276_1664881919333\",\n    \"amount\": 1,\n    \"type\": \"PUT\" \n  }]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=4ee6fccc-bed7-4ca3-b15c-c77388773dfa",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "4ee6fccc-bed7-4ca3-b15c-c77388773dfa"
										}
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "37f1c763-01e2-432f-8142-3c8f33b2c012",
							"name": "Service Unavailable",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"productActions\": [{\n    \"productId\": \"TreeNode_28276_1664881919333\",\n    \"amount\": 1,\n    \"type\": \"PUT\" \n  }]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=4ee6fccc-bed7-4ca3-b15c-c77388773dfa",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "4ee6fccc-bed7-4ca3-b15c-c77388773dfa"
										}
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "9- Get basket content with added sim card in it",
					"id": "50a6bdc2-3255-454a-84d5-b1230af3d26c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/contracting/basket?sessionId=4ee6fccc-bed7-4ca3-b15c-c77388773dfa",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"contracting",
								"basket"
							],
							"query": [
								{
									"key": "sessionId",
									"value": "4ee6fccc-bed7-4ca3-b15c-c77388773dfa"
								},
								{
									"key": "category",
									"value": "MOBILE",
									"disabled": true
								}
							]
						},
						"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
					},
					"response": [
						{
							"id": "34837db5-7e94-4cb3-8f88-cd57d8b256e1",
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=4ee6fccc-bed7-4ca3-b15c-c77388773dfa",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "4ee6fccc-bed7-4ca3-b15c-c77388773dfa"
										},
										{
											"key": "category",
											"value": "MOBILE",
											"disabled": true
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "1bc0d68b-9268-4f00-ab60-e2d0e99113cf",
							"name": "Bad Request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=4ee6fccc-bed7-4ca3-b15c-c77388773dfa&category=MOBILE",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "4ee6fccc-bed7-4ca3-b15c-c77388773dfa"
										},
										{
											"key": "category",
											"value": "MOBILE",
											"disabled": true
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "6d4bd64f-6022-4fe8-a1ed-3969fcc07c06",
							"name": "Unauthorized",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=4ee6fccc-bed7-4ca3-b15c-c77388773dfa&category=MOBILE",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "4ee6fccc-bed7-4ca3-b15c-c77388773dfa"
										},
										{
											"key": "category",
											"value": "MOBILE",
											"disabled": true
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "e218d05b-c6b6-414c-9d73-9f779c272c4c",
							"name": "Forbidden",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=4ee6fccc-bed7-4ca3-b15c-c77388773dfa&category=MOBILE",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "4ee6fccc-bed7-4ca3-b15c-c77388773dfa"
										},
										{
											"key": "category",
											"value": "MOBILE",
											"disabled": true
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "73033e7c-1b60-4e24-9eff-bf8d5745f0a5",
							"name": "Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=4ee6fccc-bed7-4ca3-b15c-c77388773dfa&category=MOBILE",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "4ee6fccc-bed7-4ca3-b15c-c77388773dfa"
										},
										{
											"key": "category",
											"value": "MOBILE",
											"disabled": true
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "a46d9427-b2b3-4e10-a1f7-ffd7deec8098",
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=4ee6fccc-bed7-4ca3-b15c-c77388773dfa&category=MOBILE",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "4ee6fccc-bed7-4ca3-b15c-c77388773dfa"
										},
										{
											"key": "category",
											"value": "MOBILE",
											"disabled": true
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "92bfcd7c-4919-4b54-9051-cf675b688b01",
							"name": "Server Error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=4ee6fccc-bed7-4ca3-b15c-c77388773dfa&category=MOBILE",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "4ee6fccc-bed7-4ca3-b15c-c77388773dfa"
										},
										{
											"key": "category",
											"value": "MOBILE",
											"disabled": true
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "d70c5da9-18be-4208-b669-297ba47a6ad4",
							"name": "Service Unavailable",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=4ee6fccc-bed7-4ca3-b15c-c77388773dfa&category=MOBILE",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "4ee6fccc-bed7-4ca3-b15c-c77388773dfa"
										},
										{
											"key": "category",
											"value": "MOBILE",
											"disabled": true
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "10- Create order from basket",
					"id": "19fa873a-ece1-45f4-87c2-187c784467cb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"address\": {\n        \"city\": \"occaeca\",\n        \"companyName\": \"sed commodo\",\n        \"country\": \"NL\",\n        \"houseNumber\": \"con\",\n        \"postalCode\": \"1234AB\",\n        \"street\": \"voluptate cup\",\n        \"addressName\": \"minim proident ex\",\n        \"attention\": \"cupidatat dolore irure\",\n        \"floor\": \"\",\n        \"location\": \"dolor quis enim\",\n        \"room\": \"s\"\n    },\n    \"referenceNumber\": \"fugiat sed\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/contracting/basket/order?sessionId=4ee6fccc-bed7-4ca3-b15c-c77388773dfa",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"contracting",
								"basket",
								"order"
							],
							"query": [
								{
									"key": "sessionId",
									"value": "4ee6fccc-bed7-4ca3-b15c-c77388773dfa",
									"description": "sessionId"
								}
							]
						},
						"description": "Possible errors:\n| HTTP code                          | Error code          | Description                                              |\n|------------------------------------|---------------------|----------------------------------------------------------|\n| `ORDERING_IS_BLOCKED_FOR_CUSTOMER` | `403`               | Current customer is frozen and can not order anything    |\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
					},
					"response": [
						{
							"id": "56bd4843-16e5-4586-a95e-ccc892105acf",
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"address\": {\n        \"city\": \"occaeca\",\n        \"companyName\": \"sed commodo\",\n        \"country\": \"NL\",\n        \"houseNumber\": \"con\",\n        \"postalCode\": \"1234AB\",\n        \"street\": \"voluptate cup\",\n        \"addressName\": \"minim proident ex\",\n        \"attention\": \"cupidatat dolore irure\",\n        \"floor\": \"\",\n        \"location\": \"dolor quis enim\",\n        \"room\": \"s\"\n    },\n    \"referenceNumber\": \"fugiat sed\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket/order?sessionId=4ee6fccc-bed7-4ca3-b15c-c77388773dfa",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket",
										"order"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "4ee6fccc-bed7-4ca3-b15c-c77388773dfa",
											"description": "sessionId"
										}
									]
								},
								"description": "Possible errors:\n| HTTP code                          | Error code          | Description                                              |\n|------------------------------------|---------------------|----------------------------------------------------------|\n| `ORDERING_IS_BLOCKED_FOR_CUSTOMER` | `403`               | Current customer is frozen and can not order anything    |\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "fd30a0b7-a4ed-4edc-8239-b7447baa066b",
							"name": "Bad Request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"address\": {\n        \"city\": \"occaeca\",\n        \"companyName\": \"sed commodo\",\n        \"country\": \"NL\",\n        \"houseNumber\": \"con\",\n        \"postalCode\": \"1234AB\",\n        \"street\": \"voluptate cup\",\n        \"addressName\": \"minim proident ex\",\n        \"attention\": \"cupidatat dolore irure\",\n        \"floor\": \"\",\n        \"location\": \"dolor quis enim\",\n        \"room\": \"s\"\n    },\n    \"referenceNumber\": \"fugiat sed\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket/order?sessionId=4ee6fccc-bed7-4ca3-b15c-c77388773dfa",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket",
										"order"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "4ee6fccc-bed7-4ca3-b15c-c77388773dfa",
											"description": "sessionId"
										}
									]
								},
								"description": "Possible errors:\n| HTTP code                          | Error code          | Description                                              |\n|------------------------------------|---------------------|----------------------------------------------------------|\n| `ORDERING_IS_BLOCKED_FOR_CUSTOMER` | `403`               | Current customer is frozen and can not order anything    |\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "9a6f2827-6b8b-47c1-ba27-f8b090c6dad5",
							"name": "Unauthorized",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"address\": {\n        \"city\": \"occaeca\",\n        \"companyName\": \"sed commodo\",\n        \"country\": \"NL\",\n        \"houseNumber\": \"con\",\n        \"postalCode\": \"1234AB\",\n        \"street\": \"voluptate cup\",\n        \"addressName\": \"minim proident ex\",\n        \"attention\": \"cupidatat dolore irure\",\n        \"floor\": \"\",\n        \"location\": \"dolor quis enim\",\n        \"room\": \"s\"\n    },\n    \"referenceNumber\": \"fugiat sed\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket/order?sessionId=4ee6fccc-bed7-4ca3-b15c-c77388773dfa",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket",
										"order"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "4ee6fccc-bed7-4ca3-b15c-c77388773dfa",
											"description": "sessionId"
										}
									]
								},
								"description": "Possible errors:\n| HTTP code                          | Error code          | Description                                              |\n|------------------------------------|---------------------|----------------------------------------------------------|\n| `ORDERING_IS_BLOCKED_FOR_CUSTOMER` | `403`               | Current customer is frozen and can not order anything    |\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "cb318547-e183-4e5b-859e-90f7bbd14bd0",
							"name": "Forbidden",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"address\": {\n        \"city\": \"occaeca\",\n        \"companyName\": \"sed commodo\",\n        \"country\": \"NL\",\n        \"houseNumber\": \"con\",\n        \"postalCode\": \"1234AB\",\n        \"street\": \"voluptate cup\",\n        \"addressName\": \"minim proident ex\",\n        \"attention\": \"cupidatat dolore irure\",\n        \"floor\": \"\",\n        \"location\": \"dolor quis enim\",\n        \"room\": \"s\"\n    },\n    \"referenceNumber\": \"fugiat sed\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket/order?sessionId=4ee6fccc-bed7-4ca3-b15c-c77388773dfa",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket",
										"order"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "4ee6fccc-bed7-4ca3-b15c-c77388773dfa",
											"description": "sessionId"
										}
									]
								},
								"description": "Possible errors:\n| HTTP code                          | Error code          | Description                                              |\n|------------------------------------|---------------------|----------------------------------------------------------|\n| `ORDERING_IS_BLOCKED_FOR_CUSTOMER` | `403`               | Current customer is frozen and can not order anything    |\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "45dfce7a-fb6a-4058-93ea-5de0fd8dac89",
							"name": "Not Found",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"address\": {\n        \"city\": \"occaeca\",\n        \"companyName\": \"sed commodo\",\n        \"country\": \"NL\",\n        \"houseNumber\": \"con\",\n        \"postalCode\": \"1234AB\",\n        \"street\": \"voluptate cup\",\n        \"addressName\": \"minim proident ex\",\n        \"attention\": \"cupidatat dolore irure\",\n        \"floor\": \"\",\n        \"location\": \"dolor quis enim\",\n        \"room\": \"s\"\n    },\n    \"referenceNumber\": \"fugiat sed\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket/order?sessionId=4ee6fccc-bed7-4ca3-b15c-c77388773dfa",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket",
										"order"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "4ee6fccc-bed7-4ca3-b15c-c77388773dfa",
											"description": "sessionId"
										}
									]
								},
								"description": "Possible errors:\n| HTTP code                          | Error code          | Description                                              |\n|------------------------------------|---------------------|----------------------------------------------------------|\n| `ORDERING_IS_BLOCKED_FOR_CUSTOMER` | `403`               | Current customer is frozen and can not order anything    |\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "a98df4ae-4256-426b-bbfa-7460454f8eb9",
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"address\": {\n        \"city\": \"occaeca\",\n        \"companyName\": \"sed commodo\",\n        \"country\": \"NL\",\n        \"houseNumber\": \"con\",\n        \"postalCode\": \"1234AB\",\n        \"street\": \"voluptate cup\",\n        \"addressName\": \"minim proident ex\",\n        \"attention\": \"cupidatat dolore irure\",\n        \"floor\": \"\",\n        \"location\": \"dolor quis enim\",\n        \"room\": \"s\"\n    },\n    \"referenceNumber\": \"fugiat sed\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket/order?sessionId=4ee6fccc-bed7-4ca3-b15c-c77388773dfa",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket",
										"order"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "4ee6fccc-bed7-4ca3-b15c-c77388773dfa",
											"description": "sessionId"
										}
									]
								},
								"description": "Possible errors:\n| HTTP code                          | Error code          | Description                                              |\n|------------------------------------|---------------------|----------------------------------------------------------|\n| `ORDERING_IS_BLOCKED_FOR_CUSTOMER` | `403`               | Current customer is frozen and can not order anything    |\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "56c012c0-fc4a-41db-9e62-f40e83c1ee2b",
							"name": "Server Error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"address\": {\n        \"city\": \"occaeca\",\n        \"companyName\": \"sed commodo\",\n        \"country\": \"NL\",\n        \"houseNumber\": \"con\",\n        \"postalCode\": \"1234AB\",\n        \"street\": \"voluptate cup\",\n        \"addressName\": \"minim proident ex\",\n        \"attention\": \"cupidatat dolore irure\",\n        \"floor\": \"\",\n        \"location\": \"dolor quis enim\",\n        \"room\": \"s\"\n    },\n    \"referenceNumber\": \"fugiat sed\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket/order?sessionId=4ee6fccc-bed7-4ca3-b15c-c77388773dfa",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket",
										"order"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "4ee6fccc-bed7-4ca3-b15c-c77388773dfa",
											"description": "sessionId"
										}
									]
								},
								"description": "Possible errors:\n| HTTP code                          | Error code          | Description                                              |\n|------------------------------------|---------------------|----------------------------------------------------------|\n| `ORDERING_IS_BLOCKED_FOR_CUSTOMER` | `403`               | Current customer is frozen and can not order anything    |\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "bdf736c8-62a8-4645-a0d3-57c64355d27a",
							"name": "Service Unavailable",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"address\": {\n        \"city\": \"occaeca\",\n        \"companyName\": \"sed commodo\",\n        \"country\": \"NL\",\n        \"houseNumber\": \"con\",\n        \"postalCode\": \"1234AB\",\n        \"street\": \"voluptate cup\",\n        \"addressName\": \"minim proident ex\",\n        \"attention\": \"cupidatat dolore irure\",\n        \"floor\": \"\",\n        \"location\": \"dolor quis enim\",\n        \"room\": \"s\"\n    },\n    \"referenceNumber\": \"fugiat sed\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket/order?sessionId=4ee6fccc-bed7-4ca3-b15c-c77388773dfa",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket",
										"order"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "4ee6fccc-bed7-4ca3-b15c-c77388773dfa",
											"description": "sessionId"
										}
									]
								},
								"description": "Possible errors:\n| HTTP code                          | Error code          | Description                                              |\n|------------------------------------|---------------------|----------------------------------------------------------|\n| `ORDERING_IS_BLOCKED_FOR_CUSTOMER` | `403`               | Current customer is frozen and can not order anything    |\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "11- Track Order status",
					"id": "444b9982-7444-428a-91ff-23fb6fbd79c8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/track-and-trace/orders/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"track-and-trace",
								"orders",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "49579269",
									"description": "(Required) id"
								}
							]
						},
						"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_orders_track_and_trace</li><li>privileges_orders_authorization</li></ul>"
					},
					"response": [
						{
							"id": "5fabc4e5-75a2-4433-b2ec-8c5fc9e3ada0",
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/track-and-trace/orders/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"track-and-trace",
										"orders",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "49579269",
											"description": "(Required) id"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_orders_track_and_trace</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "4f22ecad-37d5-41c5-a85b-954ee4749f94",
							"name": "Bad Request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/track-and-trace/orders/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"track-and-trace",
										"orders",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "49579269",
											"description": "(Required) id"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_orders_track_and_trace</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "9dd9e29c-f281-4729-9ca1-562f7353a5ae",
							"name": "Unauthorized",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/track-and-trace/orders/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"track-and-trace",
										"orders",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "49579269",
											"description": "(Required) id"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_orders_track_and_trace</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "5916e6a2-7a63-4c16-94c2-be12a7b66d4f",
							"name": "Forbidden",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/track-and-trace/orders/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"track-and-trace",
										"orders",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "49579269",
											"description": "(Required) id"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_orders_track_and_trace</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "e4c38bd9-0c18-4eed-9198-67fd805e729e",
							"name": "Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/track-and-trace/orders/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"track-and-trace",
										"orders",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "49579269",
											"description": "(Required) id"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_orders_track_and_trace</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "2b0d7057-5835-4549-a9b5-0d231733d709",
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/track-and-trace/orders/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"track-and-trace",
										"orders",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "49579269",
											"description": "(Required) id"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_orders_track_and_trace</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "9092108a-1ece-4802-9ea2-378d90562e30",
							"name": "Server Error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/track-and-trace/orders/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"track-and-trace",
										"orders",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "49579269",
											"description": "(Required) id"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_orders_track_and_trace</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "a454692c-c184-4913-93f1-8dbc1fa6ae91",
							"name": "Service Unavailable",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/track-and-trace/orders/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"track-and-trace",
										"orders",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "49579269",
											"description": "(Required) id"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_orders_track_and_trace</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			],
			"id": "9d9ded24-9ac6-4b47-955f-3f2bf8360411",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "94b09741-20d3-488e-8953-ae27f0240cc3",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "79816ff5-19f3-4775-ba24-03d24ae58d05",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "02- Activate Sim card- From Stock",
			"item": [
				{
					"name": "1- Find all subscribers whom user manages",
					"id": "15d4a944-3af1-4a10-8cf5-28eef414b11a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/hierarchy/subscribers",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"hierarchy",
								"subscribers"
							]
						},
						"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
					},
					"response": [
						{
							"id": "58262bff-24e5-4745-ac28-204a801afb60",
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hierarchy/subscribers",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"subscribers"
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "28a20bcb-ce56-46a1-8a30-7e22778c69e5",
							"name": "Bad Request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hierarchy/subscribers",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"subscribers"
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "e197005b-5326-4154-ba17-f91ce49386a6",
							"name": "Unauthorized",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hierarchy/subscribers",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"subscribers"
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "d4f931ee-ae2e-42ec-8bc9-2ced22569b07",
							"name": "Forbidden",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hierarchy/subscribers",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"subscribers"
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "922490f0-0221-4ce0-b921-bc76ae1bde13",
							"name": "Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hierarchy/subscribers",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"subscribers"
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "d68db9ef-2c19-480f-b207-1f657ea42507",
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hierarchy/subscribers",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"subscribers"
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "39b7c816-f9bc-48d2-bf99-d84cb33af8c7",
							"name": "Server Error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hierarchy/subscribers",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"subscribers"
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "3f38be9a-ca82-49be-8236-2d51f4d8d3ae",
							"name": "Service Unavailable",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hierarchy/subscribers",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"subscribers"
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "2- Modify state of current basket",
					"id": "daaaa00a-ec19-4657-b62f-79793dcd21c7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"accountGroupId\": 14091805\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/contracting/basket",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"contracting",
								"basket"
							]
						},
						"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
					},
					"response": [
						{
							"id": "deefbe4d-1a6a-426c-9e73-b3db1d75982e",
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"accountGroupId\": 14091805\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "60860767-3ad0-4efc-9251-d544d77af1a7",
							"name": "Bad Request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"accountGroupId\": 14091805\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "c66cf354-ba33-4622-8cf7-51363e696580",
							"name": "Unauthorized",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"accountGroupId\": 14091805\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "40234bb9-dfb3-4df5-a2b7-e6b82134401a",
							"name": "Forbidden",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"accountGroupId\": 14091805\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "02183018-3e4f-4f2a-a0a1-716acd9de4fd",
							"name": "Not Found",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"accountGroupId\": 14091805\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "1f1fe8fe-f00e-45b0-8401-1e8b1d260a6f",
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"accountGroupId\": 14091805\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "e851ae2f-1130-4fa5-831e-76af587bccfb",
							"name": "Server Error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"accountGroupId\": 14091805\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "1b46b2d3-6409-4e64-ab58-7566a09f5440",
							"name": "Service Unavailable",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"accountGroupId\": 14091805\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "3- Get list of main products to order",
					"id": "44c61334-cc90-4c9b-a3b3-b5ff0f74ac5d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"description": "Content-Language",
								"key": "Content-Language",
								"value": "elit aute",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/contracting/basket/main-products?sessionId=88abf449-dc5d-4005-a27a-50e85f52834d&category=MOBILE",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"contracting",
								"basket",
								"main-products"
							],
							"query": [
								{
									"key": "sessionId",
									"value": "88abf449-dc5d-4005-a27a-50e85f52834d"
								},
								{
									"key": "category",
									"value": "MOBILE"
								}
							]
						},
						"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
					},
					"response": [
						{
							"id": "b78bac30-6b22-4767-a222-e1375aa60b74",
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Content-Language",
										"key": "Content-Language",
										"value": "elit aute",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contracting/basket/main-products?sessionId=88abf449-dc5d-4005-a27a-50e85f52834d&category=MOBILE",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket",
										"main-products"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "88abf449-dc5d-4005-a27a-50e85f52834d"
										},
										{
											"key": "category",
											"value": "MOBILE"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "060a1deb-f2c7-4c80-a71b-20608760588d",
							"name": "Bad Request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Content-Language",
										"key": "Content-Language",
										"value": "elit aute",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contracting/basket/main-products?sessionId=88abf449-dc5d-4005-a27a-50e85f52834d&category=MOBILE",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket",
										"main-products"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "88abf449-dc5d-4005-a27a-50e85f52834d"
										},
										{
											"key": "category",
											"value": "MOBILE"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "7d95cef5-f668-4d5f-94ff-d863a7b45695",
							"name": "Unauthorized",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Content-Language",
										"key": "Content-Language",
										"value": "elit aute",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contracting/basket/main-products?sessionId=88abf449-dc5d-4005-a27a-50e85f52834d&category=MOBILE",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket",
										"main-products"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "88abf449-dc5d-4005-a27a-50e85f52834d"
										},
										{
											"key": "category",
											"value": "MOBILE"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "ba0119e7-d39e-423b-b4c6-1c0b94c8ea95",
							"name": "Forbidden",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Content-Language",
										"key": "Content-Language",
										"value": "elit aute",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contracting/basket/main-products?sessionId=88abf449-dc5d-4005-a27a-50e85f52834d&category=MOBILE",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket",
										"main-products"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "88abf449-dc5d-4005-a27a-50e85f52834d"
										},
										{
											"key": "category",
											"value": "MOBILE"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "ee869715-c7f0-421d-a3bf-02612b8ba2cc",
							"name": "Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Content-Language",
										"key": "Content-Language",
										"value": "elit aute",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contracting/basket/main-products?sessionId=88abf449-dc5d-4005-a27a-50e85f52834d&category=MOBILE",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket",
										"main-products"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "88abf449-dc5d-4005-a27a-50e85f52834d"
										},
										{
											"key": "category",
											"value": "MOBILE"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "831973bf-23e4-41cd-8f12-9c4287312e6c",
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Content-Language",
										"key": "Content-Language",
										"value": "elit aute",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contracting/basket/main-products?sessionId=88abf449-dc5d-4005-a27a-50e85f52834d&category=MOBILE",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket",
										"main-products"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "88abf449-dc5d-4005-a27a-50e85f52834d"
										},
										{
											"key": "category",
											"value": "MOBILE"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "93279292-4aa5-442a-8460-9dc92cd5130d",
							"name": "Server Error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Content-Language",
										"key": "Content-Language",
										"value": "elit aute",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contracting/basket/main-products?sessionId=88abf449-dc5d-4005-a27a-50e85f52834d&category=MOBILE",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket",
										"main-products"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "88abf449-dc5d-4005-a27a-50e85f52834d"
										},
										{
											"key": "category",
											"value": "MOBILE"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "2f1e032b-de5e-40cf-bb75-d01be93b8471",
							"name": "Service Unavailable",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Content-Language",
										"key": "Content-Language",
										"value": "elit aute",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contracting/basket/main-products?sessionId=88abf449-dc5d-4005-a27a-50e85f52834d&category=MOBILE",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket",
										"main-products"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "88abf449-dc5d-4005-a27a-50e85f52834d"
										},
										{
											"key": "category",
											"value": "MOBILE"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "4- Add mobile product to Basket",
					"id": "edf331ca-9aa0-41ac-85c7-895ca39f7679",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"productActions\": [{\n    \"productId\": \"TreeNode_46823_1665057339356\",\n    \"amount\": 1,\n    \"type\": \"PUT\" \n  }]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/contracting/basket?sessionId=88abf449-dc5d-4005-a27a-50e85f52834d",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"contracting",
								"basket"
							],
							"query": [
								{
									"key": "sessionId",
									"value": "88abf449-dc5d-4005-a27a-50e85f52834d"
								}
							]
						},
						"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
					},
					"response": [
						{
							"id": "2e83dccd-246b-43d5-92b3-6d439aea5734",
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"productActions\": [{\n    \"productId\": \"TreeNode_46823_1665057339356\",\n    \"amount\": 1,\n    \"type\": \"PUT\" \n  }]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=88abf449-dc5d-4005-a27a-50e85f52834d",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "88abf449-dc5d-4005-a27a-50e85f52834d"
										}
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "d164488b-2745-485a-91d6-1cb298334b4a",
							"name": "Bad Request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"productActions\": [{\n    \"productId\": \"TreeNode_46823_1665057339356\",\n    \"amount\": 1,\n    \"type\": \"PUT\" \n  }]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=88abf449-dc5d-4005-a27a-50e85f52834d",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "88abf449-dc5d-4005-a27a-50e85f52834d"
										}
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "5358ec78-1033-4399-bcf9-c2fcb9653909",
							"name": "Unauthorized",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"productActions\": [{\n    \"productId\": \"TreeNode_46823_1665057339356\",\n    \"amount\": 1,\n    \"type\": \"PUT\" \n  }]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=88abf449-dc5d-4005-a27a-50e85f52834d",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "88abf449-dc5d-4005-a27a-50e85f52834d"
										}
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "43fa9d7b-e454-46e9-9609-bc63639ded3d",
							"name": "Forbidden",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"productActions\": [{\n    \"productId\": \"TreeNode_46823_1665057339356\",\n    \"amount\": 1,\n    \"type\": \"PUT\" \n  }]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=88abf449-dc5d-4005-a27a-50e85f52834d",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "88abf449-dc5d-4005-a27a-50e85f52834d"
										}
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "80764298-9fa4-4a4f-be0c-f4e9805a12f6",
							"name": "Not Found",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"productActions\": [{\n    \"productId\": \"TreeNode_46823_1665057339356\",\n    \"amount\": 1,\n    \"type\": \"PUT\" \n  }]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=88abf449-dc5d-4005-a27a-50e85f52834d",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "88abf449-dc5d-4005-a27a-50e85f52834d"
										}
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "e0fed880-d389-42fe-8c51-1a53aa276dbe",
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"productActions\": [{\n    \"productId\": \"TreeNode_46823_1665057339356\",\n    \"amount\": 1,\n    \"type\": \"PUT\" \n  }]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=88abf449-dc5d-4005-a27a-50e85f52834d",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "88abf449-dc5d-4005-a27a-50e85f52834d"
										}
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "16885edb-4037-4ea5-ba7c-2128447d7031",
							"name": "Server Error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"productActions\": [{\n    \"productId\": \"TreeNode_46823_1665057339356\",\n    \"amount\": 1,\n    \"type\": \"PUT\" \n  }]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=88abf449-dc5d-4005-a27a-50e85f52834d",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "88abf449-dc5d-4005-a27a-50e85f52834d"
										}
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "19d1797b-1c92-4f5c-aeb5-cae86c45322f",
							"name": "Service Unavailable",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"productActions\": [{\n    \"productId\": \"TreeNode_46823_1665057339356\",\n    \"amount\": 1,\n    \"type\": \"PUT\" \n  }]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=88abf449-dc5d-4005-a27a-50e85f52834d",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "88abf449-dc5d-4005-a27a-50e85f52834d"
										}
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "5- Get basket content with products tree and prices",
					"id": "dbce770f-51dd-4d94-8c1b-8bd1307f0bc5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/contracting/basket?sessionId=88abf449-dc5d-4005-a27a-50e85f52834d",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"contracting",
								"basket"
							],
							"query": [
								{
									"key": "sessionId",
									"value": "88abf449-dc5d-4005-a27a-50e85f52834d"
								},
								{
									"key": "category",
									"value": "MOBILE",
									"disabled": true
								}
							]
						},
						"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
					},
					"response": [
						{
							"id": "be04a85a-dee1-46b1-aa81-a2b273e29a64",
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=88abf449-dc5d-4005-a27a-50e85f52834d",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "88abf449-dc5d-4005-a27a-50e85f52834d"
										},
										{
											"key": "category",
											"value": "MOBILE",
											"disabled": true
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "23728f59-9100-4644-9ece-eb56f25e7b64",
							"name": "Bad Request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=88abf449-dc5d-4005-a27a-50e85f52834d&category=MOBILE",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "88abf449-dc5d-4005-a27a-50e85f52834d"
										},
										{
											"key": "category",
											"value": "MOBILE",
											"disabled": true
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "422afaef-fc37-4260-a539-3c40159c244f",
							"name": "Unauthorized",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=88abf449-dc5d-4005-a27a-50e85f52834d&category=MOBILE",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "88abf449-dc5d-4005-a27a-50e85f52834d"
										},
										{
											"key": "category",
											"value": "MOBILE",
											"disabled": true
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "603bc66d-6309-4ccc-bb2b-cbd8074045f8",
							"name": "Forbidden",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=88abf449-dc5d-4005-a27a-50e85f52834d&category=MOBILE",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "88abf449-dc5d-4005-a27a-50e85f52834d"
										},
										{
											"key": "category",
											"value": "MOBILE",
											"disabled": true
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "6cbe00d0-3975-40ff-a222-8a45999e2658",
							"name": "Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=88abf449-dc5d-4005-a27a-50e85f52834d&category=MOBILE",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "88abf449-dc5d-4005-a27a-50e85f52834d"
										},
										{
											"key": "category",
											"value": "MOBILE",
											"disabled": true
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "9f3cc602-6d27-4fb3-a7cb-b86092374eec",
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=88abf449-dc5d-4005-a27a-50e85f52834d&category=MOBILE",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "88abf449-dc5d-4005-a27a-50e85f52834d"
										},
										{
											"key": "category",
											"value": "MOBILE",
											"disabled": true
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "e0ed750e-502b-4dce-963f-cbe4655d6fd5",
							"name": "Server Error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=88abf449-dc5d-4005-a27a-50e85f52834d&category=MOBILE",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "88abf449-dc5d-4005-a27a-50e85f52834d"
										},
										{
											"key": "category",
											"value": "MOBILE",
											"disabled": true
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "361f1a28-1623-447e-a7ff-e8bc54e3ccdb",
							"name": "Service Unavailable",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=88abf449-dc5d-4005-a27a-50e85f52834d&category=MOBILE",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "88abf449-dc5d-4005-a27a-50e85f52834d"
										},
										{
											"key": "category",
											"value": "MOBILE",
											"disabled": true
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "6- Set SIM card number from stock in basket",
					"id": "afedf2f6-2eac-4e32-aa11-8766eb8ac2c5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"simCardNumber\": \"8421053827714\"\n\n} ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/contracting/basket?sessionId=88abf449-dc5d-4005-a27a-50e85f52834d",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"contracting",
								"basket"
							],
							"query": [
								{
									"key": "sessionId",
									"value": "88abf449-dc5d-4005-a27a-50e85f52834d"
								}
							]
						},
						"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
					},
					"response": [
						{
							"id": "d85ff3e0-ca57-4bec-8a9b-e9344d5efcb3",
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"simCardNumber\": \"8421053827714\"\n\n} ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=88abf449-dc5d-4005-a27a-50e85f52834d",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "88abf449-dc5d-4005-a27a-50e85f52834d"
										}
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "a4b1d9d6-6c9f-49c9-806c-f3da6d4d0b12",
							"name": "Bad Request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"simCardNumber\": \"8421053827714\"\n\n} ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=88abf449-dc5d-4005-a27a-50e85f52834d",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "88abf449-dc5d-4005-a27a-50e85f52834d"
										}
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "77a2ff5d-f29a-45f5-8942-f81dddfadc83",
							"name": "Unauthorized",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"simCardNumber\": \"8421053827714\"\n\n} ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=88abf449-dc5d-4005-a27a-50e85f52834d",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "88abf449-dc5d-4005-a27a-50e85f52834d"
										}
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "b505b9ce-d953-40a3-ac65-d44a749c2390",
							"name": "Forbidden",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"simCardNumber\": \"8421053827714\"\n\n} ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=88abf449-dc5d-4005-a27a-50e85f52834d",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "88abf449-dc5d-4005-a27a-50e85f52834d"
										}
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "d4863073-31e8-4a31-80e8-d27fb2b63edb",
							"name": "Not Found",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"simCardNumber\": \"8421053827714\"\n\n} ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=88abf449-dc5d-4005-a27a-50e85f52834d",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "88abf449-dc5d-4005-a27a-50e85f52834d"
										}
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "a1ee8aa8-5285-4c76-81b5-b6023ec621cf",
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"simCardNumber\": \"8421053827714\"\n\n} ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=88abf449-dc5d-4005-a27a-50e85f52834d",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "88abf449-dc5d-4005-a27a-50e85f52834d"
										}
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "41836a25-92e6-4921-8486-2232fba3ae45",
							"name": "Server Error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"simCardNumber\": \"8421053827714\"\n\n} ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=88abf449-dc5d-4005-a27a-50e85f52834d",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "88abf449-dc5d-4005-a27a-50e85f52834d"
										}
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "50e7d1df-8a34-46c1-8a70-9aa934afac9f",
							"name": "Service Unavailable",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"simCardNumber\": \"8421053827714\"\n\n} ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=88abf449-dc5d-4005-a27a-50e85f52834d",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "88abf449-dc5d-4005-a27a-50e85f52834d"
										}
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "7- Order the basket",
					"id": "8952e09f-e4b4-4d79-b52a-b6b6d34ed548",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"referenceNumber\": \"Test RUN\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/contracting/basket/order?sessionId=88abf449-dc5d-4005-a27a-50e85f52834d",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"contracting",
								"basket",
								"order"
							],
							"query": [
								{
									"key": "sessionId",
									"value": "88abf449-dc5d-4005-a27a-50e85f52834d"
								}
							]
						},
						"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
					},
					"response": [
						{
							"id": "728f506a-da0c-4f87-9bca-835b0fcc31b0",
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"referenceNumber\": \"Test RUN\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket/order?sessionId=88abf449-dc5d-4005-a27a-50e85f52834d",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket",
										"order"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "88abf449-dc5d-4005-a27a-50e85f52834d"
										}
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "3acd4798-f028-4394-bc6f-39817d42d436",
							"name": "Bad Request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"referenceNumber\": \"Test RUN\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket/order?sessionId=88abf449-dc5d-4005-a27a-50e85f52834d",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket",
										"order"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "88abf449-dc5d-4005-a27a-50e85f52834d"
										}
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "ca5e8a59-d3cd-45a6-acfa-466c754b35af",
							"name": "Unauthorized",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"referenceNumber\": \"Test RUN\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket/order?sessionId=88abf449-dc5d-4005-a27a-50e85f52834d",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket",
										"order"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "88abf449-dc5d-4005-a27a-50e85f52834d"
										}
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "a093464d-1d76-4597-9eba-fee0cbac01f7",
							"name": "Forbidden",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"referenceNumber\": \"Test RUN\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket/order?sessionId=88abf449-dc5d-4005-a27a-50e85f52834d",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket",
										"order"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "88abf449-dc5d-4005-a27a-50e85f52834d"
										}
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "f51dbaf2-42c4-4dd1-82ec-c3bf4c6386b4",
							"name": "Not Found",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"referenceNumber\": \"Test RUN\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket/order?sessionId=88abf449-dc5d-4005-a27a-50e85f52834d",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket",
										"order"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "88abf449-dc5d-4005-a27a-50e85f52834d"
										}
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "ca6b4d06-3f6d-4348-86ba-94cd1d9d8bc3",
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"referenceNumber\": \"Test RUN\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket/order?sessionId=88abf449-dc5d-4005-a27a-50e85f52834d",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket",
										"order"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "88abf449-dc5d-4005-a27a-50e85f52834d"
										}
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "9ff9d457-820e-46bc-a834-2f4276e47d9c",
							"name": "Server Error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"referenceNumber\": \"Test RUN\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket/order?sessionId=88abf449-dc5d-4005-a27a-50e85f52834d",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket",
										"order"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "88abf449-dc5d-4005-a27a-50e85f52834d"
										}
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "b5db1965-2d61-4c5a-b8ac-9dc9631d40db",
							"name": "Service Unavailable",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"referenceNumber\": \"Test RUN\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket/order?sessionId=88abf449-dc5d-4005-a27a-50e85f52834d",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket",
										"order"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "88abf449-dc5d-4005-a27a-50e85f52834d"
										}
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "8- Track Order status",
					"id": "a421d362-daa0-4b4d-abfa-29e52b96964a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/track-and-trace/orders/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"track-and-trace",
								"orders",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "49579478",
									"description": "(Required) id"
								}
							]
						},
						"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_orders_track_and_trace</li><li>privileges_orders_authorization</li></ul>"
					},
					"response": [
						{
							"id": "e1a85cf9-08ec-49dc-b4ab-81d7d6162d8c",
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/track-and-trace/orders/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"track-and-trace",
										"orders",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "49579478",
											"description": "(Required) id"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_orders_track_and_trace</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "7d64c252-7b0a-4804-b8fc-20a7b4d960b0",
							"name": "Bad Request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/track-and-trace/orders/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"track-and-trace",
										"orders",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "49579478",
											"description": "(Required) id"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_orders_track_and_trace</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "891f4c0e-60d1-4bcb-a358-2abd5d44c7b4",
							"name": "Unauthorized",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/track-and-trace/orders/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"track-and-trace",
										"orders",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "49579478",
											"description": "(Required) id"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_orders_track_and_trace</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "a0bb3cb0-a9d0-4024-ab3e-8c66be589a55",
							"name": "Forbidden",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/track-and-trace/orders/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"track-and-trace",
										"orders",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "49579478",
											"description": "(Required) id"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_orders_track_and_trace</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "279183a9-4a0e-4c6d-a860-c8ecc58a0584",
							"name": "Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/track-and-trace/orders/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"track-and-trace",
										"orders",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "49579478",
											"description": "(Required) id"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_orders_track_and_trace</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "e0897450-65d9-4425-9835-cc0d6e6aa774",
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/track-and-trace/orders/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"track-and-trace",
										"orders",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "49579478",
											"description": "(Required) id"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_orders_track_and_trace</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "6ca17d5d-e486-4fb0-ad8c-f41737692572",
							"name": "Server Error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/track-and-trace/orders/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"track-and-trace",
										"orders",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "49579478",
											"description": "(Required) id"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_orders_track_and_trace</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "885ff3f4-ddc4-4177-9875-a38dff3b8538",
							"name": "Service Unavailable",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/track-and-trace/orders/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"track-and-trace",
										"orders",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "49579478",
											"description": "(Required) id"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_orders_track_and_trace</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			],
			"id": "2c74b31e-e667-454a-8098-bcaf7aa8317f",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "0b413146-681a-49a2-93d2-fdacd708fd91",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "24aa7465-1585-42c2-9997-09f79b6c56d2",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "02- Activate Sim card- eSIM",
			"item": [
				{
					"name": "1- Find all subscribers whom user manages",
					"id": "ba554e63-ad78-477b-8f01-455251998431",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/hierarchy/subscribers",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"hierarchy",
								"subscribers"
							]
						},
						"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
					},
					"response": [
						{
							"id": "683eb37c-c532-49a5-b742-6f57ac61690a",
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hierarchy/subscribers",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"subscribers"
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "1ff9c297-1dfb-4406-bcab-bc7071ee274e",
							"name": "Bad Request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hierarchy/subscribers",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"subscribers"
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "958129ed-474e-41af-be49-d5d2243277f2",
							"name": "Unauthorized",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hierarchy/subscribers",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"subscribers"
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "f847c06a-1188-41f5-8cd0-d7055660b80b",
							"name": "Forbidden",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hierarchy/subscribers",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"subscribers"
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "ff6bef22-e79f-45df-a195-20d7db3ae9ea",
							"name": "Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hierarchy/subscribers",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"subscribers"
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "8e7c8d06-f31a-4a94-9bc8-cd1461982d35",
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hierarchy/subscribers",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"subscribers"
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "57c5e2b8-8860-4310-bd0a-608531f4fc69",
							"name": "Server Error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hierarchy/subscribers",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"subscribers"
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "246f4e10-936b-4fea-acdf-b3884775a658",
							"name": "Service Unavailable",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hierarchy/subscribers",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"subscribers"
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "2- Modify state of current basket",
					"id": "49988d30-02ec-4b36-a51b-fc548f6a3348",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"accountGroupId\": 14091805\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/contracting/basket",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"contracting",
								"basket"
							]
						},
						"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
					},
					"response": [
						{
							"id": "b8fdf324-3938-4937-9784-34f6a10d7232",
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"accountGroupId\": 14091805\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "3abf5391-b37a-4db6-8d40-7b040b3bd17b",
							"name": "Bad Request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"accountGroupId\": 14091805\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "99bb2715-2334-4f60-a8b1-59a3f073d62e",
							"name": "Unauthorized",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"accountGroupId\": 14091805\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "d83d5321-3e54-4208-b258-3c79b3e31bb8",
							"name": "Forbidden",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"accountGroupId\": 14091805\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "7ec2de1a-cad8-4d93-b8fe-031e58925c08",
							"name": "Not Found",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"accountGroupId\": 14091805\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "37c180b8-b2ac-427a-8354-9d53b2873585",
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"accountGroupId\": 14091805\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "d4eb85e2-bc20-45aa-84fa-548fcf711392",
							"name": "Server Error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"accountGroupId\": 14091805\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "19c24d36-1de7-4e04-a804-188dc01c3700",
							"name": "Service Unavailable",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"accountGroupId\": 14091805\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "3- Get list of main products to order",
					"id": "e83b28c4-e72d-4322-89e5-dc51553f47d8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"description": "Content-Language",
								"key": "Content-Language",
								"value": "elit aute",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/contracting/basket/main-products?sessionId=866f69e3-4e67-4025-bfa7-692cb36eca58&category=MOBILE",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"contracting",
								"basket",
								"main-products"
							],
							"query": [
								{
									"key": "sessionId",
									"value": "866f69e3-4e67-4025-bfa7-692cb36eca58"
								},
								{
									"key": "category",
									"value": "MOBILE"
								}
							]
						},
						"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
					},
					"response": [
						{
							"id": "2dc6a6c3-e760-43dc-b9d3-583af89f0a0e",
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Content-Language",
										"key": "Content-Language",
										"value": "elit aute",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contracting/basket/main-products?sessionId=866f69e3-4e67-4025-bfa7-692cb36eca58&category=MOBILE",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket",
										"main-products"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "866f69e3-4e67-4025-bfa7-692cb36eca58"
										},
										{
											"key": "category",
											"value": "MOBILE"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "23363af7-346b-437c-8279-ffeded7319a9",
							"name": "Bad Request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Content-Language",
										"key": "Content-Language",
										"value": "elit aute",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contracting/basket/main-products?sessionId=866f69e3-4e67-4025-bfa7-692cb36eca58&category=MOBILE",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket",
										"main-products"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "866f69e3-4e67-4025-bfa7-692cb36eca58"
										},
										{
											"key": "category",
											"value": "MOBILE"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "6880fe2a-b5cb-4b52-8804-beb586528284",
							"name": "Unauthorized",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Content-Language",
										"key": "Content-Language",
										"value": "elit aute",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contracting/basket/main-products?sessionId=866f69e3-4e67-4025-bfa7-692cb36eca58&category=MOBILE",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket",
										"main-products"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "866f69e3-4e67-4025-bfa7-692cb36eca58"
										},
										{
											"key": "category",
											"value": "MOBILE"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "2ca8be0b-ed19-4ef2-af2c-c0db65d2984e",
							"name": "Forbidden",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Content-Language",
										"key": "Content-Language",
										"value": "elit aute",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contracting/basket/main-products?sessionId=866f69e3-4e67-4025-bfa7-692cb36eca58&category=MOBILE",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket",
										"main-products"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "866f69e3-4e67-4025-bfa7-692cb36eca58"
										},
										{
											"key": "category",
											"value": "MOBILE"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "d627b6ce-72cb-4ab1-94ba-fd06ccfac883",
							"name": "Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Content-Language",
										"key": "Content-Language",
										"value": "elit aute",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contracting/basket/main-products?sessionId=866f69e3-4e67-4025-bfa7-692cb36eca58&category=MOBILE",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket",
										"main-products"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "866f69e3-4e67-4025-bfa7-692cb36eca58"
										},
										{
											"key": "category",
											"value": "MOBILE"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "a619fb42-6656-4574-8db0-f56df2ed025a",
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Content-Language",
										"key": "Content-Language",
										"value": "elit aute",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contracting/basket/main-products?sessionId=866f69e3-4e67-4025-bfa7-692cb36eca58&category=MOBILE",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket",
										"main-products"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "866f69e3-4e67-4025-bfa7-692cb36eca58"
										},
										{
											"key": "category",
											"value": "MOBILE"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "3e8ef009-2bbf-4d9c-a0a6-66efa139f643",
							"name": "Server Error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Content-Language",
										"key": "Content-Language",
										"value": "elit aute",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contracting/basket/main-products?sessionId=866f69e3-4e67-4025-bfa7-692cb36eca58&category=MOBILE",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket",
										"main-products"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "866f69e3-4e67-4025-bfa7-692cb36eca58"
										},
										{
											"key": "category",
											"value": "MOBILE"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "1389664c-f9a2-4028-8d9d-7e44b17e73bc",
							"name": "Service Unavailable",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Content-Language",
										"key": "Content-Language",
										"value": "elit aute",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contracting/basket/main-products?sessionId=866f69e3-4e67-4025-bfa7-692cb36eca58&category=MOBILE",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket",
										"main-products"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "866f69e3-4e67-4025-bfa7-692cb36eca58"
										},
										{
											"key": "category",
											"value": "MOBILE"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "4- Add mobile product to Basket",
					"id": "56402fe4-d6ab-4d00-aeaf-4832d06eec80",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"productActions\": [{\n    \"productId\": \"TreeNode_47995_1665058112928\",\n    \"amount\": 1,\n    \"type\": \"PUT\" \n  }]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/contracting/basket?sessionId=866f69e3-4e67-4025-bfa7-692cb36eca58",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"contracting",
								"basket"
							],
							"query": [
								{
									"key": "sessionId",
									"value": "866f69e3-4e67-4025-bfa7-692cb36eca58"
								}
							]
						},
						"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
					},
					"response": [
						{
							"id": "ba66c361-ace7-4f00-ad47-5d87ff74042e",
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"productActions\": [{\n    \"productId\": \"TreeNode_47995_1665058112928\",\n    \"amount\": 1,\n    \"type\": \"PUT\" \n  }]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=866f69e3-4e67-4025-bfa7-692cb36eca58",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "866f69e3-4e67-4025-bfa7-692cb36eca58"
										}
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "5038f4b3-6224-4d36-b9c6-9a67f82bc3b4",
							"name": "Bad Request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"productActions\": [{\n    \"productId\": \"TreeNode_47995_1665058112928\",\n    \"amount\": 1,\n    \"type\": \"PUT\" \n  }]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=866f69e3-4e67-4025-bfa7-692cb36eca58",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "866f69e3-4e67-4025-bfa7-692cb36eca58"
										}
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "0daa783a-3fda-45b2-b095-4737659eff21",
							"name": "Unauthorized",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"productActions\": [{\n    \"productId\": \"TreeNode_47995_1665058112928\",\n    \"amount\": 1,\n    \"type\": \"PUT\" \n  }]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=866f69e3-4e67-4025-bfa7-692cb36eca58",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "866f69e3-4e67-4025-bfa7-692cb36eca58"
										}
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "d017da38-9783-480f-aec0-e8c019aa173f",
							"name": "Forbidden",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"productActions\": [{\n    \"productId\": \"TreeNode_47995_1665058112928\",\n    \"amount\": 1,\n    \"type\": \"PUT\" \n  }]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=866f69e3-4e67-4025-bfa7-692cb36eca58",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "866f69e3-4e67-4025-bfa7-692cb36eca58"
										}
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "ebb8ac03-b4fd-459a-a68f-e4efbd08c467",
							"name": "Not Found",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"productActions\": [{\n    \"productId\": \"TreeNode_47995_1665058112928\",\n    \"amount\": 1,\n    \"type\": \"PUT\" \n  }]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=866f69e3-4e67-4025-bfa7-692cb36eca58",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "866f69e3-4e67-4025-bfa7-692cb36eca58"
										}
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "0e91ef9e-c859-47a3-aa45-887cc0e09dd4",
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"productActions\": [{\n    \"productId\": \"TreeNode_47995_1665058112928\",\n    \"amount\": 1,\n    \"type\": \"PUT\" \n  }]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=866f69e3-4e67-4025-bfa7-692cb36eca58",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "866f69e3-4e67-4025-bfa7-692cb36eca58"
										}
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "08bc6459-f055-4adf-80a5-15dbc72523d5",
							"name": "Server Error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"productActions\": [{\n    \"productId\": \"TreeNode_47995_1665058112928\",\n    \"amount\": 1,\n    \"type\": \"PUT\" \n  }]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=866f69e3-4e67-4025-bfa7-692cb36eca58",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "866f69e3-4e67-4025-bfa7-692cb36eca58"
										}
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "37057d1a-e6ac-4dbe-b571-293f00a7665b",
							"name": "Service Unavailable",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"productActions\": [{\n    \"productId\": \"TreeNode_47995_1665058112928\",\n    \"amount\": 1,\n    \"type\": \"PUT\" \n  }]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=866f69e3-4e67-4025-bfa7-692cb36eca58",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "866f69e3-4e67-4025-bfa7-692cb36eca58"
										}
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "5- Get basket content with products tree and prices",
					"id": "d2684a9d-2809-4a23-9a23-850d9f09c1bd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/contracting/basket?sessionId=866f69e3-4e67-4025-bfa7-692cb36eca58",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"contracting",
								"basket"
							],
							"query": [
								{
									"key": "sessionId",
									"value": "866f69e3-4e67-4025-bfa7-692cb36eca58"
								},
								{
									"key": "category",
									"value": "MOBILE",
									"disabled": true
								}
							]
						},
						"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
					},
					"response": [
						{
							"id": "f8ff76ae-4f37-4893-a9f0-7aa5f32c518a",
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=866f69e3-4e67-4025-bfa7-692cb36eca58",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "866f69e3-4e67-4025-bfa7-692cb36eca58"
										},
										{
											"key": "category",
											"value": "MOBILE",
											"disabled": true
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "b56c02ed-da36-4274-9985-f63c47f23859",
							"name": "Bad Request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=866f69e3-4e67-4025-bfa7-692cb36eca58&category=MOBILE",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "866f69e3-4e67-4025-bfa7-692cb36eca58"
										},
										{
											"key": "category",
											"value": "MOBILE",
											"disabled": true
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "1528511b-030c-4f22-88d6-bc506747cc03",
							"name": "Unauthorized",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=866f69e3-4e67-4025-bfa7-692cb36eca58&category=MOBILE",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "866f69e3-4e67-4025-bfa7-692cb36eca58"
										},
										{
											"key": "category",
											"value": "MOBILE",
											"disabled": true
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "6fdf3f05-5248-421f-8260-25c823300f57",
							"name": "Forbidden",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=866f69e3-4e67-4025-bfa7-692cb36eca58&category=MOBILE",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "866f69e3-4e67-4025-bfa7-692cb36eca58"
										},
										{
											"key": "category",
											"value": "MOBILE",
											"disabled": true
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "806ce324-df7d-46ef-ab5f-02a84882a0fa",
							"name": "Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=866f69e3-4e67-4025-bfa7-692cb36eca58&category=MOBILE",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "866f69e3-4e67-4025-bfa7-692cb36eca58"
										},
										{
											"key": "category",
											"value": "MOBILE",
											"disabled": true
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "0232e6a7-2531-4a12-9c79-fb8babdff3bc",
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=866f69e3-4e67-4025-bfa7-692cb36eca58&category=MOBILE",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "866f69e3-4e67-4025-bfa7-692cb36eca58"
										},
										{
											"key": "category",
											"value": "MOBILE",
											"disabled": true
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "e6c6b90f-966e-4de5-bb92-789cc30a1077",
							"name": "Server Error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=866f69e3-4e67-4025-bfa7-692cb36eca58&category=MOBILE",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "866f69e3-4e67-4025-bfa7-692cb36eca58"
										},
										{
											"key": "category",
											"value": "MOBILE",
											"disabled": true
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "fe9ec210-b68e-4763-a1be-f4b519a35771",
							"name": "Service Unavailable",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=866f69e3-4e67-4025-bfa7-692cb36eca58&category=MOBILE",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "866f69e3-4e67-4025-bfa7-692cb36eca58"
										},
										{
											"key": "category",
											"value": "MOBILE",
											"disabled": true
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "6- Set SIM card number from stock in basket",
					"id": "003dec1f-d00e-4644-9bff-2fe9298adbe9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": " {\n   \"characteristicActions\": [\n                    {\n                      \"name\": \"eSim\",\n                      \"value\": \"true\"\n                    }\n  ] \n }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/contracting/basket?sessionId=866f69e3-4e67-4025-bfa7-692cb36eca58",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"contracting",
								"basket"
							],
							"query": [
								{
									"key": "sessionId",
									"value": "866f69e3-4e67-4025-bfa7-692cb36eca58"
								}
							]
						},
						"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
					},
					"response": [
						{
							"id": "1a136358-24bd-482a-b491-1c45905f65fd",
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n   \"characteristicActions\": [\n                    {\n                      \"name\": \"eSim\",\n                      \"value\": \"true\"\n                    }\n  ] \n }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=866f69e3-4e67-4025-bfa7-692cb36eca58",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "866f69e3-4e67-4025-bfa7-692cb36eca58"
										}
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "fae453e3-03de-4b98-b03b-83a2ecc52f52",
							"name": "Bad Request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n   \"characteristicActions\": [\n                    {\n                      \"name\": \"eSim\",\n                      \"value\": \"true\"\n                    }\n  ] \n }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=866f69e3-4e67-4025-bfa7-692cb36eca58",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "866f69e3-4e67-4025-bfa7-692cb36eca58"
										}
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "03c81e74-1baf-41ce-b3ea-e01c72cba30f",
							"name": "Unauthorized",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n   \"characteristicActions\": [\n                    {\n                      \"name\": \"eSim\",\n                      \"value\": \"true\"\n                    }\n  ] \n }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=866f69e3-4e67-4025-bfa7-692cb36eca58",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "866f69e3-4e67-4025-bfa7-692cb36eca58"
										}
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "6cae8478-8255-4af3-afa7-2b4e02db3d70",
							"name": "Forbidden",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n   \"characteristicActions\": [\n                    {\n                      \"name\": \"eSim\",\n                      \"value\": \"true\"\n                    }\n  ] \n }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=866f69e3-4e67-4025-bfa7-692cb36eca58",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "866f69e3-4e67-4025-bfa7-692cb36eca58"
										}
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "5c43884a-f768-4cf7-aea3-58c89528c469",
							"name": "Not Found",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n   \"characteristicActions\": [\n                    {\n                      \"name\": \"eSim\",\n                      \"value\": \"true\"\n                    }\n  ] \n }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=866f69e3-4e67-4025-bfa7-692cb36eca58",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "866f69e3-4e67-4025-bfa7-692cb36eca58"
										}
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "0a9eb2f0-efab-428e-891a-2f435cec8720",
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n   \"characteristicActions\": [\n                    {\n                      \"name\": \"eSim\",\n                      \"value\": \"true\"\n                    }\n  ] \n }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=866f69e3-4e67-4025-bfa7-692cb36eca58",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "866f69e3-4e67-4025-bfa7-692cb36eca58"
										}
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "92bfe214-a86e-4fa0-83b8-4e7b06340ecb",
							"name": "Server Error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n   \"characteristicActions\": [\n                    {\n                      \"name\": \"eSim\",\n                      \"value\": \"true\"\n                    }\n  ] \n }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=866f69e3-4e67-4025-bfa7-692cb36eca58",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "866f69e3-4e67-4025-bfa7-692cb36eca58"
										}
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "9107f2f4-68e4-44a0-8237-ab299a295dc8",
							"name": "Service Unavailable",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n   \"characteristicActions\": [\n                    {\n                      \"name\": \"eSim\",\n                      \"value\": \"true\"\n                    }\n  ] \n }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=866f69e3-4e67-4025-bfa7-692cb36eca58",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "866f69e3-4e67-4025-bfa7-692cb36eca58"
										}
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "7- Get basket and check eSIM Charasteristic",
					"id": "4f793c63-113a-4e6e-b79c-0217fb3b9136",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/contracting/basket?sessionId=866f69e3-4e67-4025-bfa7-692cb36eca58",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"contracting",
								"basket"
							],
							"query": [
								{
									"key": "sessionId",
									"value": "866f69e3-4e67-4025-bfa7-692cb36eca58"
								},
								{
									"key": "category",
									"value": "MOBILE",
									"disabled": true
								}
							]
						},
						"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
					},
					"response": [
						{
							"id": "28075a7b-6587-49b4-97e2-3c06c5710426",
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=866f69e3-4e67-4025-bfa7-692cb36eca58",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "866f69e3-4e67-4025-bfa7-692cb36eca58"
										},
										{
											"key": "category",
											"value": "MOBILE",
											"disabled": true
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "15d12e95-bdb8-4d65-9527-e099ae3327fd",
							"name": "Bad Request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=866f69e3-4e67-4025-bfa7-692cb36eca58&category=MOBILE",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "866f69e3-4e67-4025-bfa7-692cb36eca58"
										},
										{
											"key": "category",
											"value": "MOBILE",
											"disabled": true
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "1e56ebb1-d4f1-4f4e-86bc-89222a3452a2",
							"name": "Unauthorized",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=866f69e3-4e67-4025-bfa7-692cb36eca58&category=MOBILE",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "866f69e3-4e67-4025-bfa7-692cb36eca58"
										},
										{
											"key": "category",
											"value": "MOBILE",
											"disabled": true
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "729e3e7b-3efb-4003-b6da-74a417924f69",
							"name": "Forbidden",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=866f69e3-4e67-4025-bfa7-692cb36eca58&category=MOBILE",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "866f69e3-4e67-4025-bfa7-692cb36eca58"
										},
										{
											"key": "category",
											"value": "MOBILE",
											"disabled": true
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "29af6071-5d86-4312-ba9c-6652993eeacc",
							"name": "Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=866f69e3-4e67-4025-bfa7-692cb36eca58&category=MOBILE",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "866f69e3-4e67-4025-bfa7-692cb36eca58"
										},
										{
											"key": "category",
											"value": "MOBILE",
											"disabled": true
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "087c1a90-6580-479b-b56d-29f6da8a4e2d",
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=866f69e3-4e67-4025-bfa7-692cb36eca58&category=MOBILE",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "866f69e3-4e67-4025-bfa7-692cb36eca58"
										},
										{
											"key": "category",
											"value": "MOBILE",
											"disabled": true
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "45822b9e-cf78-4968-bab0-4e27205e1aba",
							"name": "Server Error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=866f69e3-4e67-4025-bfa7-692cb36eca58&category=MOBILE",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "866f69e3-4e67-4025-bfa7-692cb36eca58"
										},
										{
											"key": "category",
											"value": "MOBILE",
											"disabled": true
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "740249e6-de2c-4284-bdb5-ee634dc87fef",
							"name": "Service Unavailable",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=866f69e3-4e67-4025-bfa7-692cb36eca58&category=MOBILE",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "866f69e3-4e67-4025-bfa7-692cb36eca58"
										},
										{
											"key": "category",
											"value": "MOBILE",
											"disabled": true
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "8- Set eSIM email",
					"id": "00aa7a5b-23c6-491f-95f4-8139369c0f48",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": " {\n   \"characteristicActions\": [\n                    {\n                      \"name\": \"eSimEmail\",\n                      \"value\": \"nirupam.anand@kpn.com\"\n                    }\n  ] \n }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/contracting/basket?sessionId=866f69e3-4e67-4025-bfa7-692cb36eca58",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"contracting",
								"basket"
							],
							"query": [
								{
									"key": "sessionId",
									"value": "866f69e3-4e67-4025-bfa7-692cb36eca58"
								}
							]
						},
						"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
					},
					"response": [
						{
							"id": "94178187-e1d3-4d6b-86a5-afd3ae9013db",
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n   \"characteristicActions\": [\n                    {\n                      \"name\": \"eSimEmail\",\n                      \"value\": \"nirupam.anand@kpn.com\"\n                    }\n  ] \n }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=866f69e3-4e67-4025-bfa7-692cb36eca58",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "866f69e3-4e67-4025-bfa7-692cb36eca58"
										}
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "b759de6a-76bb-4bac-b983-20b84927fd1a",
							"name": "Bad Request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n   \"characteristicActions\": [\n                    {\n                      \"name\": \"eSimEmail\",\n                      \"value\": \"nirupam.anand@kpn.com\"\n                    }\n  ] \n }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=866f69e3-4e67-4025-bfa7-692cb36eca58",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "866f69e3-4e67-4025-bfa7-692cb36eca58"
										}
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "4fd2e741-5906-4199-86a6-83e69893b943",
							"name": "Unauthorized",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n   \"characteristicActions\": [\n                    {\n                      \"name\": \"eSimEmail\",\n                      \"value\": \"nirupam.anand@kpn.com\"\n                    }\n  ] \n }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=866f69e3-4e67-4025-bfa7-692cb36eca58",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "866f69e3-4e67-4025-bfa7-692cb36eca58"
										}
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "ce8521bf-dd16-49a1-9e80-94d087acb9c8",
							"name": "Forbidden",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n   \"characteristicActions\": [\n                    {\n                      \"name\": \"eSimEmail\",\n                      \"value\": \"nirupam.anand@kpn.com\"\n                    }\n  ] \n }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=866f69e3-4e67-4025-bfa7-692cb36eca58",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "866f69e3-4e67-4025-bfa7-692cb36eca58"
										}
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "964c88fd-d8f8-426d-87b2-7b6eeae366c9",
							"name": "Not Found",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n   \"characteristicActions\": [\n                    {\n                      \"name\": \"eSimEmail\",\n                      \"value\": \"nirupam.anand@kpn.com\"\n                    }\n  ] \n }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=866f69e3-4e67-4025-bfa7-692cb36eca58",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "866f69e3-4e67-4025-bfa7-692cb36eca58"
										}
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "ec473012-2b3f-4e57-91fe-8e40b629f5c2",
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n   \"characteristicActions\": [\n                    {\n                      \"name\": \"eSimEmail\",\n                      \"value\": \"nirupam.anand@kpn.com\"\n                    }\n  ] \n }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=866f69e3-4e67-4025-bfa7-692cb36eca58",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "866f69e3-4e67-4025-bfa7-692cb36eca58"
										}
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "e76d985a-5d0b-47e4-a488-a9100eae9526",
							"name": "Server Error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n   \"characteristicActions\": [\n                    {\n                      \"name\": \"eSimEmail\",\n                      \"value\": \"nirupam.anand@kpn.com\"\n                    }\n  ] \n }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=866f69e3-4e67-4025-bfa7-692cb36eca58",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "866f69e3-4e67-4025-bfa7-692cb36eca58"
										}
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "1ee0fa92-1b70-4e0a-8612-61d0b00d4990",
							"name": "Service Unavailable",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n   \"characteristicActions\": [\n                    {\n                      \"name\": \"eSimEmail\",\n                      \"value\": \"nirupam.anand@kpn.com\"\n                    }\n  ] \n }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=866f69e3-4e67-4025-bfa7-692cb36eca58",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "866f69e3-4e67-4025-bfa7-692cb36eca58"
										}
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "9- Set eSIM confirmation code",
					"id": "798bdad7-f4b7-45c7-a259-1687085ea27c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": " {\n   \"characteristicActions\": [\n                    {\n                      \"name\": \"eSimConfirmationCode\",\n                      \"value\": \"9\"\n                    }\n  ] \n }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/contracting/basket?sessionId=866f69e3-4e67-4025-bfa7-692cb36eca58",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"contracting",
								"basket"
							],
							"query": [
								{
									"key": "sessionId",
									"value": "866f69e3-4e67-4025-bfa7-692cb36eca58"
								}
							]
						},
						"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
					},
					"response": [
						{
							"id": "8b49bcfe-4c2e-44c7-b205-882ee2503241",
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n   \"characteristicActions\": [\n                    {\n                      \"name\": \"eSimConfirmationCode\",\n                      \"value\": \"9\"\n                    }\n  ] \n }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=866f69e3-4e67-4025-bfa7-692cb36eca58",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "866f69e3-4e67-4025-bfa7-692cb36eca58"
										}
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "8b4d7753-539d-49fe-9fcf-9646a7c1daa0",
							"name": "Bad Request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n   \"characteristicActions\": [\n                    {\n                      \"name\": \"eSimConfirmationCode\",\n                      \"value\": \"9\"\n                    }\n  ] \n }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=866f69e3-4e67-4025-bfa7-692cb36eca58",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "866f69e3-4e67-4025-bfa7-692cb36eca58"
										}
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "de5b718e-cca2-4b07-af23-15ab2df91835",
							"name": "Unauthorized",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n   \"characteristicActions\": [\n                    {\n                      \"name\": \"eSimConfirmationCode\",\n                      \"value\": \"9\"\n                    }\n  ] \n }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=866f69e3-4e67-4025-bfa7-692cb36eca58",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "866f69e3-4e67-4025-bfa7-692cb36eca58"
										}
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "81b122fb-0941-4472-a17a-59820182a07d",
							"name": "Forbidden",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n   \"characteristicActions\": [\n                    {\n                      \"name\": \"eSimConfirmationCode\",\n                      \"value\": \"9\"\n                    }\n  ] \n }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=866f69e3-4e67-4025-bfa7-692cb36eca58",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "866f69e3-4e67-4025-bfa7-692cb36eca58"
										}
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "47d29bb6-ddad-4a9a-bf06-a4bebf2a8537",
							"name": "Not Found",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n   \"characteristicActions\": [\n                    {\n                      \"name\": \"eSimConfirmationCode\",\n                      \"value\": \"9\"\n                    }\n  ] \n }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=866f69e3-4e67-4025-bfa7-692cb36eca58",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "866f69e3-4e67-4025-bfa7-692cb36eca58"
										}
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "aebcf8b4-ddd0-4125-8ea9-ac2de52abb8e",
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n   \"characteristicActions\": [\n                    {\n                      \"name\": \"eSimConfirmationCode\",\n                      \"value\": \"9\"\n                    }\n  ] \n }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=866f69e3-4e67-4025-bfa7-692cb36eca58",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "866f69e3-4e67-4025-bfa7-692cb36eca58"
										}
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "b7b09f8e-c15c-4512-8a5a-4115fd5a470d",
							"name": "Server Error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n   \"characteristicActions\": [\n                    {\n                      \"name\": \"eSimConfirmationCode\",\n                      \"value\": \"9\"\n                    }\n  ] \n }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=866f69e3-4e67-4025-bfa7-692cb36eca58",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "866f69e3-4e67-4025-bfa7-692cb36eca58"
										}
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "b8c09452-c7a6-4713-84ee-8300c50704a7",
							"name": "Service Unavailable",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n   \"characteristicActions\": [\n                    {\n                      \"name\": \"eSimConfirmationCode\",\n                      \"value\": \"9\"\n                    }\n  ] \n }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=866f69e3-4e67-4025-bfa7-692cb36eca58",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "866f69e3-4e67-4025-bfa7-692cb36eca58"
										}
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "10- Get basket and check eSIM",
					"id": "146d4f7a-2b35-4d11-bb00-a1b75502921c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/contracting/basket?sessionId=866f69e3-4e67-4025-bfa7-692cb36eca58",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"contracting",
								"basket"
							],
							"query": [
								{
									"key": "sessionId",
									"value": "866f69e3-4e67-4025-bfa7-692cb36eca58"
								},
								{
									"key": "category",
									"value": "MOBILE",
									"disabled": true
								}
							]
						},
						"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
					},
					"response": [
						{
							"id": "ce09af44-a6db-4c45-ae86-60656f562dda",
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=866f69e3-4e67-4025-bfa7-692cb36eca58",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "866f69e3-4e67-4025-bfa7-692cb36eca58"
										},
										{
											"key": "category",
											"value": "MOBILE",
											"disabled": true
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "f82ce5c6-85e5-4cd7-87e8-e9d7d7c35d3b",
							"name": "Bad Request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=866f69e3-4e67-4025-bfa7-692cb36eca58&category=MOBILE",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "866f69e3-4e67-4025-bfa7-692cb36eca58"
										},
										{
											"key": "category",
											"value": "MOBILE",
											"disabled": true
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "003bf991-680b-4ce2-8c79-ba20ac6ba7a9",
							"name": "Unauthorized",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=866f69e3-4e67-4025-bfa7-692cb36eca58&category=MOBILE",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "866f69e3-4e67-4025-bfa7-692cb36eca58"
										},
										{
											"key": "category",
											"value": "MOBILE",
											"disabled": true
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "33d7ec1b-75b6-4327-b97f-830fa1a1204d",
							"name": "Forbidden",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=866f69e3-4e67-4025-bfa7-692cb36eca58&category=MOBILE",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "866f69e3-4e67-4025-bfa7-692cb36eca58"
										},
										{
											"key": "category",
											"value": "MOBILE",
											"disabled": true
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "4c010337-501e-4fd7-aa4b-b2f262c7543c",
							"name": "Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=866f69e3-4e67-4025-bfa7-692cb36eca58&category=MOBILE",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "866f69e3-4e67-4025-bfa7-692cb36eca58"
										},
										{
											"key": "category",
											"value": "MOBILE",
											"disabled": true
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "f6ab3c7e-3e65-485a-b0c9-eeb9297970c7",
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=866f69e3-4e67-4025-bfa7-692cb36eca58&category=MOBILE",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "866f69e3-4e67-4025-bfa7-692cb36eca58"
										},
										{
											"key": "category",
											"value": "MOBILE",
											"disabled": true
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "c3f7d77b-5cbe-4381-9c17-5e3d4e0e8ac7",
							"name": "Server Error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=866f69e3-4e67-4025-bfa7-692cb36eca58&category=MOBILE",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "866f69e3-4e67-4025-bfa7-692cb36eca58"
										},
										{
											"key": "category",
											"value": "MOBILE",
											"disabled": true
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "b03d2eb0-d6b8-40c7-868f-6ea1363b5fcc",
							"name": "Service Unavailable",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=866f69e3-4e67-4025-bfa7-692cb36eca58&category=MOBILE",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "866f69e3-4e67-4025-bfa7-692cb36eca58"
										},
										{
											"key": "category",
											"value": "MOBILE",
											"disabled": true
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "11- Order the basket",
					"id": "001ec098-db8b-42ca-a58d-2bf8556a41bb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"referenceNumber\": \"Test RUN\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/contracting/basket/order?sessionId=866f69e3-4e67-4025-bfa7-692cb36eca58",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"contracting",
								"basket",
								"order"
							],
							"query": [
								{
									"key": "sessionId",
									"value": "866f69e3-4e67-4025-bfa7-692cb36eca58"
								}
							]
						},
						"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
					},
					"response": [
						{
							"id": "2a454221-2a8e-47ca-8ee8-7d998d1de9bd",
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"referenceNumber\": \"Test RUN\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket/order?sessionId=866f69e3-4e67-4025-bfa7-692cb36eca58",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket",
										"order"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "866f69e3-4e67-4025-bfa7-692cb36eca58"
										}
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "84048f05-3d50-4896-a00c-48ddcd1b203b",
							"name": "Bad Request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"referenceNumber\": \"Test RUN\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket/order?sessionId=866f69e3-4e67-4025-bfa7-692cb36eca58",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket",
										"order"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "866f69e3-4e67-4025-bfa7-692cb36eca58"
										}
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "814ecaac-8e8a-4a0a-ab79-c8e368325384",
							"name": "Unauthorized",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"referenceNumber\": \"Test RUN\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket/order?sessionId=866f69e3-4e67-4025-bfa7-692cb36eca58",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket",
										"order"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "866f69e3-4e67-4025-bfa7-692cb36eca58"
										}
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "52b8d554-7551-461d-a316-f1d2e6518c80",
							"name": "Forbidden",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"referenceNumber\": \"Test RUN\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket/order?sessionId=866f69e3-4e67-4025-bfa7-692cb36eca58",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket",
										"order"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "866f69e3-4e67-4025-bfa7-692cb36eca58"
										}
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "bc8ee949-8039-4db3-852c-0dcd4e545117",
							"name": "Not Found",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"referenceNumber\": \"Test RUN\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket/order?sessionId=866f69e3-4e67-4025-bfa7-692cb36eca58",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket",
										"order"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "866f69e3-4e67-4025-bfa7-692cb36eca58"
										}
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "cbb0139a-da10-415f-875f-98fa476d8f4f",
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"referenceNumber\": \"Test RUN\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket/order?sessionId=866f69e3-4e67-4025-bfa7-692cb36eca58",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket",
										"order"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "866f69e3-4e67-4025-bfa7-692cb36eca58"
										}
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "d7fab40b-8bf8-414e-891e-01b211ecce77",
							"name": "Server Error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"referenceNumber\": \"Test RUN\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket/order?sessionId=866f69e3-4e67-4025-bfa7-692cb36eca58",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket",
										"order"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "866f69e3-4e67-4025-bfa7-692cb36eca58"
										}
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "dc3ffda4-bedd-43f1-8196-1b7f7716835e",
							"name": "Service Unavailable",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"referenceNumber\": \"Test RUN\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket/order?sessionId=866f69e3-4e67-4025-bfa7-692cb36eca58",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket",
										"order"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "866f69e3-4e67-4025-bfa7-692cb36eca58"
										}
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "12- Track Order status",
					"id": "9952d18c-3ae7-4587-a686-f7a4a0f5bd52",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/track-and-trace/orders/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"track-and-trace",
								"orders",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "49579498",
									"description": "(Required) id"
								}
							]
						},
						"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_orders_track_and_trace</li><li>privileges_orders_authorization</li></ul>"
					},
					"response": [
						{
							"id": "dec1ea1e-f24b-429a-a850-4592c234daa9",
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/track-and-trace/orders/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"track-and-trace",
										"orders",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "49579498",
											"description": "(Required) id"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_orders_track_and_trace</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "c927fc7c-d58f-4ff3-ab70-ab151e20ff40",
							"name": "Bad Request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/track-and-trace/orders/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"track-and-trace",
										"orders",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "49579498",
											"description": "(Required) id"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_orders_track_and_trace</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "2d919a64-eada-4252-8863-1679ebd49ccb",
							"name": "Unauthorized",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/track-and-trace/orders/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"track-and-trace",
										"orders",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "49579498",
											"description": "(Required) id"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_orders_track_and_trace</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "6c23ca3a-e6da-427d-8e09-073dd0969331",
							"name": "Forbidden",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/track-and-trace/orders/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"track-and-trace",
										"orders",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "49579498",
											"description": "(Required) id"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_orders_track_and_trace</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "f0860245-94a2-4827-bb8f-4fdbe704ee05",
							"name": "Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/track-and-trace/orders/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"track-and-trace",
										"orders",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "49579498",
											"description": "(Required) id"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_orders_track_and_trace</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "0225bf1b-4366-499c-9d5b-8d06793fc730",
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/track-and-trace/orders/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"track-and-trace",
										"orders",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "49579498",
											"description": "(Required) id"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_orders_track_and_trace</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "6fc8f109-b35e-429c-ac31-fdf6a576be55",
							"name": "Server Error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/track-and-trace/orders/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"track-and-trace",
										"orders",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "49579498",
											"description": "(Required) id"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_orders_track_and_trace</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "e14a091e-053d-4f09-9f16-0683a3f6a860",
							"name": "Service Unavailable",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/track-and-trace/orders/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"track-and-trace",
										"orders",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "49579498",
											"description": "(Required) id"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_orders_track_and_trace</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			],
			"id": "a6373906-520b-43ce-9c21-a34dcf025ec7",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "ee9e2421-6680-49bd-93e5-889ff404eeaa",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "c56cd99e-b409-4962-af05-4851e2cb4ecf",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "03- Block SIM card",
			"item": [
				{
					"name": "1- Get all contracts",
					"id": "d7ba34f1-3790-450e-a40c-5f34f0b72882",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"description": "Content-Language",
								"key": "Content-Language",
								"value": "elit aute"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/contract/all",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"contract",
								"all"
							]
						},
						"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li></ul>"
					},
					"response": [
						{
							"id": "fc0712ba-f370-4e75-a018-c3b2e5a1482a",
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Content-Language",
										"key": "Content-Language",
										"value": "elit aute"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contract/all",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contract",
										"all"
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li></ul>"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "c0a4b104-1287-44e3-8af9-56f4d322fb7c",
							"name": "Bad Request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Content-Language",
										"key": "Content-Language",
										"value": "elit aute"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contract/all",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contract",
										"all"
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li></ul>"
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "6b617749-c12c-40a5-a5bc-e6659f3e2ad2",
							"name": "Unauthorized",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Content-Language",
										"key": "Content-Language",
										"value": "elit aute"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contract/all",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contract",
										"all"
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li></ul>"
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "e69ccf85-13b1-4a51-a783-ddee319243db",
							"name": "Forbidden",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Content-Language",
										"key": "Content-Language",
										"value": "elit aute"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contract/all",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contract",
										"all"
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li></ul>"
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "77534c39-07c4-47c2-a08a-4786a2cdf825",
							"name": "Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Content-Language",
										"key": "Content-Language",
										"value": "elit aute"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contract/all",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contract",
										"all"
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li></ul>"
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "730dc1b2-2a54-45a9-a745-d11f4218a78e",
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Content-Language",
										"key": "Content-Language",
										"value": "elit aute"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contract/all",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contract",
										"all"
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li></ul>"
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "48038409-f773-4b57-bc9c-5e6986935fc7",
							"name": "Server Error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Content-Language",
										"key": "Content-Language",
										"value": "elit aute"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contract/all",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contract",
										"all"
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li></ul>"
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "db75451c-709a-4bce-bfba-d386e0d588b2",
							"name": "Service Unavailable",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Content-Language",
										"key": "Content-Language",
										"value": "elit aute"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contract/all",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contract",
										"all"
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li></ul>"
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "2- Get information about operations available for given contract.",
					"id": "76bb2e10-e0cf-4b36-aa3f-c8a01604dc1c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/order/operations?contractId=1283618026",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"order",
								"operations"
							],
							"query": [
								{
									"key": "contractId",
									"value": "1283618026"
								}
							]
						},
						"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
					},
					"response": [
						{
							"id": "ee6bcd2e-7fb0-42d8-b6cf-de2a05009925",
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/order/operations?contractId=1283618026",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"order",
										"operations"
									],
									"query": [
										{
											"key": "contractId",
											"value": "1283618026"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "48857ae2-cf37-4d8c-9fcb-3283fc2e3dd8",
							"name": "Bad Request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/order/operations?contractId=1283618026",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"order",
										"operations"
									],
									"query": [
										{
											"key": "contractId",
											"value": "1283618026"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "20478601-a3b2-4740-acc7-761d9ab275ef",
							"name": "Unauthorized",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/order/operations?contractId=1283618026",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"order",
										"operations"
									],
									"query": [
										{
											"key": "contractId",
											"value": "1283618026"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "4fe91bd5-d287-405a-96c2-d3db81ef9bc5",
							"name": "Forbidden",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/order/operations?contractId=1283618026",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"order",
										"operations"
									],
									"query": [
										{
											"key": "contractId",
											"value": "1283618026"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "b68fad4a-f8d8-4028-ad5c-88da4af2f32a",
							"name": "Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/order/operations?contractId=1283618026",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"order",
										"operations"
									],
									"query": [
										{
											"key": "contractId",
											"value": "1283618026"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "bd65c668-3c77-4e19-986b-5f1ee23bc1f2",
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/order/operations?contractId=1283618026",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"order",
										"operations"
									],
									"query": [
										{
											"key": "contractId",
											"value": "1283618026"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "deb4e976-4f87-424c-828d-a9b4d412ee15",
							"name": "Server Error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/order/operations?contractId=1283618026",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"order",
										"operations"
									],
									"query": [
										{
											"key": "contractId",
											"value": "1283618026"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "164b0bc6-5229-4169-b1b3-4412bb8572b4",
							"name": "Service Unavailable",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/order/operations?contractId=1283618026",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"order",
										"operations"
									],
									"query": [
										{
											"key": "contractId",
											"value": "1283618026"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "3- Block sim for given contract",
					"id": "982334a8-9e99-4472-8e28-5c5900c7e466",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"contractId\": 1283618026,\r\n  \"referenceNumber\": \"Test run\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/order/block-sim",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"order",
								"block-sim"
							]
						},
						"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
					},
					"response": [
						{
							"id": "be135bc3-e67b-4075-bb1e-09581cd9dbae",
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"contractId\": 1283618026,\r\n  \"referenceNumber\": \"Test run\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/order/block-sim",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"order",
										"block-sim"
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "d9ec4689-c797-439d-b69e-0ea1c846e0dc",
							"name": "Bad Request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"contractId\": 1283618026,\r\n  \"referenceNumber\": \"Test run\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/order/block-sim",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"order",
										"block-sim"
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "e7ebc9d3-6df0-4ac0-b3e5-f4f58f9287d3",
							"name": "Unauthorized",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"contractId\": 1283618026,\r\n  \"referenceNumber\": \"Test run\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/order/block-sim",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"order",
										"block-sim"
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "fee2d1f6-6680-4cc7-8663-39278d768b89",
							"name": "Forbidden",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"contractId\": 1283618026,\r\n  \"referenceNumber\": \"Test run\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/order/block-sim",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"order",
										"block-sim"
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "b18ef872-22a3-4db9-b8e7-8e28dd74d80f",
							"name": "Not Found",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"contractId\": 1283618026,\r\n  \"referenceNumber\": \"Test run\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/order/block-sim",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"order",
										"block-sim"
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "a02f8ed6-5d54-45b1-88b7-623c4c491678",
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"contractId\": 1283618026,\r\n  \"referenceNumber\": \"Test run\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/order/block-sim",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"order",
										"block-sim"
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "53d13318-9daa-444e-b3d0-ff559b5eb957",
							"name": "Server Error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"contractId\": 1283618026,\r\n  \"referenceNumber\": \"Test run\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/order/block-sim",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"order",
										"block-sim"
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "c3abb606-0bc1-4b31-80d1-6591d4ce3df2",
							"name": "Service Unavailable",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"contractId\": 1283618026,\r\n  \"referenceNumber\": \"Test run\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/order/block-sim",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"order",
										"block-sim"
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "4- Get service requests details",
					"id": "7fa5f382-e1cc-4f77-abb1-adacaad642f8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/track-and-trace/service-requests/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"track-and-trace",
								"service-requests",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "49579378",
									"description": "Service request ID"
								}
							]
						},
						"description": "The possible keys of `attributes` map in response object:<div style='max-height: 400px; overflow: auto; width: 100%'>\n<dl>\n<dt><b>Attribute name</b></dt><dd><b>Meaning</b></dd>\n<dt>login</dt><dd>Login</dd>\n<dt>roles</dt><dd>Roles</dd>\n<dt>firstName</dt><dd>First name</dd>\n<dt>lastName</dt><dd>Last name</dd>\n<dt>surnamePrefix</dt><dd>Surname prefix</dd>\n<dt>email</dt><dd>E-mail</dd>\n<dt>dateOfBirth</dt><dd>Date of birth</dd>\n<dt>vip</dt><dd>VIP</dd>\n<dt>employeeNumber</dt><dd>Employee number</dd>\n<dt>gender</dt><dd>Gender</dd>\n<dt>salutation</dt><dd>Salutation</dd>\n<dt>preferredLanguage</dt><dd>Preferred language</dd>\n<dt>comments</dt><dd>Comments</dd>\n<dt>accesspointNameMSISDN</dt><dd>Mobile number</dd>\n<dt>accesspointNameSIM</dt><dd>SIM card number</dd>\n<dt>accesspointNameIMSI</dt><dd>IMSI</dd>\n<dt>IMEI</dt><dd>IMEI</dd>\n<dt>Hanset_IMEI_number</dt><dd>IMEI</dd>\n<dt>accesspointNameFixedNumber</dt><dd>Fixed Number</dd>\n<dt>activeTo</dt><dd>Active to</dd>\n<dt>contractName</dt><dd>Subscription or device name</dd>\n<dt>totalOnetimePrice</dt><dd>One time price</dd>\n<dt>totalRecurrentPrice</dt><dd>Recurring price</dd>\n<dt>deferredPrice</dt><dd>Deferred price</dd>\n<dt>newUiccId</dt><dd>New SIM card number</dd>\n<dt>movedGroupName</dt><dd>Moved account</dd>\n<dt>subscriberAccountId</dt><dd>Old location</dd>\n<dt>destinationAccount</dt><dd>New location</dd>\n<dt>selectedDuoUiccid</dt><dd>Selected Duo SIM card number</dd>\n<dt>projectId</dt><dd>Project ID</dd>\n<dt>new_fixed_number</dt><dd>New fixed number</dd>\n<dt>new_desk_number</dt><dd>New extension</dd>\n<dt>oldUserGroupName</dt><dd>Previous user group</dd>\n<dt>newUserGroupName</dt><dd>New user group</dd>\n<dt>vpnName</dt><dd>VPN name</dd>\n<dt>deskNumber</dt><dd>Extension</dd>\n<dt>accesspointNameDeskNumber</dt><dd>Extension</dd>\n<dt>mobileAddress</dt><dd>Mobile number</dd>\n<dt>enterpriseName</dt><dd>Enterprise name</dd>\n<dt>enterpriseID</dt><dd>Enterprise ID</dd>\n<dt>mobilityGroupName</dt><dd>Fixed-Mobile PBX name</dd>\n<dt>userGroupName</dt><dd>User group</dd>\n<dt>enterpriseUserGroup</dt><dd>User group</dd>\n<dt>initialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>sipAccountName</dt><dd>SIP account name</dd>\n<dt>accessInstanceAttributeinitialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>accesspointNameQueuePhoneNumber</dt><dd>Queue phone number</dd>\n<dt>accesspointNameSipAccountName</dt><dd>SIP account name</dd>\n<dt>subscriptionAmount</dt><dd>New subscription amount</dd>\n<dt>contract_contact_name</dt><dd>Contract contact person (name)</dd>\n<dt>contract_contact_phone</dt><dd>Contract contact person (phone)</dd>\n<dt>contract_contact_mail</dt><dd>Contract contact person (mail)</dd>\n<dt>financial_contact_name</dt><dd>Financial contact person (name)</dd>\n<dt>financial_contact_phone</dt><dd>Financial contact person (phone)</dd>\n<dt>financial_contact_mail</dt><dd>Financial contact person (mail)</dd>\n<dt>technical_contact_name</dt><dd>Technical contact Person (name)</dd>\n<dt>technical_contact_phone</dt><dd>Technical contact Person (phone)</dd>\n<dt>technical_contact_mail</dt><dd>Technical contact Person (mail)</dd>\n<dt>deviceOption</dt><dd>Device option</dd>\n<dt>deviceType_label</dt><dd>Device type</dd>\n<dt>macAddress</dt><dd>Mac address</dd>\n<dt>deviceName</dt><dd>Device name</dd>\n<dt>sacGroupAccountId_label</dt><dd>Location account</dd>\n<dt>groupId</dt><dd>Location</dd>\n<dt>vGroupMovingToID</dt><dd>New location</dd>\n<dt>pbxName</dt><dd>PBX</dd>\n<dt>groupCitemId_label</dt><dd>Group</dd>\n<dt>Fixed</dt><dd>Alternate fixed number</dd>\n<dt>DeskNumber</dt><dd>Alternate extension</dd>\n<dt>billing_retention_period</dt><dd>Financial data retention period (months)</dd>\n<dt>managedGroupName</dt><dd>Authorized for</dd>\n<dt>subscriptionType</dt><dd>Subscription type</dd>\n<dt>CurrentNetworkOperator</dt><dd>Current network operator</dd>\n<dt>CurrentServiceProvider</dt><dd>Current service provider</dd>\n<dt>Customer_name_at_current_provider</dt><dd>Customer name at current provider</dd>\n<dt>Current_contract_number</dt><dd>Customer number at current provider</dd>\n<dt>UIccId</dt><dd>Current SIM card number</dd>\n<dt>Initials</dt><dd>Initials</dd>\n<dt>FamilyNamePrefix</dt><dd>Family name prefix</dd>\n<dt>FamilyName</dt><dd>Family name</dd>\n<dt>delivery_TT_id</dt><dd>Delivery Track&trace ID</dd>\n<dt>IsAppleDEP</dt><dd>Apple DEP</dd>\n<dt>IsSamsungKNOX</dt><dd>Samsung KNOX</dd>\n<dt>keepCurrentSim</dt><dd>Keep existing SIM card</dd>\n<dt>Note</dt><dd>Note</dd>\n<dt>Porting_wish_date</dt><dd>Preferred transition date</dd>\n<dt>returnReason</dt><dd>Reason for return</dd>\n<dt>returnRemarks</dt><dd>Remarks</dd>\n<dt>companyName</dt><dd>Company name</dd>\n<dt>companyNamePronounciation</dt><dd>Comapny name pronounciation</dd>\n<dt>businessVoiceMailMessageText</dt><dd>Chosen business voicemail message</dd>\n</dl>\n<div>\n<style type=\"text/css\">  dl {\n    display: flex;\n    flex-flow: row wrap;\n  }\n  dt {\n    flex-basis: 20%;\n    text-align: right;\n  }\n  dd {\n    flex-basis: 70%;\n    flex-grow: 1;\n  }\n</style>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_orders_track_and_trace</li><li>privileges_orders_authorization</li></ul>"
					},
					"response": [
						{
							"id": "7e754320-b5ab-414c-a5c8-9743668abd4e",
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/track-and-trace/service-requests/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"track-and-trace",
										"service-requests",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "49579378",
											"description": "Service request ID"
										}
									]
								},
								"description": "The possible keys of `attributes` map in response object:<div style='max-height: 400px; overflow: auto; width: 100%'>\n<dl>\n<dt><b>Attribute name</b></dt><dd><b>Meaning</b></dd>\n<dt>login</dt><dd>Login</dd>\n<dt>roles</dt><dd>Roles</dd>\n<dt>firstName</dt><dd>First name</dd>\n<dt>lastName</dt><dd>Last name</dd>\n<dt>surnamePrefix</dt><dd>Surname prefix</dd>\n<dt>email</dt><dd>E-mail</dd>\n<dt>dateOfBirth</dt><dd>Date of birth</dd>\n<dt>vip</dt><dd>VIP</dd>\n<dt>employeeNumber</dt><dd>Employee number</dd>\n<dt>gender</dt><dd>Gender</dd>\n<dt>salutation</dt><dd>Salutation</dd>\n<dt>preferredLanguage</dt><dd>Preferred language</dd>\n<dt>comments</dt><dd>Comments</dd>\n<dt>accesspointNameMSISDN</dt><dd>Mobile number</dd>\n<dt>accesspointNameSIM</dt><dd>SIM card number</dd>\n<dt>accesspointNameIMSI</dt><dd>IMSI</dd>\n<dt>IMEI</dt><dd>IMEI</dd>\n<dt>Hanset_IMEI_number</dt><dd>IMEI</dd>\n<dt>accesspointNameFixedNumber</dt><dd>Fixed Number</dd>\n<dt>activeTo</dt><dd>Active to</dd>\n<dt>contractName</dt><dd>Subscription or device name</dd>\n<dt>totalOnetimePrice</dt><dd>One time price</dd>\n<dt>totalRecurrentPrice</dt><dd>Recurring price</dd>\n<dt>deferredPrice</dt><dd>Deferred price</dd>\n<dt>newUiccId</dt><dd>New SIM card number</dd>\n<dt>movedGroupName</dt><dd>Moved account</dd>\n<dt>subscriberAccountId</dt><dd>Old location</dd>\n<dt>destinationAccount</dt><dd>New location</dd>\n<dt>selectedDuoUiccid</dt><dd>Selected Duo SIM card number</dd>\n<dt>projectId</dt><dd>Project ID</dd>\n<dt>new_fixed_number</dt><dd>New fixed number</dd>\n<dt>new_desk_number</dt><dd>New extension</dd>\n<dt>oldUserGroupName</dt><dd>Previous user group</dd>\n<dt>newUserGroupName</dt><dd>New user group</dd>\n<dt>vpnName</dt><dd>VPN name</dd>\n<dt>deskNumber</dt><dd>Extension</dd>\n<dt>accesspointNameDeskNumber</dt><dd>Extension</dd>\n<dt>mobileAddress</dt><dd>Mobile number</dd>\n<dt>enterpriseName</dt><dd>Enterprise name</dd>\n<dt>enterpriseID</dt><dd>Enterprise ID</dd>\n<dt>mobilityGroupName</dt><dd>Fixed-Mobile PBX name</dd>\n<dt>userGroupName</dt><dd>User group</dd>\n<dt>enterpriseUserGroup</dt><dd>User group</dd>\n<dt>initialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>sipAccountName</dt><dd>SIP account name</dd>\n<dt>accessInstanceAttributeinitialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>accesspointNameQueuePhoneNumber</dt><dd>Queue phone number</dd>\n<dt>accesspointNameSipAccountName</dt><dd>SIP account name</dd>\n<dt>subscriptionAmount</dt><dd>New subscription amount</dd>\n<dt>contract_contact_name</dt><dd>Contract contact person (name)</dd>\n<dt>contract_contact_phone</dt><dd>Contract contact person (phone)</dd>\n<dt>contract_contact_mail</dt><dd>Contract contact person (mail)</dd>\n<dt>financial_contact_name</dt><dd>Financial contact person (name)</dd>\n<dt>financial_contact_phone</dt><dd>Financial contact person (phone)</dd>\n<dt>financial_contact_mail</dt><dd>Financial contact person (mail)</dd>\n<dt>technical_contact_name</dt><dd>Technical contact Person (name)</dd>\n<dt>technical_contact_phone</dt><dd>Technical contact Person (phone)</dd>\n<dt>technical_contact_mail</dt><dd>Technical contact Person (mail)</dd>\n<dt>deviceOption</dt><dd>Device option</dd>\n<dt>deviceType_label</dt><dd>Device type</dd>\n<dt>macAddress</dt><dd>Mac address</dd>\n<dt>deviceName</dt><dd>Device name</dd>\n<dt>sacGroupAccountId_label</dt><dd>Location account</dd>\n<dt>groupId</dt><dd>Location</dd>\n<dt>vGroupMovingToID</dt><dd>New location</dd>\n<dt>pbxName</dt><dd>PBX</dd>\n<dt>groupCitemId_label</dt><dd>Group</dd>\n<dt>Fixed</dt><dd>Alternate fixed number</dd>\n<dt>DeskNumber</dt><dd>Alternate extension</dd>\n<dt>billing_retention_period</dt><dd>Financial data retention period (months)</dd>\n<dt>managedGroupName</dt><dd>Authorized for</dd>\n<dt>subscriptionType</dt><dd>Subscription type</dd>\n<dt>CurrentNetworkOperator</dt><dd>Current network operator</dd>\n<dt>CurrentServiceProvider</dt><dd>Current service provider</dd>\n<dt>Customer_name_at_current_provider</dt><dd>Customer name at current provider</dd>\n<dt>Current_contract_number</dt><dd>Customer number at current provider</dd>\n<dt>UIccId</dt><dd>Current SIM card number</dd>\n<dt>Initials</dt><dd>Initials</dd>\n<dt>FamilyNamePrefix</dt><dd>Family name prefix</dd>\n<dt>FamilyName</dt><dd>Family name</dd>\n<dt>delivery_TT_id</dt><dd>Delivery Track&trace ID</dd>\n<dt>IsAppleDEP</dt><dd>Apple DEP</dd>\n<dt>IsSamsungKNOX</dt><dd>Samsung KNOX</dd>\n<dt>keepCurrentSim</dt><dd>Keep existing SIM card</dd>\n<dt>Note</dt><dd>Note</dd>\n<dt>Porting_wish_date</dt><dd>Preferred transition date</dd>\n<dt>returnReason</dt><dd>Reason for return</dd>\n<dt>returnRemarks</dt><dd>Remarks</dd>\n<dt>companyName</dt><dd>Company name</dd>\n<dt>companyNamePronounciation</dt><dd>Comapny name pronounciation</dd>\n<dt>businessVoiceMailMessageText</dt><dd>Chosen business voicemail message</dd>\n</dl>\n<div>\n<style type=\"text/css\">  dl {\n    display: flex;\n    flex-flow: row wrap;\n  }\n  dt {\n    flex-basis: 20%;\n    text-align: right;\n  }\n  dd {\n    flex-basis: 70%;\n    flex-grow: 1;\n  }\n</style>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_orders_track_and_trace</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "c146d651-588d-487f-8909-14654d8da74d",
							"name": "Bad Request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/track-and-trace/service-requests/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"track-and-trace",
										"service-requests",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "49579378",
											"description": "Service request ID"
										}
									]
								},
								"description": "The possible keys of `attributes` map in response object:<div style='max-height: 400px; overflow: auto; width: 100%'>\n<dl>\n<dt><b>Attribute name</b></dt><dd><b>Meaning</b></dd>\n<dt>login</dt><dd>Login</dd>\n<dt>roles</dt><dd>Roles</dd>\n<dt>firstName</dt><dd>First name</dd>\n<dt>lastName</dt><dd>Last name</dd>\n<dt>surnamePrefix</dt><dd>Surname prefix</dd>\n<dt>email</dt><dd>E-mail</dd>\n<dt>dateOfBirth</dt><dd>Date of birth</dd>\n<dt>vip</dt><dd>VIP</dd>\n<dt>employeeNumber</dt><dd>Employee number</dd>\n<dt>gender</dt><dd>Gender</dd>\n<dt>salutation</dt><dd>Salutation</dd>\n<dt>preferredLanguage</dt><dd>Preferred language</dd>\n<dt>comments</dt><dd>Comments</dd>\n<dt>accesspointNameMSISDN</dt><dd>Mobile number</dd>\n<dt>accesspointNameSIM</dt><dd>SIM card number</dd>\n<dt>accesspointNameIMSI</dt><dd>IMSI</dd>\n<dt>IMEI</dt><dd>IMEI</dd>\n<dt>Hanset_IMEI_number</dt><dd>IMEI</dd>\n<dt>accesspointNameFixedNumber</dt><dd>Fixed Number</dd>\n<dt>activeTo</dt><dd>Active to</dd>\n<dt>contractName</dt><dd>Subscription or device name</dd>\n<dt>totalOnetimePrice</dt><dd>One time price</dd>\n<dt>totalRecurrentPrice</dt><dd>Recurring price</dd>\n<dt>deferredPrice</dt><dd>Deferred price</dd>\n<dt>newUiccId</dt><dd>New SIM card number</dd>\n<dt>movedGroupName</dt><dd>Moved account</dd>\n<dt>subscriberAccountId</dt><dd>Old location</dd>\n<dt>destinationAccount</dt><dd>New location</dd>\n<dt>selectedDuoUiccid</dt><dd>Selected Duo SIM card number</dd>\n<dt>projectId</dt><dd>Project ID</dd>\n<dt>new_fixed_number</dt><dd>New fixed number</dd>\n<dt>new_desk_number</dt><dd>New extension</dd>\n<dt>oldUserGroupName</dt><dd>Previous user group</dd>\n<dt>newUserGroupName</dt><dd>New user group</dd>\n<dt>vpnName</dt><dd>VPN name</dd>\n<dt>deskNumber</dt><dd>Extension</dd>\n<dt>accesspointNameDeskNumber</dt><dd>Extension</dd>\n<dt>mobileAddress</dt><dd>Mobile number</dd>\n<dt>enterpriseName</dt><dd>Enterprise name</dd>\n<dt>enterpriseID</dt><dd>Enterprise ID</dd>\n<dt>mobilityGroupName</dt><dd>Fixed-Mobile PBX name</dd>\n<dt>userGroupName</dt><dd>User group</dd>\n<dt>enterpriseUserGroup</dt><dd>User group</dd>\n<dt>initialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>sipAccountName</dt><dd>SIP account name</dd>\n<dt>accessInstanceAttributeinitialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>accesspointNameQueuePhoneNumber</dt><dd>Queue phone number</dd>\n<dt>accesspointNameSipAccountName</dt><dd>SIP account name</dd>\n<dt>subscriptionAmount</dt><dd>New subscription amount</dd>\n<dt>contract_contact_name</dt><dd>Contract contact person (name)</dd>\n<dt>contract_contact_phone</dt><dd>Contract contact person (phone)</dd>\n<dt>contract_contact_mail</dt><dd>Contract contact person (mail)</dd>\n<dt>financial_contact_name</dt><dd>Financial contact person (name)</dd>\n<dt>financial_contact_phone</dt><dd>Financial contact person (phone)</dd>\n<dt>financial_contact_mail</dt><dd>Financial contact person (mail)</dd>\n<dt>technical_contact_name</dt><dd>Technical contact Person (name)</dd>\n<dt>technical_contact_phone</dt><dd>Technical contact Person (phone)</dd>\n<dt>technical_contact_mail</dt><dd>Technical contact Person (mail)</dd>\n<dt>deviceOption</dt><dd>Device option</dd>\n<dt>deviceType_label</dt><dd>Device type</dd>\n<dt>macAddress</dt><dd>Mac address</dd>\n<dt>deviceName</dt><dd>Device name</dd>\n<dt>sacGroupAccountId_label</dt><dd>Location account</dd>\n<dt>groupId</dt><dd>Location</dd>\n<dt>vGroupMovingToID</dt><dd>New location</dd>\n<dt>pbxName</dt><dd>PBX</dd>\n<dt>groupCitemId_label</dt><dd>Group</dd>\n<dt>Fixed</dt><dd>Alternate fixed number</dd>\n<dt>DeskNumber</dt><dd>Alternate extension</dd>\n<dt>billing_retention_period</dt><dd>Financial data retention period (months)</dd>\n<dt>managedGroupName</dt><dd>Authorized for</dd>\n<dt>subscriptionType</dt><dd>Subscription type</dd>\n<dt>CurrentNetworkOperator</dt><dd>Current network operator</dd>\n<dt>CurrentServiceProvider</dt><dd>Current service provider</dd>\n<dt>Customer_name_at_current_provider</dt><dd>Customer name at current provider</dd>\n<dt>Current_contract_number</dt><dd>Customer number at current provider</dd>\n<dt>UIccId</dt><dd>Current SIM card number</dd>\n<dt>Initials</dt><dd>Initials</dd>\n<dt>FamilyNamePrefix</dt><dd>Family name prefix</dd>\n<dt>FamilyName</dt><dd>Family name</dd>\n<dt>delivery_TT_id</dt><dd>Delivery Track&trace ID</dd>\n<dt>IsAppleDEP</dt><dd>Apple DEP</dd>\n<dt>IsSamsungKNOX</dt><dd>Samsung KNOX</dd>\n<dt>keepCurrentSim</dt><dd>Keep existing SIM card</dd>\n<dt>Note</dt><dd>Note</dd>\n<dt>Porting_wish_date</dt><dd>Preferred transition date</dd>\n<dt>returnReason</dt><dd>Reason for return</dd>\n<dt>returnRemarks</dt><dd>Remarks</dd>\n<dt>companyName</dt><dd>Company name</dd>\n<dt>companyNamePronounciation</dt><dd>Comapny name pronounciation</dd>\n<dt>businessVoiceMailMessageText</dt><dd>Chosen business voicemail message</dd>\n</dl>\n<div>\n<style type=\"text/css\">  dl {\n    display: flex;\n    flex-flow: row wrap;\n  }\n  dt {\n    flex-basis: 20%;\n    text-align: right;\n  }\n  dd {\n    flex-basis: 70%;\n    flex-grow: 1;\n  }\n</style>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_orders_track_and_trace</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "466c0b5b-8e2e-4e31-8b13-f8bc735619ce",
							"name": "Unauthorized",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/track-and-trace/service-requests/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"track-and-trace",
										"service-requests",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "49579378",
											"description": "Service request ID"
										}
									]
								},
								"description": "The possible keys of `attributes` map in response object:<div style='max-height: 400px; overflow: auto; width: 100%'>\n<dl>\n<dt><b>Attribute name</b></dt><dd><b>Meaning</b></dd>\n<dt>login</dt><dd>Login</dd>\n<dt>roles</dt><dd>Roles</dd>\n<dt>firstName</dt><dd>First name</dd>\n<dt>lastName</dt><dd>Last name</dd>\n<dt>surnamePrefix</dt><dd>Surname prefix</dd>\n<dt>email</dt><dd>E-mail</dd>\n<dt>dateOfBirth</dt><dd>Date of birth</dd>\n<dt>vip</dt><dd>VIP</dd>\n<dt>employeeNumber</dt><dd>Employee number</dd>\n<dt>gender</dt><dd>Gender</dd>\n<dt>salutation</dt><dd>Salutation</dd>\n<dt>preferredLanguage</dt><dd>Preferred language</dd>\n<dt>comments</dt><dd>Comments</dd>\n<dt>accesspointNameMSISDN</dt><dd>Mobile number</dd>\n<dt>accesspointNameSIM</dt><dd>SIM card number</dd>\n<dt>accesspointNameIMSI</dt><dd>IMSI</dd>\n<dt>IMEI</dt><dd>IMEI</dd>\n<dt>Hanset_IMEI_number</dt><dd>IMEI</dd>\n<dt>accesspointNameFixedNumber</dt><dd>Fixed Number</dd>\n<dt>activeTo</dt><dd>Active to</dd>\n<dt>contractName</dt><dd>Subscription or device name</dd>\n<dt>totalOnetimePrice</dt><dd>One time price</dd>\n<dt>totalRecurrentPrice</dt><dd>Recurring price</dd>\n<dt>deferredPrice</dt><dd>Deferred price</dd>\n<dt>newUiccId</dt><dd>New SIM card number</dd>\n<dt>movedGroupName</dt><dd>Moved account</dd>\n<dt>subscriberAccountId</dt><dd>Old location</dd>\n<dt>destinationAccount</dt><dd>New location</dd>\n<dt>selectedDuoUiccid</dt><dd>Selected Duo SIM card number</dd>\n<dt>projectId</dt><dd>Project ID</dd>\n<dt>new_fixed_number</dt><dd>New fixed number</dd>\n<dt>new_desk_number</dt><dd>New extension</dd>\n<dt>oldUserGroupName</dt><dd>Previous user group</dd>\n<dt>newUserGroupName</dt><dd>New user group</dd>\n<dt>vpnName</dt><dd>VPN name</dd>\n<dt>deskNumber</dt><dd>Extension</dd>\n<dt>accesspointNameDeskNumber</dt><dd>Extension</dd>\n<dt>mobileAddress</dt><dd>Mobile number</dd>\n<dt>enterpriseName</dt><dd>Enterprise name</dd>\n<dt>enterpriseID</dt><dd>Enterprise ID</dd>\n<dt>mobilityGroupName</dt><dd>Fixed-Mobile PBX name</dd>\n<dt>userGroupName</dt><dd>User group</dd>\n<dt>enterpriseUserGroup</dt><dd>User group</dd>\n<dt>initialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>sipAccountName</dt><dd>SIP account name</dd>\n<dt>accessInstanceAttributeinitialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>accesspointNameQueuePhoneNumber</dt><dd>Queue phone number</dd>\n<dt>accesspointNameSipAccountName</dt><dd>SIP account name</dd>\n<dt>subscriptionAmount</dt><dd>New subscription amount</dd>\n<dt>contract_contact_name</dt><dd>Contract contact person (name)</dd>\n<dt>contract_contact_phone</dt><dd>Contract contact person (phone)</dd>\n<dt>contract_contact_mail</dt><dd>Contract contact person (mail)</dd>\n<dt>financial_contact_name</dt><dd>Financial contact person (name)</dd>\n<dt>financial_contact_phone</dt><dd>Financial contact person (phone)</dd>\n<dt>financial_contact_mail</dt><dd>Financial contact person (mail)</dd>\n<dt>technical_contact_name</dt><dd>Technical contact Person (name)</dd>\n<dt>technical_contact_phone</dt><dd>Technical contact Person (phone)</dd>\n<dt>technical_contact_mail</dt><dd>Technical contact Person (mail)</dd>\n<dt>deviceOption</dt><dd>Device option</dd>\n<dt>deviceType_label</dt><dd>Device type</dd>\n<dt>macAddress</dt><dd>Mac address</dd>\n<dt>deviceName</dt><dd>Device name</dd>\n<dt>sacGroupAccountId_label</dt><dd>Location account</dd>\n<dt>groupId</dt><dd>Location</dd>\n<dt>vGroupMovingToID</dt><dd>New location</dd>\n<dt>pbxName</dt><dd>PBX</dd>\n<dt>groupCitemId_label</dt><dd>Group</dd>\n<dt>Fixed</dt><dd>Alternate fixed number</dd>\n<dt>DeskNumber</dt><dd>Alternate extension</dd>\n<dt>billing_retention_period</dt><dd>Financial data retention period (months)</dd>\n<dt>managedGroupName</dt><dd>Authorized for</dd>\n<dt>subscriptionType</dt><dd>Subscription type</dd>\n<dt>CurrentNetworkOperator</dt><dd>Current network operator</dd>\n<dt>CurrentServiceProvider</dt><dd>Current service provider</dd>\n<dt>Customer_name_at_current_provider</dt><dd>Customer name at current provider</dd>\n<dt>Current_contract_number</dt><dd>Customer number at current provider</dd>\n<dt>UIccId</dt><dd>Current SIM card number</dd>\n<dt>Initials</dt><dd>Initials</dd>\n<dt>FamilyNamePrefix</dt><dd>Family name prefix</dd>\n<dt>FamilyName</dt><dd>Family name</dd>\n<dt>delivery_TT_id</dt><dd>Delivery Track&trace ID</dd>\n<dt>IsAppleDEP</dt><dd>Apple DEP</dd>\n<dt>IsSamsungKNOX</dt><dd>Samsung KNOX</dd>\n<dt>keepCurrentSim</dt><dd>Keep existing SIM card</dd>\n<dt>Note</dt><dd>Note</dd>\n<dt>Porting_wish_date</dt><dd>Preferred transition date</dd>\n<dt>returnReason</dt><dd>Reason for return</dd>\n<dt>returnRemarks</dt><dd>Remarks</dd>\n<dt>companyName</dt><dd>Company name</dd>\n<dt>companyNamePronounciation</dt><dd>Comapny name pronounciation</dd>\n<dt>businessVoiceMailMessageText</dt><dd>Chosen business voicemail message</dd>\n</dl>\n<div>\n<style type=\"text/css\">  dl {\n    display: flex;\n    flex-flow: row wrap;\n  }\n  dt {\n    flex-basis: 20%;\n    text-align: right;\n  }\n  dd {\n    flex-basis: 70%;\n    flex-grow: 1;\n  }\n</style>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_orders_track_and_trace</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "8d0b0938-003a-4097-b569-e8facfe856b1",
							"name": "Forbidden",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/track-and-trace/service-requests/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"track-and-trace",
										"service-requests",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "49579378",
											"description": "Service request ID"
										}
									]
								},
								"description": "The possible keys of `attributes` map in response object:<div style='max-height: 400px; overflow: auto; width: 100%'>\n<dl>\n<dt><b>Attribute name</b></dt><dd><b>Meaning</b></dd>\n<dt>login</dt><dd>Login</dd>\n<dt>roles</dt><dd>Roles</dd>\n<dt>firstName</dt><dd>First name</dd>\n<dt>lastName</dt><dd>Last name</dd>\n<dt>surnamePrefix</dt><dd>Surname prefix</dd>\n<dt>email</dt><dd>E-mail</dd>\n<dt>dateOfBirth</dt><dd>Date of birth</dd>\n<dt>vip</dt><dd>VIP</dd>\n<dt>employeeNumber</dt><dd>Employee number</dd>\n<dt>gender</dt><dd>Gender</dd>\n<dt>salutation</dt><dd>Salutation</dd>\n<dt>preferredLanguage</dt><dd>Preferred language</dd>\n<dt>comments</dt><dd>Comments</dd>\n<dt>accesspointNameMSISDN</dt><dd>Mobile number</dd>\n<dt>accesspointNameSIM</dt><dd>SIM card number</dd>\n<dt>accesspointNameIMSI</dt><dd>IMSI</dd>\n<dt>IMEI</dt><dd>IMEI</dd>\n<dt>Hanset_IMEI_number</dt><dd>IMEI</dd>\n<dt>accesspointNameFixedNumber</dt><dd>Fixed Number</dd>\n<dt>activeTo</dt><dd>Active to</dd>\n<dt>contractName</dt><dd>Subscription or device name</dd>\n<dt>totalOnetimePrice</dt><dd>One time price</dd>\n<dt>totalRecurrentPrice</dt><dd>Recurring price</dd>\n<dt>deferredPrice</dt><dd>Deferred price</dd>\n<dt>newUiccId</dt><dd>New SIM card number</dd>\n<dt>movedGroupName</dt><dd>Moved account</dd>\n<dt>subscriberAccountId</dt><dd>Old location</dd>\n<dt>destinationAccount</dt><dd>New location</dd>\n<dt>selectedDuoUiccid</dt><dd>Selected Duo SIM card number</dd>\n<dt>projectId</dt><dd>Project ID</dd>\n<dt>new_fixed_number</dt><dd>New fixed number</dd>\n<dt>new_desk_number</dt><dd>New extension</dd>\n<dt>oldUserGroupName</dt><dd>Previous user group</dd>\n<dt>newUserGroupName</dt><dd>New user group</dd>\n<dt>vpnName</dt><dd>VPN name</dd>\n<dt>deskNumber</dt><dd>Extension</dd>\n<dt>accesspointNameDeskNumber</dt><dd>Extension</dd>\n<dt>mobileAddress</dt><dd>Mobile number</dd>\n<dt>enterpriseName</dt><dd>Enterprise name</dd>\n<dt>enterpriseID</dt><dd>Enterprise ID</dd>\n<dt>mobilityGroupName</dt><dd>Fixed-Mobile PBX name</dd>\n<dt>userGroupName</dt><dd>User group</dd>\n<dt>enterpriseUserGroup</dt><dd>User group</dd>\n<dt>initialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>sipAccountName</dt><dd>SIP account name</dd>\n<dt>accessInstanceAttributeinitialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>accesspointNameQueuePhoneNumber</dt><dd>Queue phone number</dd>\n<dt>accesspointNameSipAccountName</dt><dd>SIP account name</dd>\n<dt>subscriptionAmount</dt><dd>New subscription amount</dd>\n<dt>contract_contact_name</dt><dd>Contract contact person (name)</dd>\n<dt>contract_contact_phone</dt><dd>Contract contact person (phone)</dd>\n<dt>contract_contact_mail</dt><dd>Contract contact person (mail)</dd>\n<dt>financial_contact_name</dt><dd>Financial contact person (name)</dd>\n<dt>financial_contact_phone</dt><dd>Financial contact person (phone)</dd>\n<dt>financial_contact_mail</dt><dd>Financial contact person (mail)</dd>\n<dt>technical_contact_name</dt><dd>Technical contact Person (name)</dd>\n<dt>technical_contact_phone</dt><dd>Technical contact Person (phone)</dd>\n<dt>technical_contact_mail</dt><dd>Technical contact Person (mail)</dd>\n<dt>deviceOption</dt><dd>Device option</dd>\n<dt>deviceType_label</dt><dd>Device type</dd>\n<dt>macAddress</dt><dd>Mac address</dd>\n<dt>deviceName</dt><dd>Device name</dd>\n<dt>sacGroupAccountId_label</dt><dd>Location account</dd>\n<dt>groupId</dt><dd>Location</dd>\n<dt>vGroupMovingToID</dt><dd>New location</dd>\n<dt>pbxName</dt><dd>PBX</dd>\n<dt>groupCitemId_label</dt><dd>Group</dd>\n<dt>Fixed</dt><dd>Alternate fixed number</dd>\n<dt>DeskNumber</dt><dd>Alternate extension</dd>\n<dt>billing_retention_period</dt><dd>Financial data retention period (months)</dd>\n<dt>managedGroupName</dt><dd>Authorized for</dd>\n<dt>subscriptionType</dt><dd>Subscription type</dd>\n<dt>CurrentNetworkOperator</dt><dd>Current network operator</dd>\n<dt>CurrentServiceProvider</dt><dd>Current service provider</dd>\n<dt>Customer_name_at_current_provider</dt><dd>Customer name at current provider</dd>\n<dt>Current_contract_number</dt><dd>Customer number at current provider</dd>\n<dt>UIccId</dt><dd>Current SIM card number</dd>\n<dt>Initials</dt><dd>Initials</dd>\n<dt>FamilyNamePrefix</dt><dd>Family name prefix</dd>\n<dt>FamilyName</dt><dd>Family name</dd>\n<dt>delivery_TT_id</dt><dd>Delivery Track&trace ID</dd>\n<dt>IsAppleDEP</dt><dd>Apple DEP</dd>\n<dt>IsSamsungKNOX</dt><dd>Samsung KNOX</dd>\n<dt>keepCurrentSim</dt><dd>Keep existing SIM card</dd>\n<dt>Note</dt><dd>Note</dd>\n<dt>Porting_wish_date</dt><dd>Preferred transition date</dd>\n<dt>returnReason</dt><dd>Reason for return</dd>\n<dt>returnRemarks</dt><dd>Remarks</dd>\n<dt>companyName</dt><dd>Company name</dd>\n<dt>companyNamePronounciation</dt><dd>Comapny name pronounciation</dd>\n<dt>businessVoiceMailMessageText</dt><dd>Chosen business voicemail message</dd>\n</dl>\n<div>\n<style type=\"text/css\">  dl {\n    display: flex;\n    flex-flow: row wrap;\n  }\n  dt {\n    flex-basis: 20%;\n    text-align: right;\n  }\n  dd {\n    flex-basis: 70%;\n    flex-grow: 1;\n  }\n</style>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_orders_track_and_trace</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "15ede257-c6c9-4ffb-91de-29bfea141548",
							"name": "Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/track-and-trace/service-requests/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"track-and-trace",
										"service-requests",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "49579378",
											"description": "Service request ID"
										}
									]
								},
								"description": "The possible keys of `attributes` map in response object:<div style='max-height: 400px; overflow: auto; width: 100%'>\n<dl>\n<dt><b>Attribute name</b></dt><dd><b>Meaning</b></dd>\n<dt>login</dt><dd>Login</dd>\n<dt>roles</dt><dd>Roles</dd>\n<dt>firstName</dt><dd>First name</dd>\n<dt>lastName</dt><dd>Last name</dd>\n<dt>surnamePrefix</dt><dd>Surname prefix</dd>\n<dt>email</dt><dd>E-mail</dd>\n<dt>dateOfBirth</dt><dd>Date of birth</dd>\n<dt>vip</dt><dd>VIP</dd>\n<dt>employeeNumber</dt><dd>Employee number</dd>\n<dt>gender</dt><dd>Gender</dd>\n<dt>salutation</dt><dd>Salutation</dd>\n<dt>preferredLanguage</dt><dd>Preferred language</dd>\n<dt>comments</dt><dd>Comments</dd>\n<dt>accesspointNameMSISDN</dt><dd>Mobile number</dd>\n<dt>accesspointNameSIM</dt><dd>SIM card number</dd>\n<dt>accesspointNameIMSI</dt><dd>IMSI</dd>\n<dt>IMEI</dt><dd>IMEI</dd>\n<dt>Hanset_IMEI_number</dt><dd>IMEI</dd>\n<dt>accesspointNameFixedNumber</dt><dd>Fixed Number</dd>\n<dt>activeTo</dt><dd>Active to</dd>\n<dt>contractName</dt><dd>Subscription or device name</dd>\n<dt>totalOnetimePrice</dt><dd>One time price</dd>\n<dt>totalRecurrentPrice</dt><dd>Recurring price</dd>\n<dt>deferredPrice</dt><dd>Deferred price</dd>\n<dt>newUiccId</dt><dd>New SIM card number</dd>\n<dt>movedGroupName</dt><dd>Moved account</dd>\n<dt>subscriberAccountId</dt><dd>Old location</dd>\n<dt>destinationAccount</dt><dd>New location</dd>\n<dt>selectedDuoUiccid</dt><dd>Selected Duo SIM card number</dd>\n<dt>projectId</dt><dd>Project ID</dd>\n<dt>new_fixed_number</dt><dd>New fixed number</dd>\n<dt>new_desk_number</dt><dd>New extension</dd>\n<dt>oldUserGroupName</dt><dd>Previous user group</dd>\n<dt>newUserGroupName</dt><dd>New user group</dd>\n<dt>vpnName</dt><dd>VPN name</dd>\n<dt>deskNumber</dt><dd>Extension</dd>\n<dt>accesspointNameDeskNumber</dt><dd>Extension</dd>\n<dt>mobileAddress</dt><dd>Mobile number</dd>\n<dt>enterpriseName</dt><dd>Enterprise name</dd>\n<dt>enterpriseID</dt><dd>Enterprise ID</dd>\n<dt>mobilityGroupName</dt><dd>Fixed-Mobile PBX name</dd>\n<dt>userGroupName</dt><dd>User group</dd>\n<dt>enterpriseUserGroup</dt><dd>User group</dd>\n<dt>initialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>sipAccountName</dt><dd>SIP account name</dd>\n<dt>accessInstanceAttributeinitialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>accesspointNameQueuePhoneNumber</dt><dd>Queue phone number</dd>\n<dt>accesspointNameSipAccountName</dt><dd>SIP account name</dd>\n<dt>subscriptionAmount</dt><dd>New subscription amount</dd>\n<dt>contract_contact_name</dt><dd>Contract contact person (name)</dd>\n<dt>contract_contact_phone</dt><dd>Contract contact person (phone)</dd>\n<dt>contract_contact_mail</dt><dd>Contract contact person (mail)</dd>\n<dt>financial_contact_name</dt><dd>Financial contact person (name)</dd>\n<dt>financial_contact_phone</dt><dd>Financial contact person (phone)</dd>\n<dt>financial_contact_mail</dt><dd>Financial contact person (mail)</dd>\n<dt>technical_contact_name</dt><dd>Technical contact Person (name)</dd>\n<dt>technical_contact_phone</dt><dd>Technical contact Person (phone)</dd>\n<dt>technical_contact_mail</dt><dd>Technical contact Person (mail)</dd>\n<dt>deviceOption</dt><dd>Device option</dd>\n<dt>deviceType_label</dt><dd>Device type</dd>\n<dt>macAddress</dt><dd>Mac address</dd>\n<dt>deviceName</dt><dd>Device name</dd>\n<dt>sacGroupAccountId_label</dt><dd>Location account</dd>\n<dt>groupId</dt><dd>Location</dd>\n<dt>vGroupMovingToID</dt><dd>New location</dd>\n<dt>pbxName</dt><dd>PBX</dd>\n<dt>groupCitemId_label</dt><dd>Group</dd>\n<dt>Fixed</dt><dd>Alternate fixed number</dd>\n<dt>DeskNumber</dt><dd>Alternate extension</dd>\n<dt>billing_retention_period</dt><dd>Financial data retention period (months)</dd>\n<dt>managedGroupName</dt><dd>Authorized for</dd>\n<dt>subscriptionType</dt><dd>Subscription type</dd>\n<dt>CurrentNetworkOperator</dt><dd>Current network operator</dd>\n<dt>CurrentServiceProvider</dt><dd>Current service provider</dd>\n<dt>Customer_name_at_current_provider</dt><dd>Customer name at current provider</dd>\n<dt>Current_contract_number</dt><dd>Customer number at current provider</dd>\n<dt>UIccId</dt><dd>Current SIM card number</dd>\n<dt>Initials</dt><dd>Initials</dd>\n<dt>FamilyNamePrefix</dt><dd>Family name prefix</dd>\n<dt>FamilyName</dt><dd>Family name</dd>\n<dt>delivery_TT_id</dt><dd>Delivery Track&trace ID</dd>\n<dt>IsAppleDEP</dt><dd>Apple DEP</dd>\n<dt>IsSamsungKNOX</dt><dd>Samsung KNOX</dd>\n<dt>keepCurrentSim</dt><dd>Keep existing SIM card</dd>\n<dt>Note</dt><dd>Note</dd>\n<dt>Porting_wish_date</dt><dd>Preferred transition date</dd>\n<dt>returnReason</dt><dd>Reason for return</dd>\n<dt>returnRemarks</dt><dd>Remarks</dd>\n<dt>companyName</dt><dd>Company name</dd>\n<dt>companyNamePronounciation</dt><dd>Comapny name pronounciation</dd>\n<dt>businessVoiceMailMessageText</dt><dd>Chosen business voicemail message</dd>\n</dl>\n<div>\n<style type=\"text/css\">  dl {\n    display: flex;\n    flex-flow: row wrap;\n  }\n  dt {\n    flex-basis: 20%;\n    text-align: right;\n  }\n  dd {\n    flex-basis: 70%;\n    flex-grow: 1;\n  }\n</style>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_orders_track_and_trace</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "8434a3e3-ab94-42cd-9b9e-8554356be5b5",
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/track-and-trace/service-requests/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"track-and-trace",
										"service-requests",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "49579378",
											"description": "Service request ID"
										}
									]
								},
								"description": "The possible keys of `attributes` map in response object:<div style='max-height: 400px; overflow: auto; width: 100%'>\n<dl>\n<dt><b>Attribute name</b></dt><dd><b>Meaning</b></dd>\n<dt>login</dt><dd>Login</dd>\n<dt>roles</dt><dd>Roles</dd>\n<dt>firstName</dt><dd>First name</dd>\n<dt>lastName</dt><dd>Last name</dd>\n<dt>surnamePrefix</dt><dd>Surname prefix</dd>\n<dt>email</dt><dd>E-mail</dd>\n<dt>dateOfBirth</dt><dd>Date of birth</dd>\n<dt>vip</dt><dd>VIP</dd>\n<dt>employeeNumber</dt><dd>Employee number</dd>\n<dt>gender</dt><dd>Gender</dd>\n<dt>salutation</dt><dd>Salutation</dd>\n<dt>preferredLanguage</dt><dd>Preferred language</dd>\n<dt>comments</dt><dd>Comments</dd>\n<dt>accesspointNameMSISDN</dt><dd>Mobile number</dd>\n<dt>accesspointNameSIM</dt><dd>SIM card number</dd>\n<dt>accesspointNameIMSI</dt><dd>IMSI</dd>\n<dt>IMEI</dt><dd>IMEI</dd>\n<dt>Hanset_IMEI_number</dt><dd>IMEI</dd>\n<dt>accesspointNameFixedNumber</dt><dd>Fixed Number</dd>\n<dt>activeTo</dt><dd>Active to</dd>\n<dt>contractName</dt><dd>Subscription or device name</dd>\n<dt>totalOnetimePrice</dt><dd>One time price</dd>\n<dt>totalRecurrentPrice</dt><dd>Recurring price</dd>\n<dt>deferredPrice</dt><dd>Deferred price</dd>\n<dt>newUiccId</dt><dd>New SIM card number</dd>\n<dt>movedGroupName</dt><dd>Moved account</dd>\n<dt>subscriberAccountId</dt><dd>Old location</dd>\n<dt>destinationAccount</dt><dd>New location</dd>\n<dt>selectedDuoUiccid</dt><dd>Selected Duo SIM card number</dd>\n<dt>projectId</dt><dd>Project ID</dd>\n<dt>new_fixed_number</dt><dd>New fixed number</dd>\n<dt>new_desk_number</dt><dd>New extension</dd>\n<dt>oldUserGroupName</dt><dd>Previous user group</dd>\n<dt>newUserGroupName</dt><dd>New user group</dd>\n<dt>vpnName</dt><dd>VPN name</dd>\n<dt>deskNumber</dt><dd>Extension</dd>\n<dt>accesspointNameDeskNumber</dt><dd>Extension</dd>\n<dt>mobileAddress</dt><dd>Mobile number</dd>\n<dt>enterpriseName</dt><dd>Enterprise name</dd>\n<dt>enterpriseID</dt><dd>Enterprise ID</dd>\n<dt>mobilityGroupName</dt><dd>Fixed-Mobile PBX name</dd>\n<dt>userGroupName</dt><dd>User group</dd>\n<dt>enterpriseUserGroup</dt><dd>User group</dd>\n<dt>initialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>sipAccountName</dt><dd>SIP account name</dd>\n<dt>accessInstanceAttributeinitialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>accesspointNameQueuePhoneNumber</dt><dd>Queue phone number</dd>\n<dt>accesspointNameSipAccountName</dt><dd>SIP account name</dd>\n<dt>subscriptionAmount</dt><dd>New subscription amount</dd>\n<dt>contract_contact_name</dt><dd>Contract contact person (name)</dd>\n<dt>contract_contact_phone</dt><dd>Contract contact person (phone)</dd>\n<dt>contract_contact_mail</dt><dd>Contract contact person (mail)</dd>\n<dt>financial_contact_name</dt><dd>Financial contact person (name)</dd>\n<dt>financial_contact_phone</dt><dd>Financial contact person (phone)</dd>\n<dt>financial_contact_mail</dt><dd>Financial contact person (mail)</dd>\n<dt>technical_contact_name</dt><dd>Technical contact Person (name)</dd>\n<dt>technical_contact_phone</dt><dd>Technical contact Person (phone)</dd>\n<dt>technical_contact_mail</dt><dd>Technical contact Person (mail)</dd>\n<dt>deviceOption</dt><dd>Device option</dd>\n<dt>deviceType_label</dt><dd>Device type</dd>\n<dt>macAddress</dt><dd>Mac address</dd>\n<dt>deviceName</dt><dd>Device name</dd>\n<dt>sacGroupAccountId_label</dt><dd>Location account</dd>\n<dt>groupId</dt><dd>Location</dd>\n<dt>vGroupMovingToID</dt><dd>New location</dd>\n<dt>pbxName</dt><dd>PBX</dd>\n<dt>groupCitemId_label</dt><dd>Group</dd>\n<dt>Fixed</dt><dd>Alternate fixed number</dd>\n<dt>DeskNumber</dt><dd>Alternate extension</dd>\n<dt>billing_retention_period</dt><dd>Financial data retention period (months)</dd>\n<dt>managedGroupName</dt><dd>Authorized for</dd>\n<dt>subscriptionType</dt><dd>Subscription type</dd>\n<dt>CurrentNetworkOperator</dt><dd>Current network operator</dd>\n<dt>CurrentServiceProvider</dt><dd>Current service provider</dd>\n<dt>Customer_name_at_current_provider</dt><dd>Customer name at current provider</dd>\n<dt>Current_contract_number</dt><dd>Customer number at current provider</dd>\n<dt>UIccId</dt><dd>Current SIM card number</dd>\n<dt>Initials</dt><dd>Initials</dd>\n<dt>FamilyNamePrefix</dt><dd>Family name prefix</dd>\n<dt>FamilyName</dt><dd>Family name</dd>\n<dt>delivery_TT_id</dt><dd>Delivery Track&trace ID</dd>\n<dt>IsAppleDEP</dt><dd>Apple DEP</dd>\n<dt>IsSamsungKNOX</dt><dd>Samsung KNOX</dd>\n<dt>keepCurrentSim</dt><dd>Keep existing SIM card</dd>\n<dt>Note</dt><dd>Note</dd>\n<dt>Porting_wish_date</dt><dd>Preferred transition date</dd>\n<dt>returnReason</dt><dd>Reason for return</dd>\n<dt>returnRemarks</dt><dd>Remarks</dd>\n<dt>companyName</dt><dd>Company name</dd>\n<dt>companyNamePronounciation</dt><dd>Comapny name pronounciation</dd>\n<dt>businessVoiceMailMessageText</dt><dd>Chosen business voicemail message</dd>\n</dl>\n<div>\n<style type=\"text/css\">  dl {\n    display: flex;\n    flex-flow: row wrap;\n  }\n  dt {\n    flex-basis: 20%;\n    text-align: right;\n  }\n  dd {\n    flex-basis: 70%;\n    flex-grow: 1;\n  }\n</style>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_orders_track_and_trace</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "edd05b02-c50d-48a2-b08e-92270cedb034",
							"name": "Server Error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/track-and-trace/service-requests/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"track-and-trace",
										"service-requests",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "49579378",
											"description": "Service request ID"
										}
									]
								},
								"description": "The possible keys of `attributes` map in response object:<div style='max-height: 400px; overflow: auto; width: 100%'>\n<dl>\n<dt><b>Attribute name</b></dt><dd><b>Meaning</b></dd>\n<dt>login</dt><dd>Login</dd>\n<dt>roles</dt><dd>Roles</dd>\n<dt>firstName</dt><dd>First name</dd>\n<dt>lastName</dt><dd>Last name</dd>\n<dt>surnamePrefix</dt><dd>Surname prefix</dd>\n<dt>email</dt><dd>E-mail</dd>\n<dt>dateOfBirth</dt><dd>Date of birth</dd>\n<dt>vip</dt><dd>VIP</dd>\n<dt>employeeNumber</dt><dd>Employee number</dd>\n<dt>gender</dt><dd>Gender</dd>\n<dt>salutation</dt><dd>Salutation</dd>\n<dt>preferredLanguage</dt><dd>Preferred language</dd>\n<dt>comments</dt><dd>Comments</dd>\n<dt>accesspointNameMSISDN</dt><dd>Mobile number</dd>\n<dt>accesspointNameSIM</dt><dd>SIM card number</dd>\n<dt>accesspointNameIMSI</dt><dd>IMSI</dd>\n<dt>IMEI</dt><dd>IMEI</dd>\n<dt>Hanset_IMEI_number</dt><dd>IMEI</dd>\n<dt>accesspointNameFixedNumber</dt><dd>Fixed Number</dd>\n<dt>activeTo</dt><dd>Active to</dd>\n<dt>contractName</dt><dd>Subscription or device name</dd>\n<dt>totalOnetimePrice</dt><dd>One time price</dd>\n<dt>totalRecurrentPrice</dt><dd>Recurring price</dd>\n<dt>deferredPrice</dt><dd>Deferred price</dd>\n<dt>newUiccId</dt><dd>New SIM card number</dd>\n<dt>movedGroupName</dt><dd>Moved account</dd>\n<dt>subscriberAccountId</dt><dd>Old location</dd>\n<dt>destinationAccount</dt><dd>New location</dd>\n<dt>selectedDuoUiccid</dt><dd>Selected Duo SIM card number</dd>\n<dt>projectId</dt><dd>Project ID</dd>\n<dt>new_fixed_number</dt><dd>New fixed number</dd>\n<dt>new_desk_number</dt><dd>New extension</dd>\n<dt>oldUserGroupName</dt><dd>Previous user group</dd>\n<dt>newUserGroupName</dt><dd>New user group</dd>\n<dt>vpnName</dt><dd>VPN name</dd>\n<dt>deskNumber</dt><dd>Extension</dd>\n<dt>accesspointNameDeskNumber</dt><dd>Extension</dd>\n<dt>mobileAddress</dt><dd>Mobile number</dd>\n<dt>enterpriseName</dt><dd>Enterprise name</dd>\n<dt>enterpriseID</dt><dd>Enterprise ID</dd>\n<dt>mobilityGroupName</dt><dd>Fixed-Mobile PBX name</dd>\n<dt>userGroupName</dt><dd>User group</dd>\n<dt>enterpriseUserGroup</dt><dd>User group</dd>\n<dt>initialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>sipAccountName</dt><dd>SIP account name</dd>\n<dt>accessInstanceAttributeinitialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>accesspointNameQueuePhoneNumber</dt><dd>Queue phone number</dd>\n<dt>accesspointNameSipAccountName</dt><dd>SIP account name</dd>\n<dt>subscriptionAmount</dt><dd>New subscription amount</dd>\n<dt>contract_contact_name</dt><dd>Contract contact person (name)</dd>\n<dt>contract_contact_phone</dt><dd>Contract contact person (phone)</dd>\n<dt>contract_contact_mail</dt><dd>Contract contact person (mail)</dd>\n<dt>financial_contact_name</dt><dd>Financial contact person (name)</dd>\n<dt>financial_contact_phone</dt><dd>Financial contact person (phone)</dd>\n<dt>financial_contact_mail</dt><dd>Financial contact person (mail)</dd>\n<dt>technical_contact_name</dt><dd>Technical contact Person (name)</dd>\n<dt>technical_contact_phone</dt><dd>Technical contact Person (phone)</dd>\n<dt>technical_contact_mail</dt><dd>Technical contact Person (mail)</dd>\n<dt>deviceOption</dt><dd>Device option</dd>\n<dt>deviceType_label</dt><dd>Device type</dd>\n<dt>macAddress</dt><dd>Mac address</dd>\n<dt>deviceName</dt><dd>Device name</dd>\n<dt>sacGroupAccountId_label</dt><dd>Location account</dd>\n<dt>groupId</dt><dd>Location</dd>\n<dt>vGroupMovingToID</dt><dd>New location</dd>\n<dt>pbxName</dt><dd>PBX</dd>\n<dt>groupCitemId_label</dt><dd>Group</dd>\n<dt>Fixed</dt><dd>Alternate fixed number</dd>\n<dt>DeskNumber</dt><dd>Alternate extension</dd>\n<dt>billing_retention_period</dt><dd>Financial data retention period (months)</dd>\n<dt>managedGroupName</dt><dd>Authorized for</dd>\n<dt>subscriptionType</dt><dd>Subscription type</dd>\n<dt>CurrentNetworkOperator</dt><dd>Current network operator</dd>\n<dt>CurrentServiceProvider</dt><dd>Current service provider</dd>\n<dt>Customer_name_at_current_provider</dt><dd>Customer name at current provider</dd>\n<dt>Current_contract_number</dt><dd>Customer number at current provider</dd>\n<dt>UIccId</dt><dd>Current SIM card number</dd>\n<dt>Initials</dt><dd>Initials</dd>\n<dt>FamilyNamePrefix</dt><dd>Family name prefix</dd>\n<dt>FamilyName</dt><dd>Family name</dd>\n<dt>delivery_TT_id</dt><dd>Delivery Track&trace ID</dd>\n<dt>IsAppleDEP</dt><dd>Apple DEP</dd>\n<dt>IsSamsungKNOX</dt><dd>Samsung KNOX</dd>\n<dt>keepCurrentSim</dt><dd>Keep existing SIM card</dd>\n<dt>Note</dt><dd>Note</dd>\n<dt>Porting_wish_date</dt><dd>Preferred transition date</dd>\n<dt>returnReason</dt><dd>Reason for return</dd>\n<dt>returnRemarks</dt><dd>Remarks</dd>\n<dt>companyName</dt><dd>Company name</dd>\n<dt>companyNamePronounciation</dt><dd>Comapny name pronounciation</dd>\n<dt>businessVoiceMailMessageText</dt><dd>Chosen business voicemail message</dd>\n</dl>\n<div>\n<style type=\"text/css\">  dl {\n    display: flex;\n    flex-flow: row wrap;\n  }\n  dt {\n    flex-basis: 20%;\n    text-align: right;\n  }\n  dd {\n    flex-basis: 70%;\n    flex-grow: 1;\n  }\n</style>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_orders_track_and_trace</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "f5625a92-f51e-461b-84db-d7cc53d0ce97",
							"name": "Service Unavailable",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/track-and-trace/service-requests/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"track-and-trace",
										"service-requests",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "49579378",
											"description": "Service request ID"
										}
									]
								},
								"description": "The possible keys of `attributes` map in response object:<div style='max-height: 400px; overflow: auto; width: 100%'>\n<dl>\n<dt><b>Attribute name</b></dt><dd><b>Meaning</b></dd>\n<dt>login</dt><dd>Login</dd>\n<dt>roles</dt><dd>Roles</dd>\n<dt>firstName</dt><dd>First name</dd>\n<dt>lastName</dt><dd>Last name</dd>\n<dt>surnamePrefix</dt><dd>Surname prefix</dd>\n<dt>email</dt><dd>E-mail</dd>\n<dt>dateOfBirth</dt><dd>Date of birth</dd>\n<dt>vip</dt><dd>VIP</dd>\n<dt>employeeNumber</dt><dd>Employee number</dd>\n<dt>gender</dt><dd>Gender</dd>\n<dt>salutation</dt><dd>Salutation</dd>\n<dt>preferredLanguage</dt><dd>Preferred language</dd>\n<dt>comments</dt><dd>Comments</dd>\n<dt>accesspointNameMSISDN</dt><dd>Mobile number</dd>\n<dt>accesspointNameSIM</dt><dd>SIM card number</dd>\n<dt>accesspointNameIMSI</dt><dd>IMSI</dd>\n<dt>IMEI</dt><dd>IMEI</dd>\n<dt>Hanset_IMEI_number</dt><dd>IMEI</dd>\n<dt>accesspointNameFixedNumber</dt><dd>Fixed Number</dd>\n<dt>activeTo</dt><dd>Active to</dd>\n<dt>contractName</dt><dd>Subscription or device name</dd>\n<dt>totalOnetimePrice</dt><dd>One time price</dd>\n<dt>totalRecurrentPrice</dt><dd>Recurring price</dd>\n<dt>deferredPrice</dt><dd>Deferred price</dd>\n<dt>newUiccId</dt><dd>New SIM card number</dd>\n<dt>movedGroupName</dt><dd>Moved account</dd>\n<dt>subscriberAccountId</dt><dd>Old location</dd>\n<dt>destinationAccount</dt><dd>New location</dd>\n<dt>selectedDuoUiccid</dt><dd>Selected Duo SIM card number</dd>\n<dt>projectId</dt><dd>Project ID</dd>\n<dt>new_fixed_number</dt><dd>New fixed number</dd>\n<dt>new_desk_number</dt><dd>New extension</dd>\n<dt>oldUserGroupName</dt><dd>Previous user group</dd>\n<dt>newUserGroupName</dt><dd>New user group</dd>\n<dt>vpnName</dt><dd>VPN name</dd>\n<dt>deskNumber</dt><dd>Extension</dd>\n<dt>accesspointNameDeskNumber</dt><dd>Extension</dd>\n<dt>mobileAddress</dt><dd>Mobile number</dd>\n<dt>enterpriseName</dt><dd>Enterprise name</dd>\n<dt>enterpriseID</dt><dd>Enterprise ID</dd>\n<dt>mobilityGroupName</dt><dd>Fixed-Mobile PBX name</dd>\n<dt>userGroupName</dt><dd>User group</dd>\n<dt>enterpriseUserGroup</dt><dd>User group</dd>\n<dt>initialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>sipAccountName</dt><dd>SIP account name</dd>\n<dt>accessInstanceAttributeinitialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>accesspointNameQueuePhoneNumber</dt><dd>Queue phone number</dd>\n<dt>accesspointNameSipAccountName</dt><dd>SIP account name</dd>\n<dt>subscriptionAmount</dt><dd>New subscription amount</dd>\n<dt>contract_contact_name</dt><dd>Contract contact person (name)</dd>\n<dt>contract_contact_phone</dt><dd>Contract contact person (phone)</dd>\n<dt>contract_contact_mail</dt><dd>Contract contact person (mail)</dd>\n<dt>financial_contact_name</dt><dd>Financial contact person (name)</dd>\n<dt>financial_contact_phone</dt><dd>Financial contact person (phone)</dd>\n<dt>financial_contact_mail</dt><dd>Financial contact person (mail)</dd>\n<dt>technical_contact_name</dt><dd>Technical contact Person (name)</dd>\n<dt>technical_contact_phone</dt><dd>Technical contact Person (phone)</dd>\n<dt>technical_contact_mail</dt><dd>Technical contact Person (mail)</dd>\n<dt>deviceOption</dt><dd>Device option</dd>\n<dt>deviceType_label</dt><dd>Device type</dd>\n<dt>macAddress</dt><dd>Mac address</dd>\n<dt>deviceName</dt><dd>Device name</dd>\n<dt>sacGroupAccountId_label</dt><dd>Location account</dd>\n<dt>groupId</dt><dd>Location</dd>\n<dt>vGroupMovingToID</dt><dd>New location</dd>\n<dt>pbxName</dt><dd>PBX</dd>\n<dt>groupCitemId_label</dt><dd>Group</dd>\n<dt>Fixed</dt><dd>Alternate fixed number</dd>\n<dt>DeskNumber</dt><dd>Alternate extension</dd>\n<dt>billing_retention_period</dt><dd>Financial data retention period (months)</dd>\n<dt>managedGroupName</dt><dd>Authorized for</dd>\n<dt>subscriptionType</dt><dd>Subscription type</dd>\n<dt>CurrentNetworkOperator</dt><dd>Current network operator</dd>\n<dt>CurrentServiceProvider</dt><dd>Current service provider</dd>\n<dt>Customer_name_at_current_provider</dt><dd>Customer name at current provider</dd>\n<dt>Current_contract_number</dt><dd>Customer number at current provider</dd>\n<dt>UIccId</dt><dd>Current SIM card number</dd>\n<dt>Initials</dt><dd>Initials</dd>\n<dt>FamilyNamePrefix</dt><dd>Family name prefix</dd>\n<dt>FamilyName</dt><dd>Family name</dd>\n<dt>delivery_TT_id</dt><dd>Delivery Track&trace ID</dd>\n<dt>IsAppleDEP</dt><dd>Apple DEP</dd>\n<dt>IsSamsungKNOX</dt><dd>Samsung KNOX</dd>\n<dt>keepCurrentSim</dt><dd>Keep existing SIM card</dd>\n<dt>Note</dt><dd>Note</dd>\n<dt>Porting_wish_date</dt><dd>Preferred transition date</dd>\n<dt>returnReason</dt><dd>Reason for return</dd>\n<dt>returnRemarks</dt><dd>Remarks</dd>\n<dt>companyName</dt><dd>Company name</dd>\n<dt>companyNamePronounciation</dt><dd>Comapny name pronounciation</dd>\n<dt>businessVoiceMailMessageText</dt><dd>Chosen business voicemail message</dd>\n</dl>\n<div>\n<style type=\"text/css\">  dl {\n    display: flex;\n    flex-flow: row wrap;\n  }\n  dt {\n    flex-basis: 20%;\n    text-align: right;\n  }\n  dd {\n    flex-basis: 70%;\n    flex-grow: 1;\n  }\n</style>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_orders_track_and_trace</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			],
			"id": "4c19a3e1-aac0-4637-9202-3173ba7a0aa6",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "b2470899-de0a-4349-878a-213808e6857d",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "66a45177-99d7-45d0-9b02-8e91b5f09956",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "03- UnBlock SIM card",
			"item": [
				{
					"name": "1- Get all contracts",
					"id": "fb8276c6-8c32-441a-a0f7-9fe46ac33286",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"description": "Content-Language",
								"key": "Content-Language",
								"value": "elit aute"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/contract/all",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"contract",
								"all"
							]
						},
						"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li></ul>"
					},
					"response": [
						{
							"id": "9364e8e9-c92a-4809-bae5-79c18a072175",
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Content-Language",
										"key": "Content-Language",
										"value": "elit aute"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contract/all",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contract",
										"all"
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li></ul>"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "7d591e0b-8138-4b7f-b511-865767400dcc",
							"name": "Bad Request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Content-Language",
										"key": "Content-Language",
										"value": "elit aute"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contract/all",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contract",
										"all"
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li></ul>"
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "ce6b3827-bece-47ba-b732-d12f906f651b",
							"name": "Unauthorized",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Content-Language",
										"key": "Content-Language",
										"value": "elit aute"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contract/all",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contract",
										"all"
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li></ul>"
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "f72166fb-70ab-4dc0-afaf-83f8cdb02df7",
							"name": "Forbidden",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Content-Language",
										"key": "Content-Language",
										"value": "elit aute"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contract/all",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contract",
										"all"
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li></ul>"
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "63599578-5906-48ad-8d6c-3181bcdd76a3",
							"name": "Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Content-Language",
										"key": "Content-Language",
										"value": "elit aute"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contract/all",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contract",
										"all"
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li></ul>"
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "6b748883-b8d6-4657-9a6a-64c0fd874e44",
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Content-Language",
										"key": "Content-Language",
										"value": "elit aute"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contract/all",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contract",
										"all"
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li></ul>"
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "c3c3f750-c467-499c-9070-6f792741cc2e",
							"name": "Server Error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Content-Language",
										"key": "Content-Language",
										"value": "elit aute"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contract/all",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contract",
										"all"
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li></ul>"
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "3b94e8f1-7bba-4de3-b2f7-d3618292a432",
							"name": "Service Unavailable",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Content-Language",
										"key": "Content-Language",
										"value": "elit aute"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contract/all",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contract",
										"all"
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li></ul>"
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "2- Get information about operations available for given contract.",
					"id": "f9e86c9c-5bfb-443c-ac69-936348708de5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/order/operations?contractId=1283615926",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"order",
								"operations"
							],
							"query": [
								{
									"key": "contractId",
									"value": "1283615926"
								}
							]
						},
						"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
					},
					"response": [
						{
							"id": "1dec4099-9030-4127-8912-21494faaeff1",
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/order/operations?contractId=1283615926",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"order",
										"operations"
									],
									"query": [
										{
											"key": "contractId",
											"value": "1283615926"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "8396fa20-d74a-442d-bcbe-ea0e92d87441",
							"name": "Bad Request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/order/operations?contractId=1283615926",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"order",
										"operations"
									],
									"query": [
										{
											"key": "contractId",
											"value": "1283615926"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "53e51a03-feb7-4a63-9219-fc0fd02db0bd",
							"name": "Unauthorized",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/order/operations?contractId=1283615926",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"order",
										"operations"
									],
									"query": [
										{
											"key": "contractId",
											"value": "1283615926"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "5a2ab5ed-390d-4b99-8262-7a9a5813bddc",
							"name": "Forbidden",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/order/operations?contractId=1283615926",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"order",
										"operations"
									],
									"query": [
										{
											"key": "contractId",
											"value": "1283615926"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "40e5594d-6224-4019-9ee5-8d35defcb87e",
							"name": "Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/order/operations?contractId=1283615926",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"order",
										"operations"
									],
									"query": [
										{
											"key": "contractId",
											"value": "1283615926"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "9f43fee3-e60f-4694-890d-3ebf2ba94842",
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/order/operations?contractId=1283615926",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"order",
										"operations"
									],
									"query": [
										{
											"key": "contractId",
											"value": "1283615926"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "b137943a-29d4-4b3f-adcb-36cc9481ec77",
							"name": "Server Error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/order/operations?contractId=1283615926",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"order",
										"operations"
									],
									"query": [
										{
											"key": "contractId",
											"value": "1283615926"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "d7fa9a78-44c5-47d9-aa2e-e133aba7792e",
							"name": "Service Unavailable",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/order/operations?contractId=1283615926",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"order",
										"operations"
									],
									"query": [
										{
											"key": "contractId",
											"value": "1283615926"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "3- UnBlock sim for given contract",
					"id": "880a7802-ab29-423a-82e9-051cf8f88ba6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"contractId\": 1283615926,\r\n  \"referenceNumber\": \"Test Run\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/order/unblock-sim",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"order",
								"unblock-sim"
							]
						},
						"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
					},
					"response": [
						{
							"id": "395d822d-e4c2-4f5e-a11f-ab4ebef9fc4d",
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"contractId\": 1283615926,\r\n  \"referenceNumber\": \"Test Run\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/order/unblock-sim",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"order",
										"unblock-sim"
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "259f0d09-b298-4586-99a6-bfc9325abbde",
							"name": "Bad Request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"contractId\": 1283615926,\r\n  \"referenceNumber\": \"Test Run\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/order/unblock-sim",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"order",
										"unblock-sim"
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "654ffe00-415c-4fbb-a423-e625ec24d3a1",
							"name": "Unauthorized",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"contractId\": 1283615926,\r\n  \"referenceNumber\": \"Test Run\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/order/unblock-sim",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"order",
										"unblock-sim"
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "7f8ac12f-60a8-4448-9afe-a1dbe3953a70",
							"name": "Forbidden",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"contractId\": 1283615926,\r\n  \"referenceNumber\": \"Test Run\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/order/unblock-sim",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"order",
										"unblock-sim"
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "7aac57e2-45e1-491e-86b8-35c27cc50e75",
							"name": "Not Found",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"contractId\": 1283615926,\r\n  \"referenceNumber\": \"Test Run\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/order/unblock-sim",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"order",
										"unblock-sim"
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "947c68fe-e1f5-42a5-94e0-83ced623cacf",
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"contractId\": 1283615926,\r\n  \"referenceNumber\": \"Test Run\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/order/unblock-sim",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"order",
										"unblock-sim"
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "429fb962-6a3d-47b5-b9e9-8d99736fc5c7",
							"name": "Server Error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"contractId\": 1283615926,\r\n  \"referenceNumber\": \"Test Run\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/order/unblock-sim",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"order",
										"unblock-sim"
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "84d58339-9aee-4283-a574-f120229615a7",
							"name": "Service Unavailable",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"contractId\": 1283615926,\r\n  \"referenceNumber\": \"Test Run\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/order/unblock-sim",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"order",
										"unblock-sim"
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "4- Get service requests details",
					"id": "89ef0df1-28f8-4405-a7de-3764545d7e98",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/track-and-trace/service-requests/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"track-and-trace",
								"service-requests",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "49579379",
									"description": "Service request ID"
								}
							]
						},
						"description": "The possible keys of `attributes` map in response object:<div style='max-height: 400px; overflow: auto; width: 100%'>\n<dl>\n<dt><b>Attribute name</b></dt><dd><b>Meaning</b></dd>\n<dt>login</dt><dd>Login</dd>\n<dt>roles</dt><dd>Roles</dd>\n<dt>firstName</dt><dd>First name</dd>\n<dt>lastName</dt><dd>Last name</dd>\n<dt>surnamePrefix</dt><dd>Surname prefix</dd>\n<dt>email</dt><dd>E-mail</dd>\n<dt>dateOfBirth</dt><dd>Date of birth</dd>\n<dt>vip</dt><dd>VIP</dd>\n<dt>employeeNumber</dt><dd>Employee number</dd>\n<dt>gender</dt><dd>Gender</dd>\n<dt>salutation</dt><dd>Salutation</dd>\n<dt>preferredLanguage</dt><dd>Preferred language</dd>\n<dt>comments</dt><dd>Comments</dd>\n<dt>accesspointNameMSISDN</dt><dd>Mobile number</dd>\n<dt>accesspointNameSIM</dt><dd>SIM card number</dd>\n<dt>accesspointNameIMSI</dt><dd>IMSI</dd>\n<dt>IMEI</dt><dd>IMEI</dd>\n<dt>Hanset_IMEI_number</dt><dd>IMEI</dd>\n<dt>accesspointNameFixedNumber</dt><dd>Fixed Number</dd>\n<dt>activeTo</dt><dd>Active to</dd>\n<dt>contractName</dt><dd>Subscription or device name</dd>\n<dt>totalOnetimePrice</dt><dd>One time price</dd>\n<dt>totalRecurrentPrice</dt><dd>Recurring price</dd>\n<dt>deferredPrice</dt><dd>Deferred price</dd>\n<dt>newUiccId</dt><dd>New SIM card number</dd>\n<dt>movedGroupName</dt><dd>Moved account</dd>\n<dt>subscriberAccountId</dt><dd>Old location</dd>\n<dt>destinationAccount</dt><dd>New location</dd>\n<dt>selectedDuoUiccid</dt><dd>Selected Duo SIM card number</dd>\n<dt>projectId</dt><dd>Project ID</dd>\n<dt>new_fixed_number</dt><dd>New fixed number</dd>\n<dt>new_desk_number</dt><dd>New extension</dd>\n<dt>oldUserGroupName</dt><dd>Previous user group</dd>\n<dt>newUserGroupName</dt><dd>New user group</dd>\n<dt>vpnName</dt><dd>VPN name</dd>\n<dt>deskNumber</dt><dd>Extension</dd>\n<dt>accesspointNameDeskNumber</dt><dd>Extension</dd>\n<dt>mobileAddress</dt><dd>Mobile number</dd>\n<dt>enterpriseName</dt><dd>Enterprise name</dd>\n<dt>enterpriseID</dt><dd>Enterprise ID</dd>\n<dt>mobilityGroupName</dt><dd>Fixed-Mobile PBX name</dd>\n<dt>userGroupName</dt><dd>User group</dd>\n<dt>enterpriseUserGroup</dt><dd>User group</dd>\n<dt>initialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>sipAccountName</dt><dd>SIP account name</dd>\n<dt>accessInstanceAttributeinitialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>accesspointNameQueuePhoneNumber</dt><dd>Queue phone number</dd>\n<dt>accesspointNameSipAccountName</dt><dd>SIP account name</dd>\n<dt>subscriptionAmount</dt><dd>New subscription amount</dd>\n<dt>contract_contact_name</dt><dd>Contract contact person (name)</dd>\n<dt>contract_contact_phone</dt><dd>Contract contact person (phone)</dd>\n<dt>contract_contact_mail</dt><dd>Contract contact person (mail)</dd>\n<dt>financial_contact_name</dt><dd>Financial contact person (name)</dd>\n<dt>financial_contact_phone</dt><dd>Financial contact person (phone)</dd>\n<dt>financial_contact_mail</dt><dd>Financial contact person (mail)</dd>\n<dt>technical_contact_name</dt><dd>Technical contact Person (name)</dd>\n<dt>technical_contact_phone</dt><dd>Technical contact Person (phone)</dd>\n<dt>technical_contact_mail</dt><dd>Technical contact Person (mail)</dd>\n<dt>deviceOption</dt><dd>Device option</dd>\n<dt>deviceType_label</dt><dd>Device type</dd>\n<dt>macAddress</dt><dd>Mac address</dd>\n<dt>deviceName</dt><dd>Device name</dd>\n<dt>sacGroupAccountId_label</dt><dd>Location account</dd>\n<dt>groupId</dt><dd>Location</dd>\n<dt>vGroupMovingToID</dt><dd>New location</dd>\n<dt>pbxName</dt><dd>PBX</dd>\n<dt>groupCitemId_label</dt><dd>Group</dd>\n<dt>Fixed</dt><dd>Alternate fixed number</dd>\n<dt>DeskNumber</dt><dd>Alternate extension</dd>\n<dt>billing_retention_period</dt><dd>Financial data retention period (months)</dd>\n<dt>managedGroupName</dt><dd>Authorized for</dd>\n<dt>subscriptionType</dt><dd>Subscription type</dd>\n<dt>CurrentNetworkOperator</dt><dd>Current network operator</dd>\n<dt>CurrentServiceProvider</dt><dd>Current service provider</dd>\n<dt>Customer_name_at_current_provider</dt><dd>Customer name at current provider</dd>\n<dt>Current_contract_number</dt><dd>Customer number at current provider</dd>\n<dt>UIccId</dt><dd>Current SIM card number</dd>\n<dt>Initials</dt><dd>Initials</dd>\n<dt>FamilyNamePrefix</dt><dd>Family name prefix</dd>\n<dt>FamilyName</dt><dd>Family name</dd>\n<dt>delivery_TT_id</dt><dd>Delivery Track&trace ID</dd>\n<dt>IsAppleDEP</dt><dd>Apple DEP</dd>\n<dt>IsSamsungKNOX</dt><dd>Samsung KNOX</dd>\n<dt>keepCurrentSim</dt><dd>Keep existing SIM card</dd>\n<dt>Note</dt><dd>Note</dd>\n<dt>Porting_wish_date</dt><dd>Preferred transition date</dd>\n<dt>returnReason</dt><dd>Reason for return</dd>\n<dt>returnRemarks</dt><dd>Remarks</dd>\n<dt>companyName</dt><dd>Company name</dd>\n<dt>companyNamePronounciation</dt><dd>Comapny name pronounciation</dd>\n<dt>businessVoiceMailMessageText</dt><dd>Chosen business voicemail message</dd>\n</dl>\n<div>\n<style type=\"text/css\">  dl {\n    display: flex;\n    flex-flow: row wrap;\n  }\n  dt {\n    flex-basis: 20%;\n    text-align: right;\n  }\n  dd {\n    flex-basis: 70%;\n    flex-grow: 1;\n  }\n</style>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_orders_track_and_trace</li><li>privileges_orders_authorization</li></ul>"
					},
					"response": [
						{
							"id": "809fff2d-c1c3-4404-a559-ce8345319181",
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/track-and-trace/service-requests/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"track-and-trace",
										"service-requests",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "49579379",
											"description": "Service request ID"
										}
									]
								},
								"description": "The possible keys of `attributes` map in response object:<div style='max-height: 400px; overflow: auto; width: 100%'>\n<dl>\n<dt><b>Attribute name</b></dt><dd><b>Meaning</b></dd>\n<dt>login</dt><dd>Login</dd>\n<dt>roles</dt><dd>Roles</dd>\n<dt>firstName</dt><dd>First name</dd>\n<dt>lastName</dt><dd>Last name</dd>\n<dt>surnamePrefix</dt><dd>Surname prefix</dd>\n<dt>email</dt><dd>E-mail</dd>\n<dt>dateOfBirth</dt><dd>Date of birth</dd>\n<dt>vip</dt><dd>VIP</dd>\n<dt>employeeNumber</dt><dd>Employee number</dd>\n<dt>gender</dt><dd>Gender</dd>\n<dt>salutation</dt><dd>Salutation</dd>\n<dt>preferredLanguage</dt><dd>Preferred language</dd>\n<dt>comments</dt><dd>Comments</dd>\n<dt>accesspointNameMSISDN</dt><dd>Mobile number</dd>\n<dt>accesspointNameSIM</dt><dd>SIM card number</dd>\n<dt>accesspointNameIMSI</dt><dd>IMSI</dd>\n<dt>IMEI</dt><dd>IMEI</dd>\n<dt>Hanset_IMEI_number</dt><dd>IMEI</dd>\n<dt>accesspointNameFixedNumber</dt><dd>Fixed Number</dd>\n<dt>activeTo</dt><dd>Active to</dd>\n<dt>contractName</dt><dd>Subscription or device name</dd>\n<dt>totalOnetimePrice</dt><dd>One time price</dd>\n<dt>totalRecurrentPrice</dt><dd>Recurring price</dd>\n<dt>deferredPrice</dt><dd>Deferred price</dd>\n<dt>newUiccId</dt><dd>New SIM card number</dd>\n<dt>movedGroupName</dt><dd>Moved account</dd>\n<dt>subscriberAccountId</dt><dd>Old location</dd>\n<dt>destinationAccount</dt><dd>New location</dd>\n<dt>selectedDuoUiccid</dt><dd>Selected Duo SIM card number</dd>\n<dt>projectId</dt><dd>Project ID</dd>\n<dt>new_fixed_number</dt><dd>New fixed number</dd>\n<dt>new_desk_number</dt><dd>New extension</dd>\n<dt>oldUserGroupName</dt><dd>Previous user group</dd>\n<dt>newUserGroupName</dt><dd>New user group</dd>\n<dt>vpnName</dt><dd>VPN name</dd>\n<dt>deskNumber</dt><dd>Extension</dd>\n<dt>accesspointNameDeskNumber</dt><dd>Extension</dd>\n<dt>mobileAddress</dt><dd>Mobile number</dd>\n<dt>enterpriseName</dt><dd>Enterprise name</dd>\n<dt>enterpriseID</dt><dd>Enterprise ID</dd>\n<dt>mobilityGroupName</dt><dd>Fixed-Mobile PBX name</dd>\n<dt>userGroupName</dt><dd>User group</dd>\n<dt>enterpriseUserGroup</dt><dd>User group</dd>\n<dt>initialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>sipAccountName</dt><dd>SIP account name</dd>\n<dt>accessInstanceAttributeinitialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>accesspointNameQueuePhoneNumber</dt><dd>Queue phone number</dd>\n<dt>accesspointNameSipAccountName</dt><dd>SIP account name</dd>\n<dt>subscriptionAmount</dt><dd>New subscription amount</dd>\n<dt>contract_contact_name</dt><dd>Contract contact person (name)</dd>\n<dt>contract_contact_phone</dt><dd>Contract contact person (phone)</dd>\n<dt>contract_contact_mail</dt><dd>Contract contact person (mail)</dd>\n<dt>financial_contact_name</dt><dd>Financial contact person (name)</dd>\n<dt>financial_contact_phone</dt><dd>Financial contact person (phone)</dd>\n<dt>financial_contact_mail</dt><dd>Financial contact person (mail)</dd>\n<dt>technical_contact_name</dt><dd>Technical contact Person (name)</dd>\n<dt>technical_contact_phone</dt><dd>Technical contact Person (phone)</dd>\n<dt>technical_contact_mail</dt><dd>Technical contact Person (mail)</dd>\n<dt>deviceOption</dt><dd>Device option</dd>\n<dt>deviceType_label</dt><dd>Device type</dd>\n<dt>macAddress</dt><dd>Mac address</dd>\n<dt>deviceName</dt><dd>Device name</dd>\n<dt>sacGroupAccountId_label</dt><dd>Location account</dd>\n<dt>groupId</dt><dd>Location</dd>\n<dt>vGroupMovingToID</dt><dd>New location</dd>\n<dt>pbxName</dt><dd>PBX</dd>\n<dt>groupCitemId_label</dt><dd>Group</dd>\n<dt>Fixed</dt><dd>Alternate fixed number</dd>\n<dt>DeskNumber</dt><dd>Alternate extension</dd>\n<dt>billing_retention_period</dt><dd>Financial data retention period (months)</dd>\n<dt>managedGroupName</dt><dd>Authorized for</dd>\n<dt>subscriptionType</dt><dd>Subscription type</dd>\n<dt>CurrentNetworkOperator</dt><dd>Current network operator</dd>\n<dt>CurrentServiceProvider</dt><dd>Current service provider</dd>\n<dt>Customer_name_at_current_provider</dt><dd>Customer name at current provider</dd>\n<dt>Current_contract_number</dt><dd>Customer number at current provider</dd>\n<dt>UIccId</dt><dd>Current SIM card number</dd>\n<dt>Initials</dt><dd>Initials</dd>\n<dt>FamilyNamePrefix</dt><dd>Family name prefix</dd>\n<dt>FamilyName</dt><dd>Family name</dd>\n<dt>delivery_TT_id</dt><dd>Delivery Track&trace ID</dd>\n<dt>IsAppleDEP</dt><dd>Apple DEP</dd>\n<dt>IsSamsungKNOX</dt><dd>Samsung KNOX</dd>\n<dt>keepCurrentSim</dt><dd>Keep existing SIM card</dd>\n<dt>Note</dt><dd>Note</dd>\n<dt>Porting_wish_date</dt><dd>Preferred transition date</dd>\n<dt>returnReason</dt><dd>Reason for return</dd>\n<dt>returnRemarks</dt><dd>Remarks</dd>\n<dt>companyName</dt><dd>Company name</dd>\n<dt>companyNamePronounciation</dt><dd>Comapny name pronounciation</dd>\n<dt>businessVoiceMailMessageText</dt><dd>Chosen business voicemail message</dd>\n</dl>\n<div>\n<style type=\"text/css\">  dl {\n    display: flex;\n    flex-flow: row wrap;\n  }\n  dt {\n    flex-basis: 20%;\n    text-align: right;\n  }\n  dd {\n    flex-basis: 70%;\n    flex-grow: 1;\n  }\n</style>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_orders_track_and_trace</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "ff5ccb86-fea3-455c-adf4-355b51c31edb",
							"name": "Bad Request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/track-and-trace/service-requests/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"track-and-trace",
										"service-requests",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "49579379",
											"description": "Service request ID"
										}
									]
								},
								"description": "The possible keys of `attributes` map in response object:<div style='max-height: 400px; overflow: auto; width: 100%'>\n<dl>\n<dt><b>Attribute name</b></dt><dd><b>Meaning</b></dd>\n<dt>login</dt><dd>Login</dd>\n<dt>roles</dt><dd>Roles</dd>\n<dt>firstName</dt><dd>First name</dd>\n<dt>lastName</dt><dd>Last name</dd>\n<dt>surnamePrefix</dt><dd>Surname prefix</dd>\n<dt>email</dt><dd>E-mail</dd>\n<dt>dateOfBirth</dt><dd>Date of birth</dd>\n<dt>vip</dt><dd>VIP</dd>\n<dt>employeeNumber</dt><dd>Employee number</dd>\n<dt>gender</dt><dd>Gender</dd>\n<dt>salutation</dt><dd>Salutation</dd>\n<dt>preferredLanguage</dt><dd>Preferred language</dd>\n<dt>comments</dt><dd>Comments</dd>\n<dt>accesspointNameMSISDN</dt><dd>Mobile number</dd>\n<dt>accesspointNameSIM</dt><dd>SIM card number</dd>\n<dt>accesspointNameIMSI</dt><dd>IMSI</dd>\n<dt>IMEI</dt><dd>IMEI</dd>\n<dt>Hanset_IMEI_number</dt><dd>IMEI</dd>\n<dt>accesspointNameFixedNumber</dt><dd>Fixed Number</dd>\n<dt>activeTo</dt><dd>Active to</dd>\n<dt>contractName</dt><dd>Subscription or device name</dd>\n<dt>totalOnetimePrice</dt><dd>One time price</dd>\n<dt>totalRecurrentPrice</dt><dd>Recurring price</dd>\n<dt>deferredPrice</dt><dd>Deferred price</dd>\n<dt>newUiccId</dt><dd>New SIM card number</dd>\n<dt>movedGroupName</dt><dd>Moved account</dd>\n<dt>subscriberAccountId</dt><dd>Old location</dd>\n<dt>destinationAccount</dt><dd>New location</dd>\n<dt>selectedDuoUiccid</dt><dd>Selected Duo SIM card number</dd>\n<dt>projectId</dt><dd>Project ID</dd>\n<dt>new_fixed_number</dt><dd>New fixed number</dd>\n<dt>new_desk_number</dt><dd>New extension</dd>\n<dt>oldUserGroupName</dt><dd>Previous user group</dd>\n<dt>newUserGroupName</dt><dd>New user group</dd>\n<dt>vpnName</dt><dd>VPN name</dd>\n<dt>deskNumber</dt><dd>Extension</dd>\n<dt>accesspointNameDeskNumber</dt><dd>Extension</dd>\n<dt>mobileAddress</dt><dd>Mobile number</dd>\n<dt>enterpriseName</dt><dd>Enterprise name</dd>\n<dt>enterpriseID</dt><dd>Enterprise ID</dd>\n<dt>mobilityGroupName</dt><dd>Fixed-Mobile PBX name</dd>\n<dt>userGroupName</dt><dd>User group</dd>\n<dt>enterpriseUserGroup</dt><dd>User group</dd>\n<dt>initialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>sipAccountName</dt><dd>SIP account name</dd>\n<dt>accessInstanceAttributeinitialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>accesspointNameQueuePhoneNumber</dt><dd>Queue phone number</dd>\n<dt>accesspointNameSipAccountName</dt><dd>SIP account name</dd>\n<dt>subscriptionAmount</dt><dd>New subscription amount</dd>\n<dt>contract_contact_name</dt><dd>Contract contact person (name)</dd>\n<dt>contract_contact_phone</dt><dd>Contract contact person (phone)</dd>\n<dt>contract_contact_mail</dt><dd>Contract contact person (mail)</dd>\n<dt>financial_contact_name</dt><dd>Financial contact person (name)</dd>\n<dt>financial_contact_phone</dt><dd>Financial contact person (phone)</dd>\n<dt>financial_contact_mail</dt><dd>Financial contact person (mail)</dd>\n<dt>technical_contact_name</dt><dd>Technical contact Person (name)</dd>\n<dt>technical_contact_phone</dt><dd>Technical contact Person (phone)</dd>\n<dt>technical_contact_mail</dt><dd>Technical contact Person (mail)</dd>\n<dt>deviceOption</dt><dd>Device option</dd>\n<dt>deviceType_label</dt><dd>Device type</dd>\n<dt>macAddress</dt><dd>Mac address</dd>\n<dt>deviceName</dt><dd>Device name</dd>\n<dt>sacGroupAccountId_label</dt><dd>Location account</dd>\n<dt>groupId</dt><dd>Location</dd>\n<dt>vGroupMovingToID</dt><dd>New location</dd>\n<dt>pbxName</dt><dd>PBX</dd>\n<dt>groupCitemId_label</dt><dd>Group</dd>\n<dt>Fixed</dt><dd>Alternate fixed number</dd>\n<dt>DeskNumber</dt><dd>Alternate extension</dd>\n<dt>billing_retention_period</dt><dd>Financial data retention period (months)</dd>\n<dt>managedGroupName</dt><dd>Authorized for</dd>\n<dt>subscriptionType</dt><dd>Subscription type</dd>\n<dt>CurrentNetworkOperator</dt><dd>Current network operator</dd>\n<dt>CurrentServiceProvider</dt><dd>Current service provider</dd>\n<dt>Customer_name_at_current_provider</dt><dd>Customer name at current provider</dd>\n<dt>Current_contract_number</dt><dd>Customer number at current provider</dd>\n<dt>UIccId</dt><dd>Current SIM card number</dd>\n<dt>Initials</dt><dd>Initials</dd>\n<dt>FamilyNamePrefix</dt><dd>Family name prefix</dd>\n<dt>FamilyName</dt><dd>Family name</dd>\n<dt>delivery_TT_id</dt><dd>Delivery Track&trace ID</dd>\n<dt>IsAppleDEP</dt><dd>Apple DEP</dd>\n<dt>IsSamsungKNOX</dt><dd>Samsung KNOX</dd>\n<dt>keepCurrentSim</dt><dd>Keep existing SIM card</dd>\n<dt>Note</dt><dd>Note</dd>\n<dt>Porting_wish_date</dt><dd>Preferred transition date</dd>\n<dt>returnReason</dt><dd>Reason for return</dd>\n<dt>returnRemarks</dt><dd>Remarks</dd>\n<dt>companyName</dt><dd>Company name</dd>\n<dt>companyNamePronounciation</dt><dd>Comapny name pronounciation</dd>\n<dt>businessVoiceMailMessageText</dt><dd>Chosen business voicemail message</dd>\n</dl>\n<div>\n<style type=\"text/css\">  dl {\n    display: flex;\n    flex-flow: row wrap;\n  }\n  dt {\n    flex-basis: 20%;\n    text-align: right;\n  }\n  dd {\n    flex-basis: 70%;\n    flex-grow: 1;\n  }\n</style>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_orders_track_and_trace</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "664d173d-d833-4445-abe8-513b741390f8",
							"name": "Unauthorized",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/track-and-trace/service-requests/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"track-and-trace",
										"service-requests",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "49579379",
											"description": "Service request ID"
										}
									]
								},
								"description": "The possible keys of `attributes` map in response object:<div style='max-height: 400px; overflow: auto; width: 100%'>\n<dl>\n<dt><b>Attribute name</b></dt><dd><b>Meaning</b></dd>\n<dt>login</dt><dd>Login</dd>\n<dt>roles</dt><dd>Roles</dd>\n<dt>firstName</dt><dd>First name</dd>\n<dt>lastName</dt><dd>Last name</dd>\n<dt>surnamePrefix</dt><dd>Surname prefix</dd>\n<dt>email</dt><dd>E-mail</dd>\n<dt>dateOfBirth</dt><dd>Date of birth</dd>\n<dt>vip</dt><dd>VIP</dd>\n<dt>employeeNumber</dt><dd>Employee number</dd>\n<dt>gender</dt><dd>Gender</dd>\n<dt>salutation</dt><dd>Salutation</dd>\n<dt>preferredLanguage</dt><dd>Preferred language</dd>\n<dt>comments</dt><dd>Comments</dd>\n<dt>accesspointNameMSISDN</dt><dd>Mobile number</dd>\n<dt>accesspointNameSIM</dt><dd>SIM card number</dd>\n<dt>accesspointNameIMSI</dt><dd>IMSI</dd>\n<dt>IMEI</dt><dd>IMEI</dd>\n<dt>Hanset_IMEI_number</dt><dd>IMEI</dd>\n<dt>accesspointNameFixedNumber</dt><dd>Fixed Number</dd>\n<dt>activeTo</dt><dd>Active to</dd>\n<dt>contractName</dt><dd>Subscription or device name</dd>\n<dt>totalOnetimePrice</dt><dd>One time price</dd>\n<dt>totalRecurrentPrice</dt><dd>Recurring price</dd>\n<dt>deferredPrice</dt><dd>Deferred price</dd>\n<dt>newUiccId</dt><dd>New SIM card number</dd>\n<dt>movedGroupName</dt><dd>Moved account</dd>\n<dt>subscriberAccountId</dt><dd>Old location</dd>\n<dt>destinationAccount</dt><dd>New location</dd>\n<dt>selectedDuoUiccid</dt><dd>Selected Duo SIM card number</dd>\n<dt>projectId</dt><dd>Project ID</dd>\n<dt>new_fixed_number</dt><dd>New fixed number</dd>\n<dt>new_desk_number</dt><dd>New extension</dd>\n<dt>oldUserGroupName</dt><dd>Previous user group</dd>\n<dt>newUserGroupName</dt><dd>New user group</dd>\n<dt>vpnName</dt><dd>VPN name</dd>\n<dt>deskNumber</dt><dd>Extension</dd>\n<dt>accesspointNameDeskNumber</dt><dd>Extension</dd>\n<dt>mobileAddress</dt><dd>Mobile number</dd>\n<dt>enterpriseName</dt><dd>Enterprise name</dd>\n<dt>enterpriseID</dt><dd>Enterprise ID</dd>\n<dt>mobilityGroupName</dt><dd>Fixed-Mobile PBX name</dd>\n<dt>userGroupName</dt><dd>User group</dd>\n<dt>enterpriseUserGroup</dt><dd>User group</dd>\n<dt>initialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>sipAccountName</dt><dd>SIP account name</dd>\n<dt>accessInstanceAttributeinitialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>accesspointNameQueuePhoneNumber</dt><dd>Queue phone number</dd>\n<dt>accesspointNameSipAccountName</dt><dd>SIP account name</dd>\n<dt>subscriptionAmount</dt><dd>New subscription amount</dd>\n<dt>contract_contact_name</dt><dd>Contract contact person (name)</dd>\n<dt>contract_contact_phone</dt><dd>Contract contact person (phone)</dd>\n<dt>contract_contact_mail</dt><dd>Contract contact person (mail)</dd>\n<dt>financial_contact_name</dt><dd>Financial contact person (name)</dd>\n<dt>financial_contact_phone</dt><dd>Financial contact person (phone)</dd>\n<dt>financial_contact_mail</dt><dd>Financial contact person (mail)</dd>\n<dt>technical_contact_name</dt><dd>Technical contact Person (name)</dd>\n<dt>technical_contact_phone</dt><dd>Technical contact Person (phone)</dd>\n<dt>technical_contact_mail</dt><dd>Technical contact Person (mail)</dd>\n<dt>deviceOption</dt><dd>Device option</dd>\n<dt>deviceType_label</dt><dd>Device type</dd>\n<dt>macAddress</dt><dd>Mac address</dd>\n<dt>deviceName</dt><dd>Device name</dd>\n<dt>sacGroupAccountId_label</dt><dd>Location account</dd>\n<dt>groupId</dt><dd>Location</dd>\n<dt>vGroupMovingToID</dt><dd>New location</dd>\n<dt>pbxName</dt><dd>PBX</dd>\n<dt>groupCitemId_label</dt><dd>Group</dd>\n<dt>Fixed</dt><dd>Alternate fixed number</dd>\n<dt>DeskNumber</dt><dd>Alternate extension</dd>\n<dt>billing_retention_period</dt><dd>Financial data retention period (months)</dd>\n<dt>managedGroupName</dt><dd>Authorized for</dd>\n<dt>subscriptionType</dt><dd>Subscription type</dd>\n<dt>CurrentNetworkOperator</dt><dd>Current network operator</dd>\n<dt>CurrentServiceProvider</dt><dd>Current service provider</dd>\n<dt>Customer_name_at_current_provider</dt><dd>Customer name at current provider</dd>\n<dt>Current_contract_number</dt><dd>Customer number at current provider</dd>\n<dt>UIccId</dt><dd>Current SIM card number</dd>\n<dt>Initials</dt><dd>Initials</dd>\n<dt>FamilyNamePrefix</dt><dd>Family name prefix</dd>\n<dt>FamilyName</dt><dd>Family name</dd>\n<dt>delivery_TT_id</dt><dd>Delivery Track&trace ID</dd>\n<dt>IsAppleDEP</dt><dd>Apple DEP</dd>\n<dt>IsSamsungKNOX</dt><dd>Samsung KNOX</dd>\n<dt>keepCurrentSim</dt><dd>Keep existing SIM card</dd>\n<dt>Note</dt><dd>Note</dd>\n<dt>Porting_wish_date</dt><dd>Preferred transition date</dd>\n<dt>returnReason</dt><dd>Reason for return</dd>\n<dt>returnRemarks</dt><dd>Remarks</dd>\n<dt>companyName</dt><dd>Company name</dd>\n<dt>companyNamePronounciation</dt><dd>Comapny name pronounciation</dd>\n<dt>businessVoiceMailMessageText</dt><dd>Chosen business voicemail message</dd>\n</dl>\n<div>\n<style type=\"text/css\">  dl {\n    display: flex;\n    flex-flow: row wrap;\n  }\n  dt {\n    flex-basis: 20%;\n    text-align: right;\n  }\n  dd {\n    flex-basis: 70%;\n    flex-grow: 1;\n  }\n</style>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_orders_track_and_trace</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "98ec1334-4d93-4102-84cf-d5aa27397ebb",
							"name": "Forbidden",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/track-and-trace/service-requests/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"track-and-trace",
										"service-requests",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "49579379",
											"description": "Service request ID"
										}
									]
								},
								"description": "The possible keys of `attributes` map in response object:<div style='max-height: 400px; overflow: auto; width: 100%'>\n<dl>\n<dt><b>Attribute name</b></dt><dd><b>Meaning</b></dd>\n<dt>login</dt><dd>Login</dd>\n<dt>roles</dt><dd>Roles</dd>\n<dt>firstName</dt><dd>First name</dd>\n<dt>lastName</dt><dd>Last name</dd>\n<dt>surnamePrefix</dt><dd>Surname prefix</dd>\n<dt>email</dt><dd>E-mail</dd>\n<dt>dateOfBirth</dt><dd>Date of birth</dd>\n<dt>vip</dt><dd>VIP</dd>\n<dt>employeeNumber</dt><dd>Employee number</dd>\n<dt>gender</dt><dd>Gender</dd>\n<dt>salutation</dt><dd>Salutation</dd>\n<dt>preferredLanguage</dt><dd>Preferred language</dd>\n<dt>comments</dt><dd>Comments</dd>\n<dt>accesspointNameMSISDN</dt><dd>Mobile number</dd>\n<dt>accesspointNameSIM</dt><dd>SIM card number</dd>\n<dt>accesspointNameIMSI</dt><dd>IMSI</dd>\n<dt>IMEI</dt><dd>IMEI</dd>\n<dt>Hanset_IMEI_number</dt><dd>IMEI</dd>\n<dt>accesspointNameFixedNumber</dt><dd>Fixed Number</dd>\n<dt>activeTo</dt><dd>Active to</dd>\n<dt>contractName</dt><dd>Subscription or device name</dd>\n<dt>totalOnetimePrice</dt><dd>One time price</dd>\n<dt>totalRecurrentPrice</dt><dd>Recurring price</dd>\n<dt>deferredPrice</dt><dd>Deferred price</dd>\n<dt>newUiccId</dt><dd>New SIM card number</dd>\n<dt>movedGroupName</dt><dd>Moved account</dd>\n<dt>subscriberAccountId</dt><dd>Old location</dd>\n<dt>destinationAccount</dt><dd>New location</dd>\n<dt>selectedDuoUiccid</dt><dd>Selected Duo SIM card number</dd>\n<dt>projectId</dt><dd>Project ID</dd>\n<dt>new_fixed_number</dt><dd>New fixed number</dd>\n<dt>new_desk_number</dt><dd>New extension</dd>\n<dt>oldUserGroupName</dt><dd>Previous user group</dd>\n<dt>newUserGroupName</dt><dd>New user group</dd>\n<dt>vpnName</dt><dd>VPN name</dd>\n<dt>deskNumber</dt><dd>Extension</dd>\n<dt>accesspointNameDeskNumber</dt><dd>Extension</dd>\n<dt>mobileAddress</dt><dd>Mobile number</dd>\n<dt>enterpriseName</dt><dd>Enterprise name</dd>\n<dt>enterpriseID</dt><dd>Enterprise ID</dd>\n<dt>mobilityGroupName</dt><dd>Fixed-Mobile PBX name</dd>\n<dt>userGroupName</dt><dd>User group</dd>\n<dt>enterpriseUserGroup</dt><dd>User group</dd>\n<dt>initialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>sipAccountName</dt><dd>SIP account name</dd>\n<dt>accessInstanceAttributeinitialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>accesspointNameQueuePhoneNumber</dt><dd>Queue phone number</dd>\n<dt>accesspointNameSipAccountName</dt><dd>SIP account name</dd>\n<dt>subscriptionAmount</dt><dd>New subscription amount</dd>\n<dt>contract_contact_name</dt><dd>Contract contact person (name)</dd>\n<dt>contract_contact_phone</dt><dd>Contract contact person (phone)</dd>\n<dt>contract_contact_mail</dt><dd>Contract contact person (mail)</dd>\n<dt>financial_contact_name</dt><dd>Financial contact person (name)</dd>\n<dt>financial_contact_phone</dt><dd>Financial contact person (phone)</dd>\n<dt>financial_contact_mail</dt><dd>Financial contact person (mail)</dd>\n<dt>technical_contact_name</dt><dd>Technical contact Person (name)</dd>\n<dt>technical_contact_phone</dt><dd>Technical contact Person (phone)</dd>\n<dt>technical_contact_mail</dt><dd>Technical contact Person (mail)</dd>\n<dt>deviceOption</dt><dd>Device option</dd>\n<dt>deviceType_label</dt><dd>Device type</dd>\n<dt>macAddress</dt><dd>Mac address</dd>\n<dt>deviceName</dt><dd>Device name</dd>\n<dt>sacGroupAccountId_label</dt><dd>Location account</dd>\n<dt>groupId</dt><dd>Location</dd>\n<dt>vGroupMovingToID</dt><dd>New location</dd>\n<dt>pbxName</dt><dd>PBX</dd>\n<dt>groupCitemId_label</dt><dd>Group</dd>\n<dt>Fixed</dt><dd>Alternate fixed number</dd>\n<dt>DeskNumber</dt><dd>Alternate extension</dd>\n<dt>billing_retention_period</dt><dd>Financial data retention period (months)</dd>\n<dt>managedGroupName</dt><dd>Authorized for</dd>\n<dt>subscriptionType</dt><dd>Subscription type</dd>\n<dt>CurrentNetworkOperator</dt><dd>Current network operator</dd>\n<dt>CurrentServiceProvider</dt><dd>Current service provider</dd>\n<dt>Customer_name_at_current_provider</dt><dd>Customer name at current provider</dd>\n<dt>Current_contract_number</dt><dd>Customer number at current provider</dd>\n<dt>UIccId</dt><dd>Current SIM card number</dd>\n<dt>Initials</dt><dd>Initials</dd>\n<dt>FamilyNamePrefix</dt><dd>Family name prefix</dd>\n<dt>FamilyName</dt><dd>Family name</dd>\n<dt>delivery_TT_id</dt><dd>Delivery Track&trace ID</dd>\n<dt>IsAppleDEP</dt><dd>Apple DEP</dd>\n<dt>IsSamsungKNOX</dt><dd>Samsung KNOX</dd>\n<dt>keepCurrentSim</dt><dd>Keep existing SIM card</dd>\n<dt>Note</dt><dd>Note</dd>\n<dt>Porting_wish_date</dt><dd>Preferred transition date</dd>\n<dt>returnReason</dt><dd>Reason for return</dd>\n<dt>returnRemarks</dt><dd>Remarks</dd>\n<dt>companyName</dt><dd>Company name</dd>\n<dt>companyNamePronounciation</dt><dd>Comapny name pronounciation</dd>\n<dt>businessVoiceMailMessageText</dt><dd>Chosen business voicemail message</dd>\n</dl>\n<div>\n<style type=\"text/css\">  dl {\n    display: flex;\n    flex-flow: row wrap;\n  }\n  dt {\n    flex-basis: 20%;\n    text-align: right;\n  }\n  dd {\n    flex-basis: 70%;\n    flex-grow: 1;\n  }\n</style>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_orders_track_and_trace</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "18689065-eee3-4f36-a5c6-67a541ebf897",
							"name": "Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/track-and-trace/service-requests/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"track-and-trace",
										"service-requests",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "49579379",
											"description": "Service request ID"
										}
									]
								},
								"description": "The possible keys of `attributes` map in response object:<div style='max-height: 400px; overflow: auto; width: 100%'>\n<dl>\n<dt><b>Attribute name</b></dt><dd><b>Meaning</b></dd>\n<dt>login</dt><dd>Login</dd>\n<dt>roles</dt><dd>Roles</dd>\n<dt>firstName</dt><dd>First name</dd>\n<dt>lastName</dt><dd>Last name</dd>\n<dt>surnamePrefix</dt><dd>Surname prefix</dd>\n<dt>email</dt><dd>E-mail</dd>\n<dt>dateOfBirth</dt><dd>Date of birth</dd>\n<dt>vip</dt><dd>VIP</dd>\n<dt>employeeNumber</dt><dd>Employee number</dd>\n<dt>gender</dt><dd>Gender</dd>\n<dt>salutation</dt><dd>Salutation</dd>\n<dt>preferredLanguage</dt><dd>Preferred language</dd>\n<dt>comments</dt><dd>Comments</dd>\n<dt>accesspointNameMSISDN</dt><dd>Mobile number</dd>\n<dt>accesspointNameSIM</dt><dd>SIM card number</dd>\n<dt>accesspointNameIMSI</dt><dd>IMSI</dd>\n<dt>IMEI</dt><dd>IMEI</dd>\n<dt>Hanset_IMEI_number</dt><dd>IMEI</dd>\n<dt>accesspointNameFixedNumber</dt><dd>Fixed Number</dd>\n<dt>activeTo</dt><dd>Active to</dd>\n<dt>contractName</dt><dd>Subscription or device name</dd>\n<dt>totalOnetimePrice</dt><dd>One time price</dd>\n<dt>totalRecurrentPrice</dt><dd>Recurring price</dd>\n<dt>deferredPrice</dt><dd>Deferred price</dd>\n<dt>newUiccId</dt><dd>New SIM card number</dd>\n<dt>movedGroupName</dt><dd>Moved account</dd>\n<dt>subscriberAccountId</dt><dd>Old location</dd>\n<dt>destinationAccount</dt><dd>New location</dd>\n<dt>selectedDuoUiccid</dt><dd>Selected Duo SIM card number</dd>\n<dt>projectId</dt><dd>Project ID</dd>\n<dt>new_fixed_number</dt><dd>New fixed number</dd>\n<dt>new_desk_number</dt><dd>New extension</dd>\n<dt>oldUserGroupName</dt><dd>Previous user group</dd>\n<dt>newUserGroupName</dt><dd>New user group</dd>\n<dt>vpnName</dt><dd>VPN name</dd>\n<dt>deskNumber</dt><dd>Extension</dd>\n<dt>accesspointNameDeskNumber</dt><dd>Extension</dd>\n<dt>mobileAddress</dt><dd>Mobile number</dd>\n<dt>enterpriseName</dt><dd>Enterprise name</dd>\n<dt>enterpriseID</dt><dd>Enterprise ID</dd>\n<dt>mobilityGroupName</dt><dd>Fixed-Mobile PBX name</dd>\n<dt>userGroupName</dt><dd>User group</dd>\n<dt>enterpriseUserGroup</dt><dd>User group</dd>\n<dt>initialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>sipAccountName</dt><dd>SIP account name</dd>\n<dt>accessInstanceAttributeinitialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>accesspointNameQueuePhoneNumber</dt><dd>Queue phone number</dd>\n<dt>accesspointNameSipAccountName</dt><dd>SIP account name</dd>\n<dt>subscriptionAmount</dt><dd>New subscription amount</dd>\n<dt>contract_contact_name</dt><dd>Contract contact person (name)</dd>\n<dt>contract_contact_phone</dt><dd>Contract contact person (phone)</dd>\n<dt>contract_contact_mail</dt><dd>Contract contact person (mail)</dd>\n<dt>financial_contact_name</dt><dd>Financial contact person (name)</dd>\n<dt>financial_contact_phone</dt><dd>Financial contact person (phone)</dd>\n<dt>financial_contact_mail</dt><dd>Financial contact person (mail)</dd>\n<dt>technical_contact_name</dt><dd>Technical contact Person (name)</dd>\n<dt>technical_contact_phone</dt><dd>Technical contact Person (phone)</dd>\n<dt>technical_contact_mail</dt><dd>Technical contact Person (mail)</dd>\n<dt>deviceOption</dt><dd>Device option</dd>\n<dt>deviceType_label</dt><dd>Device type</dd>\n<dt>macAddress</dt><dd>Mac address</dd>\n<dt>deviceName</dt><dd>Device name</dd>\n<dt>sacGroupAccountId_label</dt><dd>Location account</dd>\n<dt>groupId</dt><dd>Location</dd>\n<dt>vGroupMovingToID</dt><dd>New location</dd>\n<dt>pbxName</dt><dd>PBX</dd>\n<dt>groupCitemId_label</dt><dd>Group</dd>\n<dt>Fixed</dt><dd>Alternate fixed number</dd>\n<dt>DeskNumber</dt><dd>Alternate extension</dd>\n<dt>billing_retention_period</dt><dd>Financial data retention period (months)</dd>\n<dt>managedGroupName</dt><dd>Authorized for</dd>\n<dt>subscriptionType</dt><dd>Subscription type</dd>\n<dt>CurrentNetworkOperator</dt><dd>Current network operator</dd>\n<dt>CurrentServiceProvider</dt><dd>Current service provider</dd>\n<dt>Customer_name_at_current_provider</dt><dd>Customer name at current provider</dd>\n<dt>Current_contract_number</dt><dd>Customer number at current provider</dd>\n<dt>UIccId</dt><dd>Current SIM card number</dd>\n<dt>Initials</dt><dd>Initials</dd>\n<dt>FamilyNamePrefix</dt><dd>Family name prefix</dd>\n<dt>FamilyName</dt><dd>Family name</dd>\n<dt>delivery_TT_id</dt><dd>Delivery Track&trace ID</dd>\n<dt>IsAppleDEP</dt><dd>Apple DEP</dd>\n<dt>IsSamsungKNOX</dt><dd>Samsung KNOX</dd>\n<dt>keepCurrentSim</dt><dd>Keep existing SIM card</dd>\n<dt>Note</dt><dd>Note</dd>\n<dt>Porting_wish_date</dt><dd>Preferred transition date</dd>\n<dt>returnReason</dt><dd>Reason for return</dd>\n<dt>returnRemarks</dt><dd>Remarks</dd>\n<dt>companyName</dt><dd>Company name</dd>\n<dt>companyNamePronounciation</dt><dd>Comapny name pronounciation</dd>\n<dt>businessVoiceMailMessageText</dt><dd>Chosen business voicemail message</dd>\n</dl>\n<div>\n<style type=\"text/css\">  dl {\n    display: flex;\n    flex-flow: row wrap;\n  }\n  dt {\n    flex-basis: 20%;\n    text-align: right;\n  }\n  dd {\n    flex-basis: 70%;\n    flex-grow: 1;\n  }\n</style>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_orders_track_and_trace</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "fe01b38e-eaf2-4682-9cff-44d3aed471b8",
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/track-and-trace/service-requests/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"track-and-trace",
										"service-requests",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "49579379",
											"description": "Service request ID"
										}
									]
								},
								"description": "The possible keys of `attributes` map in response object:<div style='max-height: 400px; overflow: auto; width: 100%'>\n<dl>\n<dt><b>Attribute name</b></dt><dd><b>Meaning</b></dd>\n<dt>login</dt><dd>Login</dd>\n<dt>roles</dt><dd>Roles</dd>\n<dt>firstName</dt><dd>First name</dd>\n<dt>lastName</dt><dd>Last name</dd>\n<dt>surnamePrefix</dt><dd>Surname prefix</dd>\n<dt>email</dt><dd>E-mail</dd>\n<dt>dateOfBirth</dt><dd>Date of birth</dd>\n<dt>vip</dt><dd>VIP</dd>\n<dt>employeeNumber</dt><dd>Employee number</dd>\n<dt>gender</dt><dd>Gender</dd>\n<dt>salutation</dt><dd>Salutation</dd>\n<dt>preferredLanguage</dt><dd>Preferred language</dd>\n<dt>comments</dt><dd>Comments</dd>\n<dt>accesspointNameMSISDN</dt><dd>Mobile number</dd>\n<dt>accesspointNameSIM</dt><dd>SIM card number</dd>\n<dt>accesspointNameIMSI</dt><dd>IMSI</dd>\n<dt>IMEI</dt><dd>IMEI</dd>\n<dt>Hanset_IMEI_number</dt><dd>IMEI</dd>\n<dt>accesspointNameFixedNumber</dt><dd>Fixed Number</dd>\n<dt>activeTo</dt><dd>Active to</dd>\n<dt>contractName</dt><dd>Subscription or device name</dd>\n<dt>totalOnetimePrice</dt><dd>One time price</dd>\n<dt>totalRecurrentPrice</dt><dd>Recurring price</dd>\n<dt>deferredPrice</dt><dd>Deferred price</dd>\n<dt>newUiccId</dt><dd>New SIM card number</dd>\n<dt>movedGroupName</dt><dd>Moved account</dd>\n<dt>subscriberAccountId</dt><dd>Old location</dd>\n<dt>destinationAccount</dt><dd>New location</dd>\n<dt>selectedDuoUiccid</dt><dd>Selected Duo SIM card number</dd>\n<dt>projectId</dt><dd>Project ID</dd>\n<dt>new_fixed_number</dt><dd>New fixed number</dd>\n<dt>new_desk_number</dt><dd>New extension</dd>\n<dt>oldUserGroupName</dt><dd>Previous user group</dd>\n<dt>newUserGroupName</dt><dd>New user group</dd>\n<dt>vpnName</dt><dd>VPN name</dd>\n<dt>deskNumber</dt><dd>Extension</dd>\n<dt>accesspointNameDeskNumber</dt><dd>Extension</dd>\n<dt>mobileAddress</dt><dd>Mobile number</dd>\n<dt>enterpriseName</dt><dd>Enterprise name</dd>\n<dt>enterpriseID</dt><dd>Enterprise ID</dd>\n<dt>mobilityGroupName</dt><dd>Fixed-Mobile PBX name</dd>\n<dt>userGroupName</dt><dd>User group</dd>\n<dt>enterpriseUserGroup</dt><dd>User group</dd>\n<dt>initialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>sipAccountName</dt><dd>SIP account name</dd>\n<dt>accessInstanceAttributeinitialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>accesspointNameQueuePhoneNumber</dt><dd>Queue phone number</dd>\n<dt>accesspointNameSipAccountName</dt><dd>SIP account name</dd>\n<dt>subscriptionAmount</dt><dd>New subscription amount</dd>\n<dt>contract_contact_name</dt><dd>Contract contact person (name)</dd>\n<dt>contract_contact_phone</dt><dd>Contract contact person (phone)</dd>\n<dt>contract_contact_mail</dt><dd>Contract contact person (mail)</dd>\n<dt>financial_contact_name</dt><dd>Financial contact person (name)</dd>\n<dt>financial_contact_phone</dt><dd>Financial contact person (phone)</dd>\n<dt>financial_contact_mail</dt><dd>Financial contact person (mail)</dd>\n<dt>technical_contact_name</dt><dd>Technical contact Person (name)</dd>\n<dt>technical_contact_phone</dt><dd>Technical contact Person (phone)</dd>\n<dt>technical_contact_mail</dt><dd>Technical contact Person (mail)</dd>\n<dt>deviceOption</dt><dd>Device option</dd>\n<dt>deviceType_label</dt><dd>Device type</dd>\n<dt>macAddress</dt><dd>Mac address</dd>\n<dt>deviceName</dt><dd>Device name</dd>\n<dt>sacGroupAccountId_label</dt><dd>Location account</dd>\n<dt>groupId</dt><dd>Location</dd>\n<dt>vGroupMovingToID</dt><dd>New location</dd>\n<dt>pbxName</dt><dd>PBX</dd>\n<dt>groupCitemId_label</dt><dd>Group</dd>\n<dt>Fixed</dt><dd>Alternate fixed number</dd>\n<dt>DeskNumber</dt><dd>Alternate extension</dd>\n<dt>billing_retention_period</dt><dd>Financial data retention period (months)</dd>\n<dt>managedGroupName</dt><dd>Authorized for</dd>\n<dt>subscriptionType</dt><dd>Subscription type</dd>\n<dt>CurrentNetworkOperator</dt><dd>Current network operator</dd>\n<dt>CurrentServiceProvider</dt><dd>Current service provider</dd>\n<dt>Customer_name_at_current_provider</dt><dd>Customer name at current provider</dd>\n<dt>Current_contract_number</dt><dd>Customer number at current provider</dd>\n<dt>UIccId</dt><dd>Current SIM card number</dd>\n<dt>Initials</dt><dd>Initials</dd>\n<dt>FamilyNamePrefix</dt><dd>Family name prefix</dd>\n<dt>FamilyName</dt><dd>Family name</dd>\n<dt>delivery_TT_id</dt><dd>Delivery Track&trace ID</dd>\n<dt>IsAppleDEP</dt><dd>Apple DEP</dd>\n<dt>IsSamsungKNOX</dt><dd>Samsung KNOX</dd>\n<dt>keepCurrentSim</dt><dd>Keep existing SIM card</dd>\n<dt>Note</dt><dd>Note</dd>\n<dt>Porting_wish_date</dt><dd>Preferred transition date</dd>\n<dt>returnReason</dt><dd>Reason for return</dd>\n<dt>returnRemarks</dt><dd>Remarks</dd>\n<dt>companyName</dt><dd>Company name</dd>\n<dt>companyNamePronounciation</dt><dd>Comapny name pronounciation</dd>\n<dt>businessVoiceMailMessageText</dt><dd>Chosen business voicemail message</dd>\n</dl>\n<div>\n<style type=\"text/css\">  dl {\n    display: flex;\n    flex-flow: row wrap;\n  }\n  dt {\n    flex-basis: 20%;\n    text-align: right;\n  }\n  dd {\n    flex-basis: 70%;\n    flex-grow: 1;\n  }\n</style>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_orders_track_and_trace</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "275302a9-c587-4c84-96f4-889f9439b26f",
							"name": "Server Error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/track-and-trace/service-requests/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"track-and-trace",
										"service-requests",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "49579379",
											"description": "Service request ID"
										}
									]
								},
								"description": "The possible keys of `attributes` map in response object:<div style='max-height: 400px; overflow: auto; width: 100%'>\n<dl>\n<dt><b>Attribute name</b></dt><dd><b>Meaning</b></dd>\n<dt>login</dt><dd>Login</dd>\n<dt>roles</dt><dd>Roles</dd>\n<dt>firstName</dt><dd>First name</dd>\n<dt>lastName</dt><dd>Last name</dd>\n<dt>surnamePrefix</dt><dd>Surname prefix</dd>\n<dt>email</dt><dd>E-mail</dd>\n<dt>dateOfBirth</dt><dd>Date of birth</dd>\n<dt>vip</dt><dd>VIP</dd>\n<dt>employeeNumber</dt><dd>Employee number</dd>\n<dt>gender</dt><dd>Gender</dd>\n<dt>salutation</dt><dd>Salutation</dd>\n<dt>preferredLanguage</dt><dd>Preferred language</dd>\n<dt>comments</dt><dd>Comments</dd>\n<dt>accesspointNameMSISDN</dt><dd>Mobile number</dd>\n<dt>accesspointNameSIM</dt><dd>SIM card number</dd>\n<dt>accesspointNameIMSI</dt><dd>IMSI</dd>\n<dt>IMEI</dt><dd>IMEI</dd>\n<dt>Hanset_IMEI_number</dt><dd>IMEI</dd>\n<dt>accesspointNameFixedNumber</dt><dd>Fixed Number</dd>\n<dt>activeTo</dt><dd>Active to</dd>\n<dt>contractName</dt><dd>Subscription or device name</dd>\n<dt>totalOnetimePrice</dt><dd>One time price</dd>\n<dt>totalRecurrentPrice</dt><dd>Recurring price</dd>\n<dt>deferredPrice</dt><dd>Deferred price</dd>\n<dt>newUiccId</dt><dd>New SIM card number</dd>\n<dt>movedGroupName</dt><dd>Moved account</dd>\n<dt>subscriberAccountId</dt><dd>Old location</dd>\n<dt>destinationAccount</dt><dd>New location</dd>\n<dt>selectedDuoUiccid</dt><dd>Selected Duo SIM card number</dd>\n<dt>projectId</dt><dd>Project ID</dd>\n<dt>new_fixed_number</dt><dd>New fixed number</dd>\n<dt>new_desk_number</dt><dd>New extension</dd>\n<dt>oldUserGroupName</dt><dd>Previous user group</dd>\n<dt>newUserGroupName</dt><dd>New user group</dd>\n<dt>vpnName</dt><dd>VPN name</dd>\n<dt>deskNumber</dt><dd>Extension</dd>\n<dt>accesspointNameDeskNumber</dt><dd>Extension</dd>\n<dt>mobileAddress</dt><dd>Mobile number</dd>\n<dt>enterpriseName</dt><dd>Enterprise name</dd>\n<dt>enterpriseID</dt><dd>Enterprise ID</dd>\n<dt>mobilityGroupName</dt><dd>Fixed-Mobile PBX name</dd>\n<dt>userGroupName</dt><dd>User group</dd>\n<dt>enterpriseUserGroup</dt><dd>User group</dd>\n<dt>initialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>sipAccountName</dt><dd>SIP account name</dd>\n<dt>accessInstanceAttributeinitialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>accesspointNameQueuePhoneNumber</dt><dd>Queue phone number</dd>\n<dt>accesspointNameSipAccountName</dt><dd>SIP account name</dd>\n<dt>subscriptionAmount</dt><dd>New subscription amount</dd>\n<dt>contract_contact_name</dt><dd>Contract contact person (name)</dd>\n<dt>contract_contact_phone</dt><dd>Contract contact person (phone)</dd>\n<dt>contract_contact_mail</dt><dd>Contract contact person (mail)</dd>\n<dt>financial_contact_name</dt><dd>Financial contact person (name)</dd>\n<dt>financial_contact_phone</dt><dd>Financial contact person (phone)</dd>\n<dt>financial_contact_mail</dt><dd>Financial contact person (mail)</dd>\n<dt>technical_contact_name</dt><dd>Technical contact Person (name)</dd>\n<dt>technical_contact_phone</dt><dd>Technical contact Person (phone)</dd>\n<dt>technical_contact_mail</dt><dd>Technical contact Person (mail)</dd>\n<dt>deviceOption</dt><dd>Device option</dd>\n<dt>deviceType_label</dt><dd>Device type</dd>\n<dt>macAddress</dt><dd>Mac address</dd>\n<dt>deviceName</dt><dd>Device name</dd>\n<dt>sacGroupAccountId_label</dt><dd>Location account</dd>\n<dt>groupId</dt><dd>Location</dd>\n<dt>vGroupMovingToID</dt><dd>New location</dd>\n<dt>pbxName</dt><dd>PBX</dd>\n<dt>groupCitemId_label</dt><dd>Group</dd>\n<dt>Fixed</dt><dd>Alternate fixed number</dd>\n<dt>DeskNumber</dt><dd>Alternate extension</dd>\n<dt>billing_retention_period</dt><dd>Financial data retention period (months)</dd>\n<dt>managedGroupName</dt><dd>Authorized for</dd>\n<dt>subscriptionType</dt><dd>Subscription type</dd>\n<dt>CurrentNetworkOperator</dt><dd>Current network operator</dd>\n<dt>CurrentServiceProvider</dt><dd>Current service provider</dd>\n<dt>Customer_name_at_current_provider</dt><dd>Customer name at current provider</dd>\n<dt>Current_contract_number</dt><dd>Customer number at current provider</dd>\n<dt>UIccId</dt><dd>Current SIM card number</dd>\n<dt>Initials</dt><dd>Initials</dd>\n<dt>FamilyNamePrefix</dt><dd>Family name prefix</dd>\n<dt>FamilyName</dt><dd>Family name</dd>\n<dt>delivery_TT_id</dt><dd>Delivery Track&trace ID</dd>\n<dt>IsAppleDEP</dt><dd>Apple DEP</dd>\n<dt>IsSamsungKNOX</dt><dd>Samsung KNOX</dd>\n<dt>keepCurrentSim</dt><dd>Keep existing SIM card</dd>\n<dt>Note</dt><dd>Note</dd>\n<dt>Porting_wish_date</dt><dd>Preferred transition date</dd>\n<dt>returnReason</dt><dd>Reason for return</dd>\n<dt>returnRemarks</dt><dd>Remarks</dd>\n<dt>companyName</dt><dd>Company name</dd>\n<dt>companyNamePronounciation</dt><dd>Comapny name pronounciation</dd>\n<dt>businessVoiceMailMessageText</dt><dd>Chosen business voicemail message</dd>\n</dl>\n<div>\n<style type=\"text/css\">  dl {\n    display: flex;\n    flex-flow: row wrap;\n  }\n  dt {\n    flex-basis: 20%;\n    text-align: right;\n  }\n  dd {\n    flex-basis: 70%;\n    flex-grow: 1;\n  }\n</style>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_orders_track_and_trace</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "22ed2113-1286-49b8-ad0a-6477e6843f98",
							"name": "Service Unavailable",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/track-and-trace/service-requests/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"track-and-trace",
										"service-requests",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "49579379",
											"description": "Service request ID"
										}
									]
								},
								"description": "The possible keys of `attributes` map in response object:<div style='max-height: 400px; overflow: auto; width: 100%'>\n<dl>\n<dt><b>Attribute name</b></dt><dd><b>Meaning</b></dd>\n<dt>login</dt><dd>Login</dd>\n<dt>roles</dt><dd>Roles</dd>\n<dt>firstName</dt><dd>First name</dd>\n<dt>lastName</dt><dd>Last name</dd>\n<dt>surnamePrefix</dt><dd>Surname prefix</dd>\n<dt>email</dt><dd>E-mail</dd>\n<dt>dateOfBirth</dt><dd>Date of birth</dd>\n<dt>vip</dt><dd>VIP</dd>\n<dt>employeeNumber</dt><dd>Employee number</dd>\n<dt>gender</dt><dd>Gender</dd>\n<dt>salutation</dt><dd>Salutation</dd>\n<dt>preferredLanguage</dt><dd>Preferred language</dd>\n<dt>comments</dt><dd>Comments</dd>\n<dt>accesspointNameMSISDN</dt><dd>Mobile number</dd>\n<dt>accesspointNameSIM</dt><dd>SIM card number</dd>\n<dt>accesspointNameIMSI</dt><dd>IMSI</dd>\n<dt>IMEI</dt><dd>IMEI</dd>\n<dt>Hanset_IMEI_number</dt><dd>IMEI</dd>\n<dt>accesspointNameFixedNumber</dt><dd>Fixed Number</dd>\n<dt>activeTo</dt><dd>Active to</dd>\n<dt>contractName</dt><dd>Subscription or device name</dd>\n<dt>totalOnetimePrice</dt><dd>One time price</dd>\n<dt>totalRecurrentPrice</dt><dd>Recurring price</dd>\n<dt>deferredPrice</dt><dd>Deferred price</dd>\n<dt>newUiccId</dt><dd>New SIM card number</dd>\n<dt>movedGroupName</dt><dd>Moved account</dd>\n<dt>subscriberAccountId</dt><dd>Old location</dd>\n<dt>destinationAccount</dt><dd>New location</dd>\n<dt>selectedDuoUiccid</dt><dd>Selected Duo SIM card number</dd>\n<dt>projectId</dt><dd>Project ID</dd>\n<dt>new_fixed_number</dt><dd>New fixed number</dd>\n<dt>new_desk_number</dt><dd>New extension</dd>\n<dt>oldUserGroupName</dt><dd>Previous user group</dd>\n<dt>newUserGroupName</dt><dd>New user group</dd>\n<dt>vpnName</dt><dd>VPN name</dd>\n<dt>deskNumber</dt><dd>Extension</dd>\n<dt>accesspointNameDeskNumber</dt><dd>Extension</dd>\n<dt>mobileAddress</dt><dd>Mobile number</dd>\n<dt>enterpriseName</dt><dd>Enterprise name</dd>\n<dt>enterpriseID</dt><dd>Enterprise ID</dd>\n<dt>mobilityGroupName</dt><dd>Fixed-Mobile PBX name</dd>\n<dt>userGroupName</dt><dd>User group</dd>\n<dt>enterpriseUserGroup</dt><dd>User group</dd>\n<dt>initialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>sipAccountName</dt><dd>SIP account name</dd>\n<dt>accessInstanceAttributeinitialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>accesspointNameQueuePhoneNumber</dt><dd>Queue phone number</dd>\n<dt>accesspointNameSipAccountName</dt><dd>SIP account name</dd>\n<dt>subscriptionAmount</dt><dd>New subscription amount</dd>\n<dt>contract_contact_name</dt><dd>Contract contact person (name)</dd>\n<dt>contract_contact_phone</dt><dd>Contract contact person (phone)</dd>\n<dt>contract_contact_mail</dt><dd>Contract contact person (mail)</dd>\n<dt>financial_contact_name</dt><dd>Financial contact person (name)</dd>\n<dt>financial_contact_phone</dt><dd>Financial contact person (phone)</dd>\n<dt>financial_contact_mail</dt><dd>Financial contact person (mail)</dd>\n<dt>technical_contact_name</dt><dd>Technical contact Person (name)</dd>\n<dt>technical_contact_phone</dt><dd>Technical contact Person (phone)</dd>\n<dt>technical_contact_mail</dt><dd>Technical contact Person (mail)</dd>\n<dt>deviceOption</dt><dd>Device option</dd>\n<dt>deviceType_label</dt><dd>Device type</dd>\n<dt>macAddress</dt><dd>Mac address</dd>\n<dt>deviceName</dt><dd>Device name</dd>\n<dt>sacGroupAccountId_label</dt><dd>Location account</dd>\n<dt>groupId</dt><dd>Location</dd>\n<dt>vGroupMovingToID</dt><dd>New location</dd>\n<dt>pbxName</dt><dd>PBX</dd>\n<dt>groupCitemId_label</dt><dd>Group</dd>\n<dt>Fixed</dt><dd>Alternate fixed number</dd>\n<dt>DeskNumber</dt><dd>Alternate extension</dd>\n<dt>billing_retention_period</dt><dd>Financial data retention period (months)</dd>\n<dt>managedGroupName</dt><dd>Authorized for</dd>\n<dt>subscriptionType</dt><dd>Subscription type</dd>\n<dt>CurrentNetworkOperator</dt><dd>Current network operator</dd>\n<dt>CurrentServiceProvider</dt><dd>Current service provider</dd>\n<dt>Customer_name_at_current_provider</dt><dd>Customer name at current provider</dd>\n<dt>Current_contract_number</dt><dd>Customer number at current provider</dd>\n<dt>UIccId</dt><dd>Current SIM card number</dd>\n<dt>Initials</dt><dd>Initials</dd>\n<dt>FamilyNamePrefix</dt><dd>Family name prefix</dd>\n<dt>FamilyName</dt><dd>Family name</dd>\n<dt>delivery_TT_id</dt><dd>Delivery Track&trace ID</dd>\n<dt>IsAppleDEP</dt><dd>Apple DEP</dd>\n<dt>IsSamsungKNOX</dt><dd>Samsung KNOX</dd>\n<dt>keepCurrentSim</dt><dd>Keep existing SIM card</dd>\n<dt>Note</dt><dd>Note</dd>\n<dt>Porting_wish_date</dt><dd>Preferred transition date</dd>\n<dt>returnReason</dt><dd>Reason for return</dd>\n<dt>returnRemarks</dt><dd>Remarks</dd>\n<dt>companyName</dt><dd>Company name</dd>\n<dt>companyNamePronounciation</dt><dd>Comapny name pronounciation</dd>\n<dt>businessVoiceMailMessageText</dt><dd>Chosen business voicemail message</dd>\n</dl>\n<div>\n<style type=\"text/css\">  dl {\n    display: flex;\n    flex-flow: row wrap;\n  }\n  dt {\n    flex-basis: 20%;\n    text-align: right;\n  }\n  dd {\n    flex-basis: 70%;\n    flex-grow: 1;\n  }\n</style>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_orders_track_and_trace</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			],
			"id": "ddc99fda-ef8c-445c-ad9d-78b7379eb276",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "5f90ebf1-9537-4084-97d8-91fda547a308",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "d7a86fb3-22a1-4070-98ec-d61b7919c69e",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "05 - Change User Data",
			"item": [
				{
					"name": "1: Find all subscribers whom user manages",
					"id": "82b3c9d2-597d-4ad4-a196-d801e818091d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/hierarchy/subscribers",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"hierarchy",
								"subscribers"
							]
						},
						"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
					},
					"response": [
						{
							"id": "291ffc70-cd1e-4ab1-b4d8-b4fdb366b7cf",
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hierarchy/subscribers",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"subscribers"
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "2ef2f9ab-2783-46c9-9873-f81523772ea6",
							"name": "Bad Request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hierarchy/subscribers",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"subscribers"
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "d849d195-298c-4887-b1f5-f87e035ec45c",
							"name": "Unauthorized",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hierarchy/subscribers",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"subscribers"
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "bac14f79-6289-4e34-a390-25ef579852ee",
							"name": "Forbidden",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hierarchy/subscribers",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"subscribers"
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "e7633e45-76ca-4264-bcd9-c81dfa5c6ce5",
							"name": "Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hierarchy/subscribers",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"subscribers"
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "37a2370f-d6ec-4946-a9de-3bb13fed3dc1",
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hierarchy/subscribers",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"subscribers"
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "9c155e73-ce8b-43bf-bd1c-6051662212a9",
							"name": "Server Error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hierarchy/subscribers",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"subscribers"
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "70c3dff8-0c78-4f3f-9604-0700bb695dd2",
							"name": "Service Unavailable",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hierarchy/subscribers",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"subscribers"
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "2: Get subscriber details",
					"id": "e3573cc9-3a5c-4251-91cd-3255504a2567",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/hierarchy/subscribers/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"hierarchy",
								"subscribers",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "14092066",
									"description": "(Required) id"
								}
							]
						},
						"description": "Operations availability will be removed. Please use 'subscribers/{id}/operations' instead\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
					},
					"response": [
						{
							"id": "0271be74-9d0e-45e1-8af3-2e12fcd4115d",
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hierarchy/subscribers/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"subscribers",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "14092066",
											"description": "(Required) id"
										}
									]
								},
								"description": "Operations availability will be removed. Please use 'subscribers/{id}/operations' instead\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "836e19a9-c34e-4646-a61f-f0e1a32832ec",
							"name": "Bad Request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hierarchy/subscribers/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"subscribers",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "14092066",
											"description": "(Required) id"
										}
									]
								},
								"description": "Operations availability will be removed. Please use 'subscribers/{id}/operations' instead\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "84dd096d-b125-4ab2-8a7c-c603f8966c2a",
							"name": "Unauthorized",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hierarchy/subscribers/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"subscribers",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "14092066",
											"description": "(Required) id"
										}
									]
								},
								"description": "Operations availability will be removed. Please use 'subscribers/{id}/operations' instead\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "733d8ae6-c404-4930-b5ba-a1867ecc123f",
							"name": "Forbidden",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hierarchy/subscribers/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"subscribers",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "14092066",
											"description": "(Required) id"
										}
									]
								},
								"description": "Operations availability will be removed. Please use 'subscribers/{id}/operations' instead\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "4402ae62-a2f9-48a8-9e92-878fd39da7d0",
							"name": "Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hierarchy/subscribers/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"subscribers",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "14092066",
											"description": "(Required) id"
										}
									]
								},
								"description": "Operations availability will be removed. Please use 'subscribers/{id}/operations' instead\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "153fe9ff-3a20-4b3b-991c-9dda38a11e17",
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hierarchy/subscribers/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"subscribers",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "14092066",
											"description": "(Required) id"
										}
									]
								},
								"description": "Operations availability will be removed. Please use 'subscribers/{id}/operations' instead\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "490f84e3-0726-43d2-9dbf-193dcd037705",
							"name": "Server Error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hierarchy/subscribers/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"subscribers",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "14092066",
											"description": "(Required) id"
										}
									]
								},
								"description": "Operations availability will be removed. Please use 'subscribers/{id}/operations' instead\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "776e0303-2600-4a93-98c7-35626f85a92b",
							"name": "Service Unavailable",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hierarchy/subscribers/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"subscribers",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "14092066",
											"description": "(Required) id"
										}
									]
								},
								"description": "Operations availability will be removed. Please use 'subscribers/{id}/operations' instead\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "3: Get subscriber operations availability",
					"id": "6cd8dbba-773d-4a0f-977f-f42fed810398",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/hierarchy/subscribers/:id/operations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"hierarchy",
								"subscribers",
								":id",
								"operations"
							],
							"variable": [
								{
									"key": "id",
									"value": "14092066",
									"description": "subscriberID"
								}
							]
						},
						"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
					},
					"response": [
						{
							"id": "57fcd60b-e719-41c1-b849-d76cb40d67cb",
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hierarchy/subscribers/:id/operations",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"subscribers",
										":id",
										"operations"
									],
									"variable": [
										{
											"key": "id",
											"value": "14092066",
											"description": "subscriberID"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "1cfd02da-c400-4df6-ab97-a32903fa7f9f",
							"name": "Bad Request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hierarchy/subscribers/:id/operations",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"subscribers",
										":id",
										"operations"
									],
									"variable": [
										{
											"key": "id",
											"value": "14092066",
											"description": "subscriberID"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "d5c9d437-5c6a-430b-bf34-1439dd5176c5",
							"name": "Unauthorized",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hierarchy/subscribers/:id/operations",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"subscribers",
										":id",
										"operations"
									],
									"variable": [
										{
											"key": "id",
											"value": "14092066",
											"description": "subscriberID"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "2dfda0a4-58f6-40ad-9705-094cbefff4a3",
							"name": "Forbidden",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hierarchy/subscribers/:id/operations",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"subscribers",
										":id",
										"operations"
									],
									"variable": [
										{
											"key": "id",
											"value": "14092066",
											"description": "subscriberID"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "24b9e85b-a1cb-4cbf-8848-3a3c73418779",
							"name": "Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hierarchy/subscribers/:id/operations",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"subscribers",
										":id",
										"operations"
									],
									"variable": [
										{
											"key": "id",
											"value": "14092066",
											"description": "subscriberID"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "c36d569c-9661-4a30-b88d-3bdc56ffbccf",
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hierarchy/subscribers/:id/operations",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"subscribers",
										":id",
										"operations"
									],
									"variable": [
										{
											"key": "id",
											"value": "14092066",
											"description": "subscriberID"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "d26224e3-7540-46b8-9a0d-e61711907308",
							"name": "Server Error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hierarchy/subscribers/:id/operations",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"subscribers",
										":id",
										"operations"
									],
									"variable": [
										{
											"key": "id",
											"value": "14092066",
											"description": "subscriberID"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "e0f56b01-9cf5-410c-b46a-a5c4a59c8c49",
							"name": "Service Unavailable",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hierarchy/subscribers/:id/operations",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"subscribers",
										":id",
										"operations"
									],
									"variable": [
										{
											"key": "id",
											"value": "14092066",
											"description": "subscriberID"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "4: Update subscriber",
					"id": "e428aaa6-49b8-4209-b6ad-19df55d63f1b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"referenceNumber\": \"Free feild for tracking \",\n    \"subscriber\": {\n        \"surname\": \"quis sit\",\n        \"comments\": \"exercitation ut\",\n        \"email\": \"dolor@Excepteur.odor\",\n        \"employeeNumber\": \"ut incididunt enim tempor nostrud\",\n        \"firstName\": \"dolor\",\n        \"fixedNumber\": \"0612345678\",\n        \"gender\": \"OTHER\",\n        \"mobileNumber\": \"0612345677\",\n        \"preferredLanguage\": \"NL\",\n        \"surnamePrefix\": \"non irure officia sint\",\n        \"vip\": false\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/hierarchy/subscribers/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"hierarchy",
								"subscribers",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "14092066"
								}
							]
						},
						"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
					},
					"response": [
						{
							"id": "cce107e9-1e58-4de7-beac-0b99f053c0f4",
							"name": "OK",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"referenceNumber\": \"Free feild for tracking \",\n    \"subscriber\": {\n        \"surname\": \"quis sit\",\n        \"comments\": \"exercitation ut\",\n        \"email\": \"dolor@Excepteur.odor\",\n        \"employeeNumber\": \"ut incididunt enim tempor nostrud\",\n        \"firstName\": \"dolor\",\n        \"fixedNumber\": \"0612345678\",\n        \"gender\": \"OTHER\",\n        \"mobileNumber\": \"0612345677\",\n        \"preferredLanguage\": \"NL\",\n        \"surnamePrefix\": \"non irure officia sint\",\n        \"vip\": false\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/hierarchy/subscribers/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"subscribers",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "14092066"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "4b14e37f-9cc1-4394-b43b-aece6a77b31e",
							"name": "Bad Request",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"referenceNumber\": \"Free feild for tracking \",\n    \"subscriber\": {\n        \"surname\": \"quis sit\",\n        \"comments\": \"exercitation ut\",\n        \"email\": \"dolor@Excepteur.odor\",\n        \"employeeNumber\": \"ut incididunt enim tempor nostrud\",\n        \"firstName\": \"dolor\",\n        \"fixedNumber\": \"0612345678\",\n        \"gender\": \"OTHER\",\n        \"mobileNumber\": \"0612345677\",\n        \"preferredLanguage\": \"NL\",\n        \"surnamePrefix\": \"non irure officia sint\",\n        \"vip\": false\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/hierarchy/subscribers/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"subscribers",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "14092066"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "b50bca95-b71d-43a6-8b4d-20350480bd17",
							"name": "Unauthorized",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"referenceNumber\": \"Free feild for tracking \",\n    \"subscriber\": {\n        \"surname\": \"quis sit\",\n        \"comments\": \"exercitation ut\",\n        \"email\": \"dolor@Excepteur.odor\",\n        \"employeeNumber\": \"ut incididunt enim tempor nostrud\",\n        \"firstName\": \"dolor\",\n        \"fixedNumber\": \"0612345678\",\n        \"gender\": \"OTHER\",\n        \"mobileNumber\": \"0612345677\",\n        \"preferredLanguage\": \"NL\",\n        \"surnamePrefix\": \"non irure officia sint\",\n        \"vip\": false\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/hierarchy/subscribers/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"subscribers",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "14092066"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "c2890d2d-c3d8-4696-b78d-03934a3c5c1a",
							"name": "Forbidden",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"referenceNumber\": \"Free feild for tracking \",\n    \"subscriber\": {\n        \"surname\": \"quis sit\",\n        \"comments\": \"exercitation ut\",\n        \"email\": \"dolor@Excepteur.odor\",\n        \"employeeNumber\": \"ut incididunt enim tempor nostrud\",\n        \"firstName\": \"dolor\",\n        \"fixedNumber\": \"0612345678\",\n        \"gender\": \"OTHER\",\n        \"mobileNumber\": \"0612345677\",\n        \"preferredLanguage\": \"NL\",\n        \"surnamePrefix\": \"non irure officia sint\",\n        \"vip\": false\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/hierarchy/subscribers/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"subscribers",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "14092066"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "f7df61fe-240b-4c3e-a4ee-3a39ba2f70db",
							"name": "Not Found",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"referenceNumber\": \"Free feild for tracking \",\n    \"subscriber\": {\n        \"surname\": \"quis sit\",\n        \"comments\": \"exercitation ut\",\n        \"email\": \"dolor@Excepteur.odor\",\n        \"employeeNumber\": \"ut incididunt enim tempor nostrud\",\n        \"firstName\": \"dolor\",\n        \"fixedNumber\": \"0612345678\",\n        \"gender\": \"OTHER\",\n        \"mobileNumber\": \"0612345677\",\n        \"preferredLanguage\": \"NL\",\n        \"surnamePrefix\": \"non irure officia sint\",\n        \"vip\": false\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/hierarchy/subscribers/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"subscribers",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "14092066"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "5a0e4547-68db-49ee-be54-4b512f75e7c5",
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"referenceNumber\": \"Free feild for tracking \",\n    \"subscriber\": {\n        \"surname\": \"quis sit\",\n        \"comments\": \"exercitation ut\",\n        \"email\": \"dolor@Excepteur.odor\",\n        \"employeeNumber\": \"ut incididunt enim tempor nostrud\",\n        \"firstName\": \"dolor\",\n        \"fixedNumber\": \"0612345678\",\n        \"gender\": \"OTHER\",\n        \"mobileNumber\": \"0612345677\",\n        \"preferredLanguage\": \"NL\",\n        \"surnamePrefix\": \"non irure officia sint\",\n        \"vip\": false\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/hierarchy/subscribers/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"subscribers",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "14092066"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "e90bcfa5-3543-4db5-bf3a-cd3fb41b31da",
							"name": "Server Error",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"referenceNumber\": \"Free feild for tracking \",\n    \"subscriber\": {\n        \"surname\": \"quis sit\",\n        \"comments\": \"exercitation ut\",\n        \"email\": \"dolor@Excepteur.odor\",\n        \"employeeNumber\": \"ut incididunt enim tempor nostrud\",\n        \"firstName\": \"dolor\",\n        \"fixedNumber\": \"0612345678\",\n        \"gender\": \"OTHER\",\n        \"mobileNumber\": \"0612345677\",\n        \"preferredLanguage\": \"NL\",\n        \"surnamePrefix\": \"non irure officia sint\",\n        \"vip\": false\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/hierarchy/subscribers/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"subscribers",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "14092066"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "eec20aa7-6a8c-4c28-82d8-15031d5fc61b",
							"name": "Service Unavailable",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"referenceNumber\": \"Free feild for tracking \",\n    \"subscriber\": {\n        \"surname\": \"quis sit\",\n        \"comments\": \"exercitation ut\",\n        \"email\": \"dolor@Excepteur.odor\",\n        \"employeeNumber\": \"ut incididunt enim tempor nostrud\",\n        \"firstName\": \"dolor\",\n        \"fixedNumber\": \"0612345678\",\n        \"gender\": \"OTHER\",\n        \"mobileNumber\": \"0612345677\",\n        \"preferredLanguage\": \"NL\",\n        \"surnamePrefix\": \"non irure officia sint\",\n        \"vip\": false\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/hierarchy/subscribers/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"subscribers",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "14092066"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "5: Get service requests details",
					"id": "782c01c5-de69-44b3-ae0c-c6b160a40a4f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/track-and-trace/service-requests/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"track-and-trace",
								"service-requests",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "49579298",
									"description": "(Required) id"
								}
							]
						},
						"description": "The possible keys of `attributes` map in response object:<div style='max-height: 400px; overflow: auto; width: 100%'>\n<dl>\n<dt><b>Attribute name</b></dt><dd><b>Meaning</b></dd>\n<dt>login</dt><dd>Login</dd>\n<dt>roles</dt><dd>Roles</dd>\n<dt>firstName</dt><dd>First name</dd>\n<dt>lastName</dt><dd>Last name</dd>\n<dt>surnamePrefix</dt><dd>Surname prefix</dd>\n<dt>email</dt><dd>E-mail</dd>\n<dt>dateOfBirth</dt><dd>Date of birth</dd>\n<dt>vip</dt><dd>VIP</dd>\n<dt>employeeNumber</dt><dd>Employee number</dd>\n<dt>gender</dt><dd>Gender</dd>\n<dt>salutation</dt><dd>Salutation</dd>\n<dt>preferredLanguage</dt><dd>Preferred language</dd>\n<dt>comments</dt><dd>Comments</dd>\n<dt>accesspointNameMSISDN</dt><dd>Mobile number</dd>\n<dt>accesspointNameSIM</dt><dd>SIM card number</dd>\n<dt>accesspointNameIMSI</dt><dd>IMSI</dd>\n<dt>IMEI</dt><dd>IMEI</dd>\n<dt>Hanset_IMEI_number</dt><dd>IMEI</dd>\n<dt>accesspointNameFixedNumber</dt><dd>Fixed Number</dd>\n<dt>activeTo</dt><dd>Active to</dd>\n<dt>contractName</dt><dd>Subscription or device name</dd>\n<dt>totalOnetimePrice</dt><dd>One time price</dd>\n<dt>totalRecurrentPrice</dt><dd>Recurring price</dd>\n<dt>deferredPrice</dt><dd>Deferred price</dd>\n<dt>newUiccId</dt><dd>New SIM card number</dd>\n<dt>movedGroupName</dt><dd>Moved account</dd>\n<dt>subscriberAccountId</dt><dd>Old location</dd>\n<dt>destinationAccount</dt><dd>New location</dd>\n<dt>selectedDuoUiccid</dt><dd>Selected Duo SIM card number</dd>\n<dt>projectId</dt><dd>Project ID</dd>\n<dt>new_fixed_number</dt><dd>New fixed number</dd>\n<dt>new_desk_number</dt><dd>New extension</dd>\n<dt>oldUserGroupName</dt><dd>Previous user group</dd>\n<dt>newUserGroupName</dt><dd>New user group</dd>\n<dt>vpnName</dt><dd>VPN name</dd>\n<dt>deskNumber</dt><dd>Extension</dd>\n<dt>accesspointNameDeskNumber</dt><dd>Extension</dd>\n<dt>mobileAddress</dt><dd>Mobile number</dd>\n<dt>enterpriseName</dt><dd>Enterprise name</dd>\n<dt>enterpriseID</dt><dd>Enterprise ID</dd>\n<dt>mobilityGroupName</dt><dd>Fixed-Mobile PBX name</dd>\n<dt>userGroupName</dt><dd>User group</dd>\n<dt>enterpriseUserGroup</dt><dd>User group</dd>\n<dt>initialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>sipAccountName</dt><dd>SIP account name</dd>\n<dt>accessInstanceAttributeinitialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>accesspointNameQueuePhoneNumber</dt><dd>Queue phone number</dd>\n<dt>accesspointNameSipAccountName</dt><dd>SIP account name</dd>\n<dt>subscriptionAmount</dt><dd>New subscription amount</dd>\n<dt>contract_contact_name</dt><dd>Contract contact person (name)</dd>\n<dt>contract_contact_phone</dt><dd>Contract contact person (phone)</dd>\n<dt>contract_contact_mail</dt><dd>Contract contact person (mail)</dd>\n<dt>financial_contact_name</dt><dd>Financial contact person (name)</dd>\n<dt>financial_contact_phone</dt><dd>Financial contact person (phone)</dd>\n<dt>financial_contact_mail</dt><dd>Financial contact person (mail)</dd>\n<dt>technical_contact_name</dt><dd>Technical contact Person (name)</dd>\n<dt>technical_contact_phone</dt><dd>Technical contact Person (phone)</dd>\n<dt>technical_contact_mail</dt><dd>Technical contact Person (mail)</dd>\n<dt>deviceOption</dt><dd>Device option</dd>\n<dt>deviceType_label</dt><dd>Device type</dd>\n<dt>macAddress</dt><dd>Mac address</dd>\n<dt>deviceName</dt><dd>Device name</dd>\n<dt>sacGroupAccountId_label</dt><dd>Location account</dd>\n<dt>groupId</dt><dd>Location</dd>\n<dt>vGroupMovingToID</dt><dd>New location</dd>\n<dt>pbxName</dt><dd>PBX</dd>\n<dt>groupCitemId_label</dt><dd>Group</dd>\n<dt>Fixed</dt><dd>Alternate fixed number</dd>\n<dt>DeskNumber</dt><dd>Alternate extension</dd>\n<dt>billing_retention_period</dt><dd>Financial data retention period (months)</dd>\n<dt>managedGroupName</dt><dd>Authorized for</dd>\n<dt>subscriptionType</dt><dd>Subscription type</dd>\n<dt>CurrentNetworkOperator</dt><dd>Current network operator</dd>\n<dt>CurrentServiceProvider</dt><dd>Current service provider</dd>\n<dt>Customer_name_at_current_provider</dt><dd>Customer name at current provider</dd>\n<dt>Current_contract_number</dt><dd>Customer number at current provider</dd>\n<dt>UIccId</dt><dd>Current SIM card number</dd>\n<dt>Initials</dt><dd>Initials</dd>\n<dt>FamilyNamePrefix</dt><dd>Family name prefix</dd>\n<dt>FamilyName</dt><dd>Family name</dd>\n<dt>delivery_TT_id</dt><dd>Delivery Track&trace ID</dd>\n<dt>IsAppleDEP</dt><dd>Apple DEP</dd>\n<dt>IsSamsungKNOX</dt><dd>Samsung KNOX</dd>\n<dt>keepCurrentSim</dt><dd>Keep existing SIM card</dd>\n<dt>Note</dt><dd>Note</dd>\n<dt>Porting_wish_date</dt><dd>Preferred transition date</dd>\n<dt>returnReason</dt><dd>Reason for return</dd>\n<dt>returnRemarks</dt><dd>Remarks</dd>\n<dt>companyName</dt><dd>Company name</dd>\n<dt>companyNamePronounciation</dt><dd>Comapny name pronounciation</dd>\n<dt>businessVoiceMailMessageText</dt><dd>Chosen business voicemail message</dd>\n</dl>\n<div>\n<style type=\"text/css\">  dl {\n    display: flex;\n    flex-flow: row wrap;\n  }\n  dt {\n    flex-basis: 20%;\n    text-align: right;\n  }\n  dd {\n    flex-basis: 70%;\n    flex-grow: 1;\n  }\n</style>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_orders_track_and_trace</li><li>privileges_orders_authorization</li></ul>"
					},
					"response": [
						{
							"id": "7ee4bedc-60e4-418a-92a6-5be1b41a0ecf",
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/track-and-trace/service-requests/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"track-and-trace",
										"service-requests",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "49579298",
											"description": "(Required) id"
										}
									]
								},
								"description": "The possible keys of `attributes` map in response object:<div style='max-height: 400px; overflow: auto; width: 100%'>\n<dl>\n<dt><b>Attribute name</b></dt><dd><b>Meaning</b></dd>\n<dt>login</dt><dd>Login</dd>\n<dt>roles</dt><dd>Roles</dd>\n<dt>firstName</dt><dd>First name</dd>\n<dt>lastName</dt><dd>Last name</dd>\n<dt>surnamePrefix</dt><dd>Surname prefix</dd>\n<dt>email</dt><dd>E-mail</dd>\n<dt>dateOfBirth</dt><dd>Date of birth</dd>\n<dt>vip</dt><dd>VIP</dd>\n<dt>employeeNumber</dt><dd>Employee number</dd>\n<dt>gender</dt><dd>Gender</dd>\n<dt>salutation</dt><dd>Salutation</dd>\n<dt>preferredLanguage</dt><dd>Preferred language</dd>\n<dt>comments</dt><dd>Comments</dd>\n<dt>accesspointNameMSISDN</dt><dd>Mobile number</dd>\n<dt>accesspointNameSIM</dt><dd>SIM card number</dd>\n<dt>accesspointNameIMSI</dt><dd>IMSI</dd>\n<dt>IMEI</dt><dd>IMEI</dd>\n<dt>Hanset_IMEI_number</dt><dd>IMEI</dd>\n<dt>accesspointNameFixedNumber</dt><dd>Fixed Number</dd>\n<dt>activeTo</dt><dd>Active to</dd>\n<dt>contractName</dt><dd>Subscription or device name</dd>\n<dt>totalOnetimePrice</dt><dd>One time price</dd>\n<dt>totalRecurrentPrice</dt><dd>Recurring price</dd>\n<dt>deferredPrice</dt><dd>Deferred price</dd>\n<dt>newUiccId</dt><dd>New SIM card number</dd>\n<dt>movedGroupName</dt><dd>Moved account</dd>\n<dt>subscriberAccountId</dt><dd>Old location</dd>\n<dt>destinationAccount</dt><dd>New location</dd>\n<dt>selectedDuoUiccid</dt><dd>Selected Duo SIM card number</dd>\n<dt>projectId</dt><dd>Project ID</dd>\n<dt>new_fixed_number</dt><dd>New fixed number</dd>\n<dt>new_desk_number</dt><dd>New extension</dd>\n<dt>oldUserGroupName</dt><dd>Previous user group</dd>\n<dt>newUserGroupName</dt><dd>New user group</dd>\n<dt>vpnName</dt><dd>VPN name</dd>\n<dt>deskNumber</dt><dd>Extension</dd>\n<dt>accesspointNameDeskNumber</dt><dd>Extension</dd>\n<dt>mobileAddress</dt><dd>Mobile number</dd>\n<dt>enterpriseName</dt><dd>Enterprise name</dd>\n<dt>enterpriseID</dt><dd>Enterprise ID</dd>\n<dt>mobilityGroupName</dt><dd>Fixed-Mobile PBX name</dd>\n<dt>userGroupName</dt><dd>User group</dd>\n<dt>enterpriseUserGroup</dt><dd>User group</dd>\n<dt>initialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>sipAccountName</dt><dd>SIP account name</dd>\n<dt>accessInstanceAttributeinitialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>accesspointNameQueuePhoneNumber</dt><dd>Queue phone number</dd>\n<dt>accesspointNameSipAccountName</dt><dd>SIP account name</dd>\n<dt>subscriptionAmount</dt><dd>New subscription amount</dd>\n<dt>contract_contact_name</dt><dd>Contract contact person (name)</dd>\n<dt>contract_contact_phone</dt><dd>Contract contact person (phone)</dd>\n<dt>contract_contact_mail</dt><dd>Contract contact person (mail)</dd>\n<dt>financial_contact_name</dt><dd>Financial contact person (name)</dd>\n<dt>financial_contact_phone</dt><dd>Financial contact person (phone)</dd>\n<dt>financial_contact_mail</dt><dd>Financial contact person (mail)</dd>\n<dt>technical_contact_name</dt><dd>Technical contact Person (name)</dd>\n<dt>technical_contact_phone</dt><dd>Technical contact Person (phone)</dd>\n<dt>technical_contact_mail</dt><dd>Technical contact Person (mail)</dd>\n<dt>deviceOption</dt><dd>Device option</dd>\n<dt>deviceType_label</dt><dd>Device type</dd>\n<dt>macAddress</dt><dd>Mac address</dd>\n<dt>deviceName</dt><dd>Device name</dd>\n<dt>sacGroupAccountId_label</dt><dd>Location account</dd>\n<dt>groupId</dt><dd>Location</dd>\n<dt>vGroupMovingToID</dt><dd>New location</dd>\n<dt>pbxName</dt><dd>PBX</dd>\n<dt>groupCitemId_label</dt><dd>Group</dd>\n<dt>Fixed</dt><dd>Alternate fixed number</dd>\n<dt>DeskNumber</dt><dd>Alternate extension</dd>\n<dt>billing_retention_period</dt><dd>Financial data retention period (months)</dd>\n<dt>managedGroupName</dt><dd>Authorized for</dd>\n<dt>subscriptionType</dt><dd>Subscription type</dd>\n<dt>CurrentNetworkOperator</dt><dd>Current network operator</dd>\n<dt>CurrentServiceProvider</dt><dd>Current service provider</dd>\n<dt>Customer_name_at_current_provider</dt><dd>Customer name at current provider</dd>\n<dt>Current_contract_number</dt><dd>Customer number at current provider</dd>\n<dt>UIccId</dt><dd>Current SIM card number</dd>\n<dt>Initials</dt><dd>Initials</dd>\n<dt>FamilyNamePrefix</dt><dd>Family name prefix</dd>\n<dt>FamilyName</dt><dd>Family name</dd>\n<dt>delivery_TT_id</dt><dd>Delivery Track&trace ID</dd>\n<dt>IsAppleDEP</dt><dd>Apple DEP</dd>\n<dt>IsSamsungKNOX</dt><dd>Samsung KNOX</dd>\n<dt>keepCurrentSim</dt><dd>Keep existing SIM card</dd>\n<dt>Note</dt><dd>Note</dd>\n<dt>Porting_wish_date</dt><dd>Preferred transition date</dd>\n<dt>returnReason</dt><dd>Reason for return</dd>\n<dt>returnRemarks</dt><dd>Remarks</dd>\n<dt>companyName</dt><dd>Company name</dd>\n<dt>companyNamePronounciation</dt><dd>Comapny name pronounciation</dd>\n<dt>businessVoiceMailMessageText</dt><dd>Chosen business voicemail message</dd>\n</dl>\n<div>\n<style type=\"text/css\">  dl {\n    display: flex;\n    flex-flow: row wrap;\n  }\n  dt {\n    flex-basis: 20%;\n    text-align: right;\n  }\n  dd {\n    flex-basis: 70%;\n    flex-grow: 1;\n  }\n</style>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_orders_track_and_trace</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "6991ed50-ef31-4e96-a313-bb9b3fecda99",
							"name": "Bad Request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/track-and-trace/service-requests/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"track-and-trace",
										"service-requests",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "49579298",
											"description": "(Required) id"
										}
									]
								},
								"description": "The possible keys of `attributes` map in response object:<div style='max-height: 400px; overflow: auto; width: 100%'>\n<dl>\n<dt><b>Attribute name</b></dt><dd><b>Meaning</b></dd>\n<dt>login</dt><dd>Login</dd>\n<dt>roles</dt><dd>Roles</dd>\n<dt>firstName</dt><dd>First name</dd>\n<dt>lastName</dt><dd>Last name</dd>\n<dt>surnamePrefix</dt><dd>Surname prefix</dd>\n<dt>email</dt><dd>E-mail</dd>\n<dt>dateOfBirth</dt><dd>Date of birth</dd>\n<dt>vip</dt><dd>VIP</dd>\n<dt>employeeNumber</dt><dd>Employee number</dd>\n<dt>gender</dt><dd>Gender</dd>\n<dt>salutation</dt><dd>Salutation</dd>\n<dt>preferredLanguage</dt><dd>Preferred language</dd>\n<dt>comments</dt><dd>Comments</dd>\n<dt>accesspointNameMSISDN</dt><dd>Mobile number</dd>\n<dt>accesspointNameSIM</dt><dd>SIM card number</dd>\n<dt>accesspointNameIMSI</dt><dd>IMSI</dd>\n<dt>IMEI</dt><dd>IMEI</dd>\n<dt>Hanset_IMEI_number</dt><dd>IMEI</dd>\n<dt>accesspointNameFixedNumber</dt><dd>Fixed Number</dd>\n<dt>activeTo</dt><dd>Active to</dd>\n<dt>contractName</dt><dd>Subscription or device name</dd>\n<dt>totalOnetimePrice</dt><dd>One time price</dd>\n<dt>totalRecurrentPrice</dt><dd>Recurring price</dd>\n<dt>deferredPrice</dt><dd>Deferred price</dd>\n<dt>newUiccId</dt><dd>New SIM card number</dd>\n<dt>movedGroupName</dt><dd>Moved account</dd>\n<dt>subscriberAccountId</dt><dd>Old location</dd>\n<dt>destinationAccount</dt><dd>New location</dd>\n<dt>selectedDuoUiccid</dt><dd>Selected Duo SIM card number</dd>\n<dt>projectId</dt><dd>Project ID</dd>\n<dt>new_fixed_number</dt><dd>New fixed number</dd>\n<dt>new_desk_number</dt><dd>New extension</dd>\n<dt>oldUserGroupName</dt><dd>Previous user group</dd>\n<dt>newUserGroupName</dt><dd>New user group</dd>\n<dt>vpnName</dt><dd>VPN name</dd>\n<dt>deskNumber</dt><dd>Extension</dd>\n<dt>accesspointNameDeskNumber</dt><dd>Extension</dd>\n<dt>mobileAddress</dt><dd>Mobile number</dd>\n<dt>enterpriseName</dt><dd>Enterprise name</dd>\n<dt>enterpriseID</dt><dd>Enterprise ID</dd>\n<dt>mobilityGroupName</dt><dd>Fixed-Mobile PBX name</dd>\n<dt>userGroupName</dt><dd>User group</dd>\n<dt>enterpriseUserGroup</dt><dd>User group</dd>\n<dt>initialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>sipAccountName</dt><dd>SIP account name</dd>\n<dt>accessInstanceAttributeinitialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>accesspointNameQueuePhoneNumber</dt><dd>Queue phone number</dd>\n<dt>accesspointNameSipAccountName</dt><dd>SIP account name</dd>\n<dt>subscriptionAmount</dt><dd>New subscription amount</dd>\n<dt>contract_contact_name</dt><dd>Contract contact person (name)</dd>\n<dt>contract_contact_phone</dt><dd>Contract contact person (phone)</dd>\n<dt>contract_contact_mail</dt><dd>Contract contact person (mail)</dd>\n<dt>financial_contact_name</dt><dd>Financial contact person (name)</dd>\n<dt>financial_contact_phone</dt><dd>Financial contact person (phone)</dd>\n<dt>financial_contact_mail</dt><dd>Financial contact person (mail)</dd>\n<dt>technical_contact_name</dt><dd>Technical contact Person (name)</dd>\n<dt>technical_contact_phone</dt><dd>Technical contact Person (phone)</dd>\n<dt>technical_contact_mail</dt><dd>Technical contact Person (mail)</dd>\n<dt>deviceOption</dt><dd>Device option</dd>\n<dt>deviceType_label</dt><dd>Device type</dd>\n<dt>macAddress</dt><dd>Mac address</dd>\n<dt>deviceName</dt><dd>Device name</dd>\n<dt>sacGroupAccountId_label</dt><dd>Location account</dd>\n<dt>groupId</dt><dd>Location</dd>\n<dt>vGroupMovingToID</dt><dd>New location</dd>\n<dt>pbxName</dt><dd>PBX</dd>\n<dt>groupCitemId_label</dt><dd>Group</dd>\n<dt>Fixed</dt><dd>Alternate fixed number</dd>\n<dt>DeskNumber</dt><dd>Alternate extension</dd>\n<dt>billing_retention_period</dt><dd>Financial data retention period (months)</dd>\n<dt>managedGroupName</dt><dd>Authorized for</dd>\n<dt>subscriptionType</dt><dd>Subscription type</dd>\n<dt>CurrentNetworkOperator</dt><dd>Current network operator</dd>\n<dt>CurrentServiceProvider</dt><dd>Current service provider</dd>\n<dt>Customer_name_at_current_provider</dt><dd>Customer name at current provider</dd>\n<dt>Current_contract_number</dt><dd>Customer number at current provider</dd>\n<dt>UIccId</dt><dd>Current SIM card number</dd>\n<dt>Initials</dt><dd>Initials</dd>\n<dt>FamilyNamePrefix</dt><dd>Family name prefix</dd>\n<dt>FamilyName</dt><dd>Family name</dd>\n<dt>delivery_TT_id</dt><dd>Delivery Track&trace ID</dd>\n<dt>IsAppleDEP</dt><dd>Apple DEP</dd>\n<dt>IsSamsungKNOX</dt><dd>Samsung KNOX</dd>\n<dt>keepCurrentSim</dt><dd>Keep existing SIM card</dd>\n<dt>Note</dt><dd>Note</dd>\n<dt>Porting_wish_date</dt><dd>Preferred transition date</dd>\n<dt>returnReason</dt><dd>Reason for return</dd>\n<dt>returnRemarks</dt><dd>Remarks</dd>\n<dt>companyName</dt><dd>Company name</dd>\n<dt>companyNamePronounciation</dt><dd>Comapny name pronounciation</dd>\n<dt>businessVoiceMailMessageText</dt><dd>Chosen business voicemail message</dd>\n</dl>\n<div>\n<style type=\"text/css\">  dl {\n    display: flex;\n    flex-flow: row wrap;\n  }\n  dt {\n    flex-basis: 20%;\n    text-align: right;\n  }\n  dd {\n    flex-basis: 70%;\n    flex-grow: 1;\n  }\n</style>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_orders_track_and_trace</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "defe00c2-d8fd-42f6-994e-d715a2e7d8b9",
							"name": "Unauthorized",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/track-and-trace/service-requests/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"track-and-trace",
										"service-requests",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "49579298",
											"description": "(Required) id"
										}
									]
								},
								"description": "The possible keys of `attributes` map in response object:<div style='max-height: 400px; overflow: auto; width: 100%'>\n<dl>\n<dt><b>Attribute name</b></dt><dd><b>Meaning</b></dd>\n<dt>login</dt><dd>Login</dd>\n<dt>roles</dt><dd>Roles</dd>\n<dt>firstName</dt><dd>First name</dd>\n<dt>lastName</dt><dd>Last name</dd>\n<dt>surnamePrefix</dt><dd>Surname prefix</dd>\n<dt>email</dt><dd>E-mail</dd>\n<dt>dateOfBirth</dt><dd>Date of birth</dd>\n<dt>vip</dt><dd>VIP</dd>\n<dt>employeeNumber</dt><dd>Employee number</dd>\n<dt>gender</dt><dd>Gender</dd>\n<dt>salutation</dt><dd>Salutation</dd>\n<dt>preferredLanguage</dt><dd>Preferred language</dd>\n<dt>comments</dt><dd>Comments</dd>\n<dt>accesspointNameMSISDN</dt><dd>Mobile number</dd>\n<dt>accesspointNameSIM</dt><dd>SIM card number</dd>\n<dt>accesspointNameIMSI</dt><dd>IMSI</dd>\n<dt>IMEI</dt><dd>IMEI</dd>\n<dt>Hanset_IMEI_number</dt><dd>IMEI</dd>\n<dt>accesspointNameFixedNumber</dt><dd>Fixed Number</dd>\n<dt>activeTo</dt><dd>Active to</dd>\n<dt>contractName</dt><dd>Subscription or device name</dd>\n<dt>totalOnetimePrice</dt><dd>One time price</dd>\n<dt>totalRecurrentPrice</dt><dd>Recurring price</dd>\n<dt>deferredPrice</dt><dd>Deferred price</dd>\n<dt>newUiccId</dt><dd>New SIM card number</dd>\n<dt>movedGroupName</dt><dd>Moved account</dd>\n<dt>subscriberAccountId</dt><dd>Old location</dd>\n<dt>destinationAccount</dt><dd>New location</dd>\n<dt>selectedDuoUiccid</dt><dd>Selected Duo SIM card number</dd>\n<dt>projectId</dt><dd>Project ID</dd>\n<dt>new_fixed_number</dt><dd>New fixed number</dd>\n<dt>new_desk_number</dt><dd>New extension</dd>\n<dt>oldUserGroupName</dt><dd>Previous user group</dd>\n<dt>newUserGroupName</dt><dd>New user group</dd>\n<dt>vpnName</dt><dd>VPN name</dd>\n<dt>deskNumber</dt><dd>Extension</dd>\n<dt>accesspointNameDeskNumber</dt><dd>Extension</dd>\n<dt>mobileAddress</dt><dd>Mobile number</dd>\n<dt>enterpriseName</dt><dd>Enterprise name</dd>\n<dt>enterpriseID</dt><dd>Enterprise ID</dd>\n<dt>mobilityGroupName</dt><dd>Fixed-Mobile PBX name</dd>\n<dt>userGroupName</dt><dd>User group</dd>\n<dt>enterpriseUserGroup</dt><dd>User group</dd>\n<dt>initialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>sipAccountName</dt><dd>SIP account name</dd>\n<dt>accessInstanceAttributeinitialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>accesspointNameQueuePhoneNumber</dt><dd>Queue phone number</dd>\n<dt>accesspointNameSipAccountName</dt><dd>SIP account name</dd>\n<dt>subscriptionAmount</dt><dd>New subscription amount</dd>\n<dt>contract_contact_name</dt><dd>Contract contact person (name)</dd>\n<dt>contract_contact_phone</dt><dd>Contract contact person (phone)</dd>\n<dt>contract_contact_mail</dt><dd>Contract contact person (mail)</dd>\n<dt>financial_contact_name</dt><dd>Financial contact person (name)</dd>\n<dt>financial_contact_phone</dt><dd>Financial contact person (phone)</dd>\n<dt>financial_contact_mail</dt><dd>Financial contact person (mail)</dd>\n<dt>technical_contact_name</dt><dd>Technical contact Person (name)</dd>\n<dt>technical_contact_phone</dt><dd>Technical contact Person (phone)</dd>\n<dt>technical_contact_mail</dt><dd>Technical contact Person (mail)</dd>\n<dt>deviceOption</dt><dd>Device option</dd>\n<dt>deviceType_label</dt><dd>Device type</dd>\n<dt>macAddress</dt><dd>Mac address</dd>\n<dt>deviceName</dt><dd>Device name</dd>\n<dt>sacGroupAccountId_label</dt><dd>Location account</dd>\n<dt>groupId</dt><dd>Location</dd>\n<dt>vGroupMovingToID</dt><dd>New location</dd>\n<dt>pbxName</dt><dd>PBX</dd>\n<dt>groupCitemId_label</dt><dd>Group</dd>\n<dt>Fixed</dt><dd>Alternate fixed number</dd>\n<dt>DeskNumber</dt><dd>Alternate extension</dd>\n<dt>billing_retention_period</dt><dd>Financial data retention period (months)</dd>\n<dt>managedGroupName</dt><dd>Authorized for</dd>\n<dt>subscriptionType</dt><dd>Subscription type</dd>\n<dt>CurrentNetworkOperator</dt><dd>Current network operator</dd>\n<dt>CurrentServiceProvider</dt><dd>Current service provider</dd>\n<dt>Customer_name_at_current_provider</dt><dd>Customer name at current provider</dd>\n<dt>Current_contract_number</dt><dd>Customer number at current provider</dd>\n<dt>UIccId</dt><dd>Current SIM card number</dd>\n<dt>Initials</dt><dd>Initials</dd>\n<dt>FamilyNamePrefix</dt><dd>Family name prefix</dd>\n<dt>FamilyName</dt><dd>Family name</dd>\n<dt>delivery_TT_id</dt><dd>Delivery Track&trace ID</dd>\n<dt>IsAppleDEP</dt><dd>Apple DEP</dd>\n<dt>IsSamsungKNOX</dt><dd>Samsung KNOX</dd>\n<dt>keepCurrentSim</dt><dd>Keep existing SIM card</dd>\n<dt>Note</dt><dd>Note</dd>\n<dt>Porting_wish_date</dt><dd>Preferred transition date</dd>\n<dt>returnReason</dt><dd>Reason for return</dd>\n<dt>returnRemarks</dt><dd>Remarks</dd>\n<dt>companyName</dt><dd>Company name</dd>\n<dt>companyNamePronounciation</dt><dd>Comapny name pronounciation</dd>\n<dt>businessVoiceMailMessageText</dt><dd>Chosen business voicemail message</dd>\n</dl>\n<div>\n<style type=\"text/css\">  dl {\n    display: flex;\n    flex-flow: row wrap;\n  }\n  dt {\n    flex-basis: 20%;\n    text-align: right;\n  }\n  dd {\n    flex-basis: 70%;\n    flex-grow: 1;\n  }\n</style>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_orders_track_and_trace</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "9bf4aa0a-c975-4fa7-bdf0-4f9bdb1117ef",
							"name": "Forbidden",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/track-and-trace/service-requests/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"track-and-trace",
										"service-requests",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "49579298",
											"description": "(Required) id"
										}
									]
								},
								"description": "The possible keys of `attributes` map in response object:<div style='max-height: 400px; overflow: auto; width: 100%'>\n<dl>\n<dt><b>Attribute name</b></dt><dd><b>Meaning</b></dd>\n<dt>login</dt><dd>Login</dd>\n<dt>roles</dt><dd>Roles</dd>\n<dt>firstName</dt><dd>First name</dd>\n<dt>lastName</dt><dd>Last name</dd>\n<dt>surnamePrefix</dt><dd>Surname prefix</dd>\n<dt>email</dt><dd>E-mail</dd>\n<dt>dateOfBirth</dt><dd>Date of birth</dd>\n<dt>vip</dt><dd>VIP</dd>\n<dt>employeeNumber</dt><dd>Employee number</dd>\n<dt>gender</dt><dd>Gender</dd>\n<dt>salutation</dt><dd>Salutation</dd>\n<dt>preferredLanguage</dt><dd>Preferred language</dd>\n<dt>comments</dt><dd>Comments</dd>\n<dt>accesspointNameMSISDN</dt><dd>Mobile number</dd>\n<dt>accesspointNameSIM</dt><dd>SIM card number</dd>\n<dt>accesspointNameIMSI</dt><dd>IMSI</dd>\n<dt>IMEI</dt><dd>IMEI</dd>\n<dt>Hanset_IMEI_number</dt><dd>IMEI</dd>\n<dt>accesspointNameFixedNumber</dt><dd>Fixed Number</dd>\n<dt>activeTo</dt><dd>Active to</dd>\n<dt>contractName</dt><dd>Subscription or device name</dd>\n<dt>totalOnetimePrice</dt><dd>One time price</dd>\n<dt>totalRecurrentPrice</dt><dd>Recurring price</dd>\n<dt>deferredPrice</dt><dd>Deferred price</dd>\n<dt>newUiccId</dt><dd>New SIM card number</dd>\n<dt>movedGroupName</dt><dd>Moved account</dd>\n<dt>subscriberAccountId</dt><dd>Old location</dd>\n<dt>destinationAccount</dt><dd>New location</dd>\n<dt>selectedDuoUiccid</dt><dd>Selected Duo SIM card number</dd>\n<dt>projectId</dt><dd>Project ID</dd>\n<dt>new_fixed_number</dt><dd>New fixed number</dd>\n<dt>new_desk_number</dt><dd>New extension</dd>\n<dt>oldUserGroupName</dt><dd>Previous user group</dd>\n<dt>newUserGroupName</dt><dd>New user group</dd>\n<dt>vpnName</dt><dd>VPN name</dd>\n<dt>deskNumber</dt><dd>Extension</dd>\n<dt>accesspointNameDeskNumber</dt><dd>Extension</dd>\n<dt>mobileAddress</dt><dd>Mobile number</dd>\n<dt>enterpriseName</dt><dd>Enterprise name</dd>\n<dt>enterpriseID</dt><dd>Enterprise ID</dd>\n<dt>mobilityGroupName</dt><dd>Fixed-Mobile PBX name</dd>\n<dt>userGroupName</dt><dd>User group</dd>\n<dt>enterpriseUserGroup</dt><dd>User group</dd>\n<dt>initialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>sipAccountName</dt><dd>SIP account name</dd>\n<dt>accessInstanceAttributeinitialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>accesspointNameQueuePhoneNumber</dt><dd>Queue phone number</dd>\n<dt>accesspointNameSipAccountName</dt><dd>SIP account name</dd>\n<dt>subscriptionAmount</dt><dd>New subscription amount</dd>\n<dt>contract_contact_name</dt><dd>Contract contact person (name)</dd>\n<dt>contract_contact_phone</dt><dd>Contract contact person (phone)</dd>\n<dt>contract_contact_mail</dt><dd>Contract contact person (mail)</dd>\n<dt>financial_contact_name</dt><dd>Financial contact person (name)</dd>\n<dt>financial_contact_phone</dt><dd>Financial contact person (phone)</dd>\n<dt>financial_contact_mail</dt><dd>Financial contact person (mail)</dd>\n<dt>technical_contact_name</dt><dd>Technical contact Person (name)</dd>\n<dt>technical_contact_phone</dt><dd>Technical contact Person (phone)</dd>\n<dt>technical_contact_mail</dt><dd>Technical contact Person (mail)</dd>\n<dt>deviceOption</dt><dd>Device option</dd>\n<dt>deviceType_label</dt><dd>Device type</dd>\n<dt>macAddress</dt><dd>Mac address</dd>\n<dt>deviceName</dt><dd>Device name</dd>\n<dt>sacGroupAccountId_label</dt><dd>Location account</dd>\n<dt>groupId</dt><dd>Location</dd>\n<dt>vGroupMovingToID</dt><dd>New location</dd>\n<dt>pbxName</dt><dd>PBX</dd>\n<dt>groupCitemId_label</dt><dd>Group</dd>\n<dt>Fixed</dt><dd>Alternate fixed number</dd>\n<dt>DeskNumber</dt><dd>Alternate extension</dd>\n<dt>billing_retention_period</dt><dd>Financial data retention period (months)</dd>\n<dt>managedGroupName</dt><dd>Authorized for</dd>\n<dt>subscriptionType</dt><dd>Subscription type</dd>\n<dt>CurrentNetworkOperator</dt><dd>Current network operator</dd>\n<dt>CurrentServiceProvider</dt><dd>Current service provider</dd>\n<dt>Customer_name_at_current_provider</dt><dd>Customer name at current provider</dd>\n<dt>Current_contract_number</dt><dd>Customer number at current provider</dd>\n<dt>UIccId</dt><dd>Current SIM card number</dd>\n<dt>Initials</dt><dd>Initials</dd>\n<dt>FamilyNamePrefix</dt><dd>Family name prefix</dd>\n<dt>FamilyName</dt><dd>Family name</dd>\n<dt>delivery_TT_id</dt><dd>Delivery Track&trace ID</dd>\n<dt>IsAppleDEP</dt><dd>Apple DEP</dd>\n<dt>IsSamsungKNOX</dt><dd>Samsung KNOX</dd>\n<dt>keepCurrentSim</dt><dd>Keep existing SIM card</dd>\n<dt>Note</dt><dd>Note</dd>\n<dt>Porting_wish_date</dt><dd>Preferred transition date</dd>\n<dt>returnReason</dt><dd>Reason for return</dd>\n<dt>returnRemarks</dt><dd>Remarks</dd>\n<dt>companyName</dt><dd>Company name</dd>\n<dt>companyNamePronounciation</dt><dd>Comapny name pronounciation</dd>\n<dt>businessVoiceMailMessageText</dt><dd>Chosen business voicemail message</dd>\n</dl>\n<div>\n<style type=\"text/css\">  dl {\n    display: flex;\n    flex-flow: row wrap;\n  }\n  dt {\n    flex-basis: 20%;\n    text-align: right;\n  }\n  dd {\n    flex-basis: 70%;\n    flex-grow: 1;\n  }\n</style>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_orders_track_and_trace</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "294ed40d-1b49-40fa-a53f-963589e1d200",
							"name": "Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/track-and-trace/service-requests/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"track-and-trace",
										"service-requests",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "49579298",
											"description": "(Required) id"
										}
									]
								},
								"description": "The possible keys of `attributes` map in response object:<div style='max-height: 400px; overflow: auto; width: 100%'>\n<dl>\n<dt><b>Attribute name</b></dt><dd><b>Meaning</b></dd>\n<dt>login</dt><dd>Login</dd>\n<dt>roles</dt><dd>Roles</dd>\n<dt>firstName</dt><dd>First name</dd>\n<dt>lastName</dt><dd>Last name</dd>\n<dt>surnamePrefix</dt><dd>Surname prefix</dd>\n<dt>email</dt><dd>E-mail</dd>\n<dt>dateOfBirth</dt><dd>Date of birth</dd>\n<dt>vip</dt><dd>VIP</dd>\n<dt>employeeNumber</dt><dd>Employee number</dd>\n<dt>gender</dt><dd>Gender</dd>\n<dt>salutation</dt><dd>Salutation</dd>\n<dt>preferredLanguage</dt><dd>Preferred language</dd>\n<dt>comments</dt><dd>Comments</dd>\n<dt>accesspointNameMSISDN</dt><dd>Mobile number</dd>\n<dt>accesspointNameSIM</dt><dd>SIM card number</dd>\n<dt>accesspointNameIMSI</dt><dd>IMSI</dd>\n<dt>IMEI</dt><dd>IMEI</dd>\n<dt>Hanset_IMEI_number</dt><dd>IMEI</dd>\n<dt>accesspointNameFixedNumber</dt><dd>Fixed Number</dd>\n<dt>activeTo</dt><dd>Active to</dd>\n<dt>contractName</dt><dd>Subscription or device name</dd>\n<dt>totalOnetimePrice</dt><dd>One time price</dd>\n<dt>totalRecurrentPrice</dt><dd>Recurring price</dd>\n<dt>deferredPrice</dt><dd>Deferred price</dd>\n<dt>newUiccId</dt><dd>New SIM card number</dd>\n<dt>movedGroupName</dt><dd>Moved account</dd>\n<dt>subscriberAccountId</dt><dd>Old location</dd>\n<dt>destinationAccount</dt><dd>New location</dd>\n<dt>selectedDuoUiccid</dt><dd>Selected Duo SIM card number</dd>\n<dt>projectId</dt><dd>Project ID</dd>\n<dt>new_fixed_number</dt><dd>New fixed number</dd>\n<dt>new_desk_number</dt><dd>New extension</dd>\n<dt>oldUserGroupName</dt><dd>Previous user group</dd>\n<dt>newUserGroupName</dt><dd>New user group</dd>\n<dt>vpnName</dt><dd>VPN name</dd>\n<dt>deskNumber</dt><dd>Extension</dd>\n<dt>accesspointNameDeskNumber</dt><dd>Extension</dd>\n<dt>mobileAddress</dt><dd>Mobile number</dd>\n<dt>enterpriseName</dt><dd>Enterprise name</dd>\n<dt>enterpriseID</dt><dd>Enterprise ID</dd>\n<dt>mobilityGroupName</dt><dd>Fixed-Mobile PBX name</dd>\n<dt>userGroupName</dt><dd>User group</dd>\n<dt>enterpriseUserGroup</dt><dd>User group</dd>\n<dt>initialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>sipAccountName</dt><dd>SIP account name</dd>\n<dt>accessInstanceAttributeinitialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>accesspointNameQueuePhoneNumber</dt><dd>Queue phone number</dd>\n<dt>accesspointNameSipAccountName</dt><dd>SIP account name</dd>\n<dt>subscriptionAmount</dt><dd>New subscription amount</dd>\n<dt>contract_contact_name</dt><dd>Contract contact person (name)</dd>\n<dt>contract_contact_phone</dt><dd>Contract contact person (phone)</dd>\n<dt>contract_contact_mail</dt><dd>Contract contact person (mail)</dd>\n<dt>financial_contact_name</dt><dd>Financial contact person (name)</dd>\n<dt>financial_contact_phone</dt><dd>Financial contact person (phone)</dd>\n<dt>financial_contact_mail</dt><dd>Financial contact person (mail)</dd>\n<dt>technical_contact_name</dt><dd>Technical contact Person (name)</dd>\n<dt>technical_contact_phone</dt><dd>Technical contact Person (phone)</dd>\n<dt>technical_contact_mail</dt><dd>Technical contact Person (mail)</dd>\n<dt>deviceOption</dt><dd>Device option</dd>\n<dt>deviceType_label</dt><dd>Device type</dd>\n<dt>macAddress</dt><dd>Mac address</dd>\n<dt>deviceName</dt><dd>Device name</dd>\n<dt>sacGroupAccountId_label</dt><dd>Location account</dd>\n<dt>groupId</dt><dd>Location</dd>\n<dt>vGroupMovingToID</dt><dd>New location</dd>\n<dt>pbxName</dt><dd>PBX</dd>\n<dt>groupCitemId_label</dt><dd>Group</dd>\n<dt>Fixed</dt><dd>Alternate fixed number</dd>\n<dt>DeskNumber</dt><dd>Alternate extension</dd>\n<dt>billing_retention_period</dt><dd>Financial data retention period (months)</dd>\n<dt>managedGroupName</dt><dd>Authorized for</dd>\n<dt>subscriptionType</dt><dd>Subscription type</dd>\n<dt>CurrentNetworkOperator</dt><dd>Current network operator</dd>\n<dt>CurrentServiceProvider</dt><dd>Current service provider</dd>\n<dt>Customer_name_at_current_provider</dt><dd>Customer name at current provider</dd>\n<dt>Current_contract_number</dt><dd>Customer number at current provider</dd>\n<dt>UIccId</dt><dd>Current SIM card number</dd>\n<dt>Initials</dt><dd>Initials</dd>\n<dt>FamilyNamePrefix</dt><dd>Family name prefix</dd>\n<dt>FamilyName</dt><dd>Family name</dd>\n<dt>delivery_TT_id</dt><dd>Delivery Track&trace ID</dd>\n<dt>IsAppleDEP</dt><dd>Apple DEP</dd>\n<dt>IsSamsungKNOX</dt><dd>Samsung KNOX</dd>\n<dt>keepCurrentSim</dt><dd>Keep existing SIM card</dd>\n<dt>Note</dt><dd>Note</dd>\n<dt>Porting_wish_date</dt><dd>Preferred transition date</dd>\n<dt>returnReason</dt><dd>Reason for return</dd>\n<dt>returnRemarks</dt><dd>Remarks</dd>\n<dt>companyName</dt><dd>Company name</dd>\n<dt>companyNamePronounciation</dt><dd>Comapny name pronounciation</dd>\n<dt>businessVoiceMailMessageText</dt><dd>Chosen business voicemail message</dd>\n</dl>\n<div>\n<style type=\"text/css\">  dl {\n    display: flex;\n    flex-flow: row wrap;\n  }\n  dt {\n    flex-basis: 20%;\n    text-align: right;\n  }\n  dd {\n    flex-basis: 70%;\n    flex-grow: 1;\n  }\n</style>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_orders_track_and_trace</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "e922c2da-660d-4c69-b3c1-54a6daf6443b",
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/track-and-trace/service-requests/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"track-and-trace",
										"service-requests",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "49579298",
											"description": "(Required) id"
										}
									]
								},
								"description": "The possible keys of `attributes` map in response object:<div style='max-height: 400px; overflow: auto; width: 100%'>\n<dl>\n<dt><b>Attribute name</b></dt><dd><b>Meaning</b></dd>\n<dt>login</dt><dd>Login</dd>\n<dt>roles</dt><dd>Roles</dd>\n<dt>firstName</dt><dd>First name</dd>\n<dt>lastName</dt><dd>Last name</dd>\n<dt>surnamePrefix</dt><dd>Surname prefix</dd>\n<dt>email</dt><dd>E-mail</dd>\n<dt>dateOfBirth</dt><dd>Date of birth</dd>\n<dt>vip</dt><dd>VIP</dd>\n<dt>employeeNumber</dt><dd>Employee number</dd>\n<dt>gender</dt><dd>Gender</dd>\n<dt>salutation</dt><dd>Salutation</dd>\n<dt>preferredLanguage</dt><dd>Preferred language</dd>\n<dt>comments</dt><dd>Comments</dd>\n<dt>accesspointNameMSISDN</dt><dd>Mobile number</dd>\n<dt>accesspointNameSIM</dt><dd>SIM card number</dd>\n<dt>accesspointNameIMSI</dt><dd>IMSI</dd>\n<dt>IMEI</dt><dd>IMEI</dd>\n<dt>Hanset_IMEI_number</dt><dd>IMEI</dd>\n<dt>accesspointNameFixedNumber</dt><dd>Fixed Number</dd>\n<dt>activeTo</dt><dd>Active to</dd>\n<dt>contractName</dt><dd>Subscription or device name</dd>\n<dt>totalOnetimePrice</dt><dd>One time price</dd>\n<dt>totalRecurrentPrice</dt><dd>Recurring price</dd>\n<dt>deferredPrice</dt><dd>Deferred price</dd>\n<dt>newUiccId</dt><dd>New SIM card number</dd>\n<dt>movedGroupName</dt><dd>Moved account</dd>\n<dt>subscriberAccountId</dt><dd>Old location</dd>\n<dt>destinationAccount</dt><dd>New location</dd>\n<dt>selectedDuoUiccid</dt><dd>Selected Duo SIM card number</dd>\n<dt>projectId</dt><dd>Project ID</dd>\n<dt>new_fixed_number</dt><dd>New fixed number</dd>\n<dt>new_desk_number</dt><dd>New extension</dd>\n<dt>oldUserGroupName</dt><dd>Previous user group</dd>\n<dt>newUserGroupName</dt><dd>New user group</dd>\n<dt>vpnName</dt><dd>VPN name</dd>\n<dt>deskNumber</dt><dd>Extension</dd>\n<dt>accesspointNameDeskNumber</dt><dd>Extension</dd>\n<dt>mobileAddress</dt><dd>Mobile number</dd>\n<dt>enterpriseName</dt><dd>Enterprise name</dd>\n<dt>enterpriseID</dt><dd>Enterprise ID</dd>\n<dt>mobilityGroupName</dt><dd>Fixed-Mobile PBX name</dd>\n<dt>userGroupName</dt><dd>User group</dd>\n<dt>enterpriseUserGroup</dt><dd>User group</dd>\n<dt>initialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>sipAccountName</dt><dd>SIP account name</dd>\n<dt>accessInstanceAttributeinitialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>accesspointNameQueuePhoneNumber</dt><dd>Queue phone number</dd>\n<dt>accesspointNameSipAccountName</dt><dd>SIP account name</dd>\n<dt>subscriptionAmount</dt><dd>New subscription amount</dd>\n<dt>contract_contact_name</dt><dd>Contract contact person (name)</dd>\n<dt>contract_contact_phone</dt><dd>Contract contact person (phone)</dd>\n<dt>contract_contact_mail</dt><dd>Contract contact person (mail)</dd>\n<dt>financial_contact_name</dt><dd>Financial contact person (name)</dd>\n<dt>financial_contact_phone</dt><dd>Financial contact person (phone)</dd>\n<dt>financial_contact_mail</dt><dd>Financial contact person (mail)</dd>\n<dt>technical_contact_name</dt><dd>Technical contact Person (name)</dd>\n<dt>technical_contact_phone</dt><dd>Technical contact Person (phone)</dd>\n<dt>technical_contact_mail</dt><dd>Technical contact Person (mail)</dd>\n<dt>deviceOption</dt><dd>Device option</dd>\n<dt>deviceType_label</dt><dd>Device type</dd>\n<dt>macAddress</dt><dd>Mac address</dd>\n<dt>deviceName</dt><dd>Device name</dd>\n<dt>sacGroupAccountId_label</dt><dd>Location account</dd>\n<dt>groupId</dt><dd>Location</dd>\n<dt>vGroupMovingToID</dt><dd>New location</dd>\n<dt>pbxName</dt><dd>PBX</dd>\n<dt>groupCitemId_label</dt><dd>Group</dd>\n<dt>Fixed</dt><dd>Alternate fixed number</dd>\n<dt>DeskNumber</dt><dd>Alternate extension</dd>\n<dt>billing_retention_period</dt><dd>Financial data retention period (months)</dd>\n<dt>managedGroupName</dt><dd>Authorized for</dd>\n<dt>subscriptionType</dt><dd>Subscription type</dd>\n<dt>CurrentNetworkOperator</dt><dd>Current network operator</dd>\n<dt>CurrentServiceProvider</dt><dd>Current service provider</dd>\n<dt>Customer_name_at_current_provider</dt><dd>Customer name at current provider</dd>\n<dt>Current_contract_number</dt><dd>Customer number at current provider</dd>\n<dt>UIccId</dt><dd>Current SIM card number</dd>\n<dt>Initials</dt><dd>Initials</dd>\n<dt>FamilyNamePrefix</dt><dd>Family name prefix</dd>\n<dt>FamilyName</dt><dd>Family name</dd>\n<dt>delivery_TT_id</dt><dd>Delivery Track&trace ID</dd>\n<dt>IsAppleDEP</dt><dd>Apple DEP</dd>\n<dt>IsSamsungKNOX</dt><dd>Samsung KNOX</dd>\n<dt>keepCurrentSim</dt><dd>Keep existing SIM card</dd>\n<dt>Note</dt><dd>Note</dd>\n<dt>Porting_wish_date</dt><dd>Preferred transition date</dd>\n<dt>returnReason</dt><dd>Reason for return</dd>\n<dt>returnRemarks</dt><dd>Remarks</dd>\n<dt>companyName</dt><dd>Company name</dd>\n<dt>companyNamePronounciation</dt><dd>Comapny name pronounciation</dd>\n<dt>businessVoiceMailMessageText</dt><dd>Chosen business voicemail message</dd>\n</dl>\n<div>\n<style type=\"text/css\">  dl {\n    display: flex;\n    flex-flow: row wrap;\n  }\n  dt {\n    flex-basis: 20%;\n    text-align: right;\n  }\n  dd {\n    flex-basis: 70%;\n    flex-grow: 1;\n  }\n</style>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_orders_track_and_trace</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "3bd254af-6c8e-48f9-8f46-1ceb1c70ebc5",
							"name": "Server Error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/track-and-trace/service-requests/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"track-and-trace",
										"service-requests",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "49579298",
											"description": "(Required) id"
										}
									]
								},
								"description": "The possible keys of `attributes` map in response object:<div style='max-height: 400px; overflow: auto; width: 100%'>\n<dl>\n<dt><b>Attribute name</b></dt><dd><b>Meaning</b></dd>\n<dt>login</dt><dd>Login</dd>\n<dt>roles</dt><dd>Roles</dd>\n<dt>firstName</dt><dd>First name</dd>\n<dt>lastName</dt><dd>Last name</dd>\n<dt>surnamePrefix</dt><dd>Surname prefix</dd>\n<dt>email</dt><dd>E-mail</dd>\n<dt>dateOfBirth</dt><dd>Date of birth</dd>\n<dt>vip</dt><dd>VIP</dd>\n<dt>employeeNumber</dt><dd>Employee number</dd>\n<dt>gender</dt><dd>Gender</dd>\n<dt>salutation</dt><dd>Salutation</dd>\n<dt>preferredLanguage</dt><dd>Preferred language</dd>\n<dt>comments</dt><dd>Comments</dd>\n<dt>accesspointNameMSISDN</dt><dd>Mobile number</dd>\n<dt>accesspointNameSIM</dt><dd>SIM card number</dd>\n<dt>accesspointNameIMSI</dt><dd>IMSI</dd>\n<dt>IMEI</dt><dd>IMEI</dd>\n<dt>Hanset_IMEI_number</dt><dd>IMEI</dd>\n<dt>accesspointNameFixedNumber</dt><dd>Fixed Number</dd>\n<dt>activeTo</dt><dd>Active to</dd>\n<dt>contractName</dt><dd>Subscription or device name</dd>\n<dt>totalOnetimePrice</dt><dd>One time price</dd>\n<dt>totalRecurrentPrice</dt><dd>Recurring price</dd>\n<dt>deferredPrice</dt><dd>Deferred price</dd>\n<dt>newUiccId</dt><dd>New SIM card number</dd>\n<dt>movedGroupName</dt><dd>Moved account</dd>\n<dt>subscriberAccountId</dt><dd>Old location</dd>\n<dt>destinationAccount</dt><dd>New location</dd>\n<dt>selectedDuoUiccid</dt><dd>Selected Duo SIM card number</dd>\n<dt>projectId</dt><dd>Project ID</dd>\n<dt>new_fixed_number</dt><dd>New fixed number</dd>\n<dt>new_desk_number</dt><dd>New extension</dd>\n<dt>oldUserGroupName</dt><dd>Previous user group</dd>\n<dt>newUserGroupName</dt><dd>New user group</dd>\n<dt>vpnName</dt><dd>VPN name</dd>\n<dt>deskNumber</dt><dd>Extension</dd>\n<dt>accesspointNameDeskNumber</dt><dd>Extension</dd>\n<dt>mobileAddress</dt><dd>Mobile number</dd>\n<dt>enterpriseName</dt><dd>Enterprise name</dd>\n<dt>enterpriseID</dt><dd>Enterprise ID</dd>\n<dt>mobilityGroupName</dt><dd>Fixed-Mobile PBX name</dd>\n<dt>userGroupName</dt><dd>User group</dd>\n<dt>enterpriseUserGroup</dt><dd>User group</dd>\n<dt>initialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>sipAccountName</dt><dd>SIP account name</dd>\n<dt>accessInstanceAttributeinitialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>accesspointNameQueuePhoneNumber</dt><dd>Queue phone number</dd>\n<dt>accesspointNameSipAccountName</dt><dd>SIP account name</dd>\n<dt>subscriptionAmount</dt><dd>New subscription amount</dd>\n<dt>contract_contact_name</dt><dd>Contract contact person (name)</dd>\n<dt>contract_contact_phone</dt><dd>Contract contact person (phone)</dd>\n<dt>contract_contact_mail</dt><dd>Contract contact person (mail)</dd>\n<dt>financial_contact_name</dt><dd>Financial contact person (name)</dd>\n<dt>financial_contact_phone</dt><dd>Financial contact person (phone)</dd>\n<dt>financial_contact_mail</dt><dd>Financial contact person (mail)</dd>\n<dt>technical_contact_name</dt><dd>Technical contact Person (name)</dd>\n<dt>technical_contact_phone</dt><dd>Technical contact Person (phone)</dd>\n<dt>technical_contact_mail</dt><dd>Technical contact Person (mail)</dd>\n<dt>deviceOption</dt><dd>Device option</dd>\n<dt>deviceType_label</dt><dd>Device type</dd>\n<dt>macAddress</dt><dd>Mac address</dd>\n<dt>deviceName</dt><dd>Device name</dd>\n<dt>sacGroupAccountId_label</dt><dd>Location account</dd>\n<dt>groupId</dt><dd>Location</dd>\n<dt>vGroupMovingToID</dt><dd>New location</dd>\n<dt>pbxName</dt><dd>PBX</dd>\n<dt>groupCitemId_label</dt><dd>Group</dd>\n<dt>Fixed</dt><dd>Alternate fixed number</dd>\n<dt>DeskNumber</dt><dd>Alternate extension</dd>\n<dt>billing_retention_period</dt><dd>Financial data retention period (months)</dd>\n<dt>managedGroupName</dt><dd>Authorized for</dd>\n<dt>subscriptionType</dt><dd>Subscription type</dd>\n<dt>CurrentNetworkOperator</dt><dd>Current network operator</dd>\n<dt>CurrentServiceProvider</dt><dd>Current service provider</dd>\n<dt>Customer_name_at_current_provider</dt><dd>Customer name at current provider</dd>\n<dt>Current_contract_number</dt><dd>Customer number at current provider</dd>\n<dt>UIccId</dt><dd>Current SIM card number</dd>\n<dt>Initials</dt><dd>Initials</dd>\n<dt>FamilyNamePrefix</dt><dd>Family name prefix</dd>\n<dt>FamilyName</dt><dd>Family name</dd>\n<dt>delivery_TT_id</dt><dd>Delivery Track&trace ID</dd>\n<dt>IsAppleDEP</dt><dd>Apple DEP</dd>\n<dt>IsSamsungKNOX</dt><dd>Samsung KNOX</dd>\n<dt>keepCurrentSim</dt><dd>Keep existing SIM card</dd>\n<dt>Note</dt><dd>Note</dd>\n<dt>Porting_wish_date</dt><dd>Preferred transition date</dd>\n<dt>returnReason</dt><dd>Reason for return</dd>\n<dt>returnRemarks</dt><dd>Remarks</dd>\n<dt>companyName</dt><dd>Company name</dd>\n<dt>companyNamePronounciation</dt><dd>Comapny name pronounciation</dd>\n<dt>businessVoiceMailMessageText</dt><dd>Chosen business voicemail message</dd>\n</dl>\n<div>\n<style type=\"text/css\">  dl {\n    display: flex;\n    flex-flow: row wrap;\n  }\n  dt {\n    flex-basis: 20%;\n    text-align: right;\n  }\n  dd {\n    flex-basis: 70%;\n    flex-grow: 1;\n  }\n</style>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_orders_track_and_trace</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "48095973-6431-4f05-990f-d3518e706dd2",
							"name": "Service Unavailable",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/track-and-trace/service-requests/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"track-and-trace",
										"service-requests",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "49579298",
											"description": "(Required) id"
										}
									]
								},
								"description": "The possible keys of `attributes` map in response object:<div style='max-height: 400px; overflow: auto; width: 100%'>\n<dl>\n<dt><b>Attribute name</b></dt><dd><b>Meaning</b></dd>\n<dt>login</dt><dd>Login</dd>\n<dt>roles</dt><dd>Roles</dd>\n<dt>firstName</dt><dd>First name</dd>\n<dt>lastName</dt><dd>Last name</dd>\n<dt>surnamePrefix</dt><dd>Surname prefix</dd>\n<dt>email</dt><dd>E-mail</dd>\n<dt>dateOfBirth</dt><dd>Date of birth</dd>\n<dt>vip</dt><dd>VIP</dd>\n<dt>employeeNumber</dt><dd>Employee number</dd>\n<dt>gender</dt><dd>Gender</dd>\n<dt>salutation</dt><dd>Salutation</dd>\n<dt>preferredLanguage</dt><dd>Preferred language</dd>\n<dt>comments</dt><dd>Comments</dd>\n<dt>accesspointNameMSISDN</dt><dd>Mobile number</dd>\n<dt>accesspointNameSIM</dt><dd>SIM card number</dd>\n<dt>accesspointNameIMSI</dt><dd>IMSI</dd>\n<dt>IMEI</dt><dd>IMEI</dd>\n<dt>Hanset_IMEI_number</dt><dd>IMEI</dd>\n<dt>accesspointNameFixedNumber</dt><dd>Fixed Number</dd>\n<dt>activeTo</dt><dd>Active to</dd>\n<dt>contractName</dt><dd>Subscription or device name</dd>\n<dt>totalOnetimePrice</dt><dd>One time price</dd>\n<dt>totalRecurrentPrice</dt><dd>Recurring price</dd>\n<dt>deferredPrice</dt><dd>Deferred price</dd>\n<dt>newUiccId</dt><dd>New SIM card number</dd>\n<dt>movedGroupName</dt><dd>Moved account</dd>\n<dt>subscriberAccountId</dt><dd>Old location</dd>\n<dt>destinationAccount</dt><dd>New location</dd>\n<dt>selectedDuoUiccid</dt><dd>Selected Duo SIM card number</dd>\n<dt>projectId</dt><dd>Project ID</dd>\n<dt>new_fixed_number</dt><dd>New fixed number</dd>\n<dt>new_desk_number</dt><dd>New extension</dd>\n<dt>oldUserGroupName</dt><dd>Previous user group</dd>\n<dt>newUserGroupName</dt><dd>New user group</dd>\n<dt>vpnName</dt><dd>VPN name</dd>\n<dt>deskNumber</dt><dd>Extension</dd>\n<dt>accesspointNameDeskNumber</dt><dd>Extension</dd>\n<dt>mobileAddress</dt><dd>Mobile number</dd>\n<dt>enterpriseName</dt><dd>Enterprise name</dd>\n<dt>enterpriseID</dt><dd>Enterprise ID</dd>\n<dt>mobilityGroupName</dt><dd>Fixed-Mobile PBX name</dd>\n<dt>userGroupName</dt><dd>User group</dd>\n<dt>enterpriseUserGroup</dt><dd>User group</dd>\n<dt>initialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>sipAccountName</dt><dd>SIP account name</dd>\n<dt>accessInstanceAttributeinitialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>accesspointNameQueuePhoneNumber</dt><dd>Queue phone number</dd>\n<dt>accesspointNameSipAccountName</dt><dd>SIP account name</dd>\n<dt>subscriptionAmount</dt><dd>New subscription amount</dd>\n<dt>contract_contact_name</dt><dd>Contract contact person (name)</dd>\n<dt>contract_contact_phone</dt><dd>Contract contact person (phone)</dd>\n<dt>contract_contact_mail</dt><dd>Contract contact person (mail)</dd>\n<dt>financial_contact_name</dt><dd>Financial contact person (name)</dd>\n<dt>financial_contact_phone</dt><dd>Financial contact person (phone)</dd>\n<dt>financial_contact_mail</dt><dd>Financial contact person (mail)</dd>\n<dt>technical_contact_name</dt><dd>Technical contact Person (name)</dd>\n<dt>technical_contact_phone</dt><dd>Technical contact Person (phone)</dd>\n<dt>technical_contact_mail</dt><dd>Technical contact Person (mail)</dd>\n<dt>deviceOption</dt><dd>Device option</dd>\n<dt>deviceType_label</dt><dd>Device type</dd>\n<dt>macAddress</dt><dd>Mac address</dd>\n<dt>deviceName</dt><dd>Device name</dd>\n<dt>sacGroupAccountId_label</dt><dd>Location account</dd>\n<dt>groupId</dt><dd>Location</dd>\n<dt>vGroupMovingToID</dt><dd>New location</dd>\n<dt>pbxName</dt><dd>PBX</dd>\n<dt>groupCitemId_label</dt><dd>Group</dd>\n<dt>Fixed</dt><dd>Alternate fixed number</dd>\n<dt>DeskNumber</dt><dd>Alternate extension</dd>\n<dt>billing_retention_period</dt><dd>Financial data retention period (months)</dd>\n<dt>managedGroupName</dt><dd>Authorized for</dd>\n<dt>subscriptionType</dt><dd>Subscription type</dd>\n<dt>CurrentNetworkOperator</dt><dd>Current network operator</dd>\n<dt>CurrentServiceProvider</dt><dd>Current service provider</dd>\n<dt>Customer_name_at_current_provider</dt><dd>Customer name at current provider</dd>\n<dt>Current_contract_number</dt><dd>Customer number at current provider</dd>\n<dt>UIccId</dt><dd>Current SIM card number</dd>\n<dt>Initials</dt><dd>Initials</dd>\n<dt>FamilyNamePrefix</dt><dd>Family name prefix</dd>\n<dt>FamilyName</dt><dd>Family name</dd>\n<dt>delivery_TT_id</dt><dd>Delivery Track&trace ID</dd>\n<dt>IsAppleDEP</dt><dd>Apple DEP</dd>\n<dt>IsSamsungKNOX</dt><dd>Samsung KNOX</dd>\n<dt>keepCurrentSim</dt><dd>Keep existing SIM card</dd>\n<dt>Note</dt><dd>Note</dd>\n<dt>Porting_wish_date</dt><dd>Preferred transition date</dd>\n<dt>returnReason</dt><dd>Reason for return</dd>\n<dt>returnRemarks</dt><dd>Remarks</dd>\n<dt>companyName</dt><dd>Company name</dd>\n<dt>companyNamePronounciation</dt><dd>Comapny name pronounciation</dd>\n<dt>businessVoiceMailMessageText</dt><dd>Chosen business voicemail message</dd>\n</dl>\n<div>\n<style type=\"text/css\">  dl {\n    display: flex;\n    flex-flow: row wrap;\n  }\n  dt {\n    flex-basis: 20%;\n    text-align: right;\n  }\n  dd {\n    flex-basis: 70%;\n    flex-grow: 1;\n  }\n</style>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_orders_track_and_trace</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			],
			"id": "12abcedb-3b4e-4dfd-8194-78e328f4fd6a",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "bf23899f-3b28-4133-8ad5-bb0772fa3080",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "97a70c33-5ae4-4e56-a2ac-b1881751ea85",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "06- Change Subscriber contract",
			"item": [
				{
					"name": "1: Get all contracts.",
					"id": "5d3ea8b9-0ed3-442e-957a-8aa52786b256",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"description": "Content-Language",
								"key": "Content-Language",
								"value": "elit aute"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/contract/all",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"contract",
								"all"
							]
						},
						"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li></ul>"
					},
					"response": [
						{
							"id": "d19b3c52-6d7c-4aeb-bd1d-f4965a4cc607",
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Content-Language",
										"key": "Content-Language",
										"value": "elit aute"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contract/all",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contract",
										"all"
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li></ul>"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "4237fd61-5f47-48f4-b952-567cc2166a92",
							"name": "Bad Request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Content-Language",
										"key": "Content-Language",
										"value": "elit aute"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contract/all",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contract",
										"all"
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li></ul>"
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "20c7f3b6-d00f-4b4f-a46f-9bfa6ced0754",
							"name": "Unauthorized",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Content-Language",
										"key": "Content-Language",
										"value": "elit aute"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contract/all",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contract",
										"all"
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li></ul>"
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "2d9a972f-2926-45ac-b50a-75baa3fa0c49",
							"name": "Forbidden",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Content-Language",
										"key": "Content-Language",
										"value": "elit aute"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contract/all",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contract",
										"all"
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li></ul>"
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "fb5ed01b-dc32-4b5c-8407-82376bd10d1e",
							"name": "Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Content-Language",
										"key": "Content-Language",
										"value": "elit aute"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contract/all",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contract",
										"all"
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li></ul>"
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "760540f6-c1db-4a90-be6d-9cb65fd244e8",
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Content-Language",
										"key": "Content-Language",
										"value": "elit aute"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contract/all",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contract",
										"all"
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li></ul>"
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "4f0a736d-6e84-43eb-90e1-7eee848314b1",
							"name": "Server Error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Content-Language",
										"key": "Content-Language",
										"value": "elit aute"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contract/all",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contract",
										"all"
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li></ul>"
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "1aeb1220-f679-41a2-8351-6dafd5a69d16",
							"name": "Service Unavailable",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Content-Language",
										"key": "Content-Language",
										"value": "elit aute"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contract/all",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contract",
										"all"
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li></ul>"
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "2: Get contract details.",
					"id": "ab863d4e-58f9-40eb-801f-1b25ae571688",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/contract/id/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"contract",
								"id",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1283618026",
									"description": "ContractID"
								}
							]
						},
						"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li></ul>"
					},
					"response": [
						{
							"id": "0beaa380-d3be-444b-aac5-1f7dd17d4fa4",
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contract/id/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contract",
										"id",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "1283618026",
											"description": "ContractID"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li></ul>"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "ecb7f183-7545-474d-a46b-9583fefc8bf6",
							"name": "Bad Request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contract/id/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contract",
										"id",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "1283618026",
											"description": "ContractID"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li></ul>"
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "49423b7d-fe43-4dea-972a-93835a925761",
							"name": "Unauthorized",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contract/id/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contract",
										"id",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "1283618026",
											"description": "ContractID"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li></ul>"
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "650b6f17-cdf8-45f8-97ad-2f0502b60c49",
							"name": "Forbidden",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contract/id/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contract",
										"id",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "1283618026",
											"description": "ContractID"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li></ul>"
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "f1bc8a3a-219b-4e27-b281-bb7597dcebc0",
							"name": "Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contract/id/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contract",
										"id",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "1283618026",
											"description": "ContractID"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li></ul>"
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "cb298c99-1c27-457b-9716-d401eb35bb91",
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contract/id/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contract",
										"id",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "1283618026",
											"description": "ContractID"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li></ul>"
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "84dbe2a8-01e1-4096-b1ca-b6ef7e34a23d",
							"name": "Server Error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contract/id/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contract",
										"id",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "1283618026",
											"description": "ContractID"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li></ul>"
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "0b30d252-416b-4f7f-bbdd-6ab17d137b56",
							"name": "Service Unavailable",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contract/id/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contract",
										"id",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "1283618026",
											"description": "ContractID"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li></ul>"
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "3: Get contract Items",
					"id": "83c2ed21-ac88-46cc-a3ce-6cb7628622ee",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/contract/id/:id/items",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"contract",
								"id",
								":id",
								"items"
							],
							"variable": [
								{
									"key": "id",
									"value": "1283618026"
								}
							]
						},
						"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li></ul>"
					},
					"response": [
						{
							"id": "f22fdbe1-ce72-460d-9ed5-04243776e1b4",
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contract/id/:id/items",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contract",
										"id",
										":id",
										"items"
									],
									"variable": [
										{
											"key": "id",
											"value": "1283618026"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li></ul>"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "f7dc9efe-42f1-49aa-9ddb-31dd423b5aa8",
							"name": "Bad Request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contract/id/:id/items",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contract",
										"id",
										":id",
										"items"
									],
									"variable": [
										{
											"key": "id",
											"value": "1283618026"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li></ul>"
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "261d7837-458c-4299-a32d-a0a0fca4bafa",
							"name": "Unauthorized",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contract/id/:id/items",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contract",
										"id",
										":id",
										"items"
									],
									"variable": [
										{
											"key": "id",
											"value": "1283618026"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li></ul>"
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "4a91b779-2671-4556-98df-d7a7ed6a0436",
							"name": "Forbidden",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contract/id/:id/items",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contract",
										"id",
										":id",
										"items"
									],
									"variable": [
										{
											"key": "id",
											"value": "1283618026"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li></ul>"
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "b971daee-fca2-4000-b80c-d21f8f12b3c7",
							"name": "Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contract/id/:id/items",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contract",
										"id",
										":id",
										"items"
									],
									"variable": [
										{
											"key": "id",
											"value": "1283618026"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li></ul>"
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "d93afc41-3ac3-4c8f-bcc6-cd9e61aa8a03",
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contract/id/:id/items",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contract",
										"id",
										":id",
										"items"
									],
									"variable": [
										{
											"key": "id",
											"value": "1283618026"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li></ul>"
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "630fc32a-153d-4405-a0d5-6744b5b42cee",
							"name": "Server Error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contract/id/:id/items",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contract",
										"id",
										":id",
										"items"
									],
									"variable": [
										{
											"key": "id",
											"value": "1283618026"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li></ul>"
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "f23e9e07-e3cc-46d7-a067-29ea7810ea69",
							"name": "Service Unavailable",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contract/id/:id/items",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contract",
										"id",
										":id",
										"items"
									],
									"variable": [
										{
											"key": "id",
											"value": "1283618026"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li></ul>"
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "4: Get information about operations available for given contract.",
					"id": "65eb1016-ba03-4e29-a8cf-45cf84f9d344",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/order/operations?contractId=1283618026",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"order",
								"operations"
							],
							"query": [
								{
									"key": "contractId",
									"value": "1283618026",
									"description": "(Required) contractId"
								}
							]
						},
						"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
					},
					"response": [
						{
							"id": "5cb71bc5-91e6-43c4-8c98-280829ca54ef",
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/order/operations?contractId=1283618026",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"order",
										"operations"
									],
									"query": [
										{
											"key": "contractId",
											"value": "1283618026",
											"description": "(Required) contractId"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "936537ec-e243-4933-bafb-d13dfdd8f325",
							"name": "Bad Request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/order/operations?contractId=1283618026",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"order",
										"operations"
									],
									"query": [
										{
											"key": "contractId",
											"value": "1283618026",
											"description": "(Required) contractId"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "5a9fcff1-bd9d-4b78-9e19-89a874cc120a",
							"name": "Unauthorized",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/order/operations?contractId=1283618026",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"order",
										"operations"
									],
									"query": [
										{
											"key": "contractId",
											"value": "1283618026",
											"description": "(Required) contractId"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "1a4921e6-60ce-49dc-9818-707f5d130c94",
							"name": "Forbidden",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/order/operations?contractId=1283618026",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"order",
										"operations"
									],
									"query": [
										{
											"key": "contractId",
											"value": "1283618026",
											"description": "(Required) contractId"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "8a78e5c0-ff53-415c-893f-dc12f890b872",
							"name": "Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/order/operations?contractId=1283618026",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"order",
										"operations"
									],
									"query": [
										{
											"key": "contractId",
											"value": "1283618026",
											"description": "(Required) contractId"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "a5281387-2770-48d5-8778-206cb46d46ba",
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/order/operations?contractId=1283618026",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"order",
										"operations"
									],
									"query": [
										{
											"key": "contractId",
											"value": "1283618026",
											"description": "(Required) contractId"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "915ca061-d75d-4447-8c48-6bc260ad6df6",
							"name": "Server Error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/order/operations?contractId=1283618026",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"order",
										"operations"
									],
									"query": [
										{
											"key": "contractId",
											"value": "1283618026",
											"description": "(Required) contractId"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "324784f0-81fc-4dbd-a0c7-0eb00cd4efe9",
							"name": "Service Unavailable",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/order/operations?contractId=1283618026",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"order",
										"operations"
									],
									"query": [
										{
											"key": "contractId",
											"value": "1283618026",
											"description": "(Required) contractId"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "5: Modify state of current basket",
					"id": "9f634287-5ff8-4529-97ac-4f2bbac551f8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"contractId\": 1283618026\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/contracting/basket",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"contracting",
								"basket"
							]
						},
						"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
					},
					"response": [
						{
							"id": "92ab2afa-5df0-4680-aa64-f31f56b1cf71",
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"contractId\": 1283618026\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "7577eecf-458b-445f-9681-51d7f8fc91c6",
							"name": "Bad Request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"contractId\": 1283618026\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "da5bd4c5-5c4b-471d-a44a-26e07cd8b22d",
							"name": "Unauthorized",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"contractId\": 1283618026\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "e4155ff6-4831-4095-ae79-86c9333d21ee",
							"name": "Forbidden",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"contractId\": 1283618026\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "06be21d5-d8bb-4f2a-a441-6d4825c61d34",
							"name": "Not Found",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"contractId\": 1283618026\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "af8c5927-f7bd-4c95-bac2-e894a26dab43",
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"contractId\": 1283618026\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "a4ea9fce-33fa-40e5-8290-cc90586189d6",
							"name": "Server Error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"contractId\": 1283618026\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "ff93c25d-806f-4b1a-ab7d-92e2f0297397",
							"name": "Service Unavailable",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"contractId\": 1283618026\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "6: Get basket content with products tree and prices",
					"id": "d2458717-56d7-499e-9b94-8fcbe66e18d1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/contracting/basket?sessionId=0f335293-d987-4529-be6d-aefed75dcdd2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"contracting",
								"basket"
							],
							"query": [
								{
									"key": "sessionId",
									"value": "0f335293-d987-4529-be6d-aefed75dcdd2"
								}
							]
						},
						"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
					},
					"response": [
						{
							"id": "64f5014d-bc47-45cb-8a49-4887647e97e1",
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=0f335293-d987-4529-be6d-aefed75dcdd2",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "0f335293-d987-4529-be6d-aefed75dcdd2"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "a3a51333-aab5-4791-bf46-24b1117f76c5",
							"name": "Bad Request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=0f335293-d987-4529-be6d-aefed75dcdd2",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "0f335293-d987-4529-be6d-aefed75dcdd2"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "eef59786-1de0-4cbc-bab0-1d4193bf4ca2",
							"name": "Unauthorized",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=0f335293-d987-4529-be6d-aefed75dcdd2",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "0f335293-d987-4529-be6d-aefed75dcdd2"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "24f74e58-f006-43b2-b2ad-4c81f4b993c1",
							"name": "Forbidden",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=0f335293-d987-4529-be6d-aefed75dcdd2",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "0f335293-d987-4529-be6d-aefed75dcdd2"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "ad773173-c938-461e-b738-224f916274f1",
							"name": "Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=0f335293-d987-4529-be6d-aefed75dcdd2",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "0f335293-d987-4529-be6d-aefed75dcdd2"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "a984c2f5-dccc-4014-98de-3778004fa19a",
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=0f335293-d987-4529-be6d-aefed75dcdd2",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "0f335293-d987-4529-be6d-aefed75dcdd2"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "413a4e0e-497d-4aec-9695-87d2ebf03c57",
							"name": "Server Error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=0f335293-d987-4529-be6d-aefed75dcdd2",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "0f335293-d987-4529-be6d-aefed75dcdd2"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "e2ce31e0-778b-41f4-b876-de60eac0c77e",
							"name": "Service Unavailable",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=0f335293-d987-4529-be6d-aefed75dcdd2",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "0f335293-d987-4529-be6d-aefed75dcdd2"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "7: Add Items from contract",
					"id": "f6f49e52-2db3-439a-85e9-987e185a7812",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"productActions\": [\n    {\n      \"amount\": 1,\n      \"productId\": \"TreeNode_29210_1664884678688\",\n      \"type\": \"REMOVE\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/contracting/basket?sessionId=0f335293-d987-4529-be6d-aefed75dcdd2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"contracting",
								"basket"
							],
							"query": [
								{
									"key": "sessionId",
									"value": "0f335293-d987-4529-be6d-aefed75dcdd2"
								}
							]
						},
						"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
					},
					"response": [
						{
							"id": "9807613a-2da0-4b02-bd48-a515365db9d2",
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"productActions\": [\n    {\n      \"amount\": 1,\n      \"productId\": \"TreeNode_29210_1664884678688\",\n      \"type\": \"REMOVE\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=0f335293-d987-4529-be6d-aefed75dcdd2",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "0f335293-d987-4529-be6d-aefed75dcdd2"
										}
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "e037675f-8245-43bf-98d0-f859399a04dd",
							"name": "Bad Request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"productActions\": [\n    {\n      \"amount\": 1,\n      \"productId\": \"TreeNode_29210_1664884678688\",\n      \"type\": \"REMOVE\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=0f335293-d987-4529-be6d-aefed75dcdd2",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "0f335293-d987-4529-be6d-aefed75dcdd2"
										}
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "070a67ca-b71c-484d-93f7-6e03e49cc4b8",
							"name": "Unauthorized",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"productActions\": [\n    {\n      \"amount\": 1,\n      \"productId\": \"TreeNode_29210_1664884678688\",\n      \"type\": \"REMOVE\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=0f335293-d987-4529-be6d-aefed75dcdd2",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "0f335293-d987-4529-be6d-aefed75dcdd2"
										}
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "86ab4641-9d26-498c-808d-244f2f7f5d25",
							"name": "Forbidden",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"productActions\": [\n    {\n      \"amount\": 1,\n      \"productId\": \"TreeNode_29210_1664884678688\",\n      \"type\": \"REMOVE\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=0f335293-d987-4529-be6d-aefed75dcdd2",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "0f335293-d987-4529-be6d-aefed75dcdd2"
										}
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "baa05887-b749-4ce7-8a03-ce224fbc53de",
							"name": "Not Found",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"productActions\": [\n    {\n      \"amount\": 1,\n      \"productId\": \"TreeNode_29210_1664884678688\",\n      \"type\": \"REMOVE\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=0f335293-d987-4529-be6d-aefed75dcdd2",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "0f335293-d987-4529-be6d-aefed75dcdd2"
										}
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "889b85a8-2bfe-425b-b1a6-04f1e742ee37",
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"productActions\": [\n    {\n      \"amount\": 1,\n      \"productId\": \"TreeNode_29210_1664884678688\",\n      \"type\": \"REMOVE\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=0f335293-d987-4529-be6d-aefed75dcdd2",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "0f335293-d987-4529-be6d-aefed75dcdd2"
										}
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "9c91d260-b66f-4058-a238-7b480df38143",
							"name": "Server Error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"productActions\": [\n    {\n      \"amount\": 1,\n      \"productId\": \"TreeNode_29210_1664884678688\",\n      \"type\": \"REMOVE\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=0f335293-d987-4529-be6d-aefed75dcdd2",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "0f335293-d987-4529-be6d-aefed75dcdd2"
										}
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "3517c680-f9fa-4175-a14f-d76bbe8ee771",
							"name": "Service Unavailable",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"productActions\": [\n    {\n      \"amount\": 1,\n      \"productId\": \"TreeNode_29210_1664884678688\",\n      \"type\": \"REMOVE\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=0f335293-d987-4529-be6d-aefed75dcdd2",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "0f335293-d987-4529-be6d-aefed75dcdd2"
										}
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "8: Get basket content with products tree and prices",
					"id": "5d4e7ff7-7e09-4ca9-b53f-537854fcca28",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/contracting/basket?sessionId=0f335293-d987-4529-be6d-aefed75dcdd2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"contracting",
								"basket"
							],
							"query": [
								{
									"key": "sessionId",
									"value": "0f335293-d987-4529-be6d-aefed75dcdd2"
								}
							]
						},
						"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
					},
					"response": [
						{
							"id": "cda6cfda-44d1-4f99-a943-ece70258504c",
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=0f335293-d987-4529-be6d-aefed75dcdd2",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "0f335293-d987-4529-be6d-aefed75dcdd2"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "eb16c494-5265-457c-825e-9d5569288e41",
							"name": "Bad Request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=0f335293-d987-4529-be6d-aefed75dcdd2",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "0f335293-d987-4529-be6d-aefed75dcdd2"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "623687e8-1091-4c2f-b033-bd1e445d30e2",
							"name": "Unauthorized",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=0f335293-d987-4529-be6d-aefed75dcdd2",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "0f335293-d987-4529-be6d-aefed75dcdd2"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "452b15c4-2dc0-4ccd-8c68-6b1dc1450da6",
							"name": "Forbidden",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=0f335293-d987-4529-be6d-aefed75dcdd2",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "0f335293-d987-4529-be6d-aefed75dcdd2"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "9e8d84ac-3920-4d2d-9774-6368e68c9d35",
							"name": "Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=0f335293-d987-4529-be6d-aefed75dcdd2",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "0f335293-d987-4529-be6d-aefed75dcdd2"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "c6609b60-a5e8-4877-97cc-3e28fe676bb8",
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=0f335293-d987-4529-be6d-aefed75dcdd2",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "0f335293-d987-4529-be6d-aefed75dcdd2"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "22d27507-b5ea-4778-98c0-ddaf42df3541",
							"name": "Server Error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=0f335293-d987-4529-be6d-aefed75dcdd2",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "0f335293-d987-4529-be6d-aefed75dcdd2"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "527f9fca-57eb-4062-9808-71fdbccfcc06",
							"name": "Service Unavailable",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contracting/basket?sessionId=0f335293-d987-4529-be6d-aefed75dcdd2",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "0f335293-d987-4529-be6d-aefed75dcdd2"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "9: order Basket",
					"id": "49074890-9070-4944-8187-8a9f4f4819dc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"referenceNumber\": \"fill it for tracking\",\r\n  \"wishDate\": \"2024-03-02T10:49:00.005Z\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/contracting/basket/order?sessionId=0f335293-d987-4529-be6d-aefed75dcdd2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"contracting",
								"basket",
								"order"
							],
							"query": [
								{
									"key": "sessionId",
									"value": "0f335293-d987-4529-be6d-aefed75dcdd2"
								}
							]
						},
						"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
					},
					"response": [
						{
							"id": "28976823-f939-42b7-a807-714866dbc85e",
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"referenceNumber\": \"fill it for tracking\",\r\n  \"wishDate\": \"2024-03-02T10:49:00.005Z\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket/order?sessionId=0f335293-d987-4529-be6d-aefed75dcdd2",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket",
										"order"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "0f335293-d987-4529-be6d-aefed75dcdd2"
										}
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "a25d90a6-7fd0-49c4-baee-ccb6cb6701b7",
							"name": "Bad Request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"referenceNumber\": \"fill it for tracking\",\r\n  \"wishDate\": \"2024-03-02T10:49:00.005Z\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket/order?sessionId=0f335293-d987-4529-be6d-aefed75dcdd2",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket",
										"order"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "0f335293-d987-4529-be6d-aefed75dcdd2"
										}
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "0a2bb47f-6709-432f-b0d9-27d737f111c0",
							"name": "Unauthorized",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"referenceNumber\": \"fill it for tracking\",\r\n  \"wishDate\": \"2024-03-02T10:49:00.005Z\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket/order?sessionId=0f335293-d987-4529-be6d-aefed75dcdd2",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket",
										"order"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "0f335293-d987-4529-be6d-aefed75dcdd2"
										}
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "71dd5159-fa8c-4986-96f4-258adf9cc19f",
							"name": "Forbidden",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"referenceNumber\": \"fill it for tracking\",\r\n  \"wishDate\": \"2024-03-02T10:49:00.005Z\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket/order?sessionId=0f335293-d987-4529-be6d-aefed75dcdd2",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket",
										"order"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "0f335293-d987-4529-be6d-aefed75dcdd2"
										}
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "a06aae83-e412-4bb8-b00a-857c16396272",
							"name": "Not Found",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"referenceNumber\": \"fill it for tracking\",\r\n  \"wishDate\": \"2024-03-02T10:49:00.005Z\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket/order?sessionId=0f335293-d987-4529-be6d-aefed75dcdd2",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket",
										"order"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "0f335293-d987-4529-be6d-aefed75dcdd2"
										}
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "c6b9bd18-8a3a-4c14-9a64-3e742e96f9c7",
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"referenceNumber\": \"fill it for tracking\",\r\n  \"wishDate\": \"2024-03-02T10:49:00.005Z\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket/order?sessionId=0f335293-d987-4529-be6d-aefed75dcdd2",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket",
										"order"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "0f335293-d987-4529-be6d-aefed75dcdd2"
										}
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "589aed1b-5c02-461c-ba5e-1ec0224ea4c3",
							"name": "Server Error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"referenceNumber\": \"fill it for tracking\",\r\n  \"wishDate\": \"2024-03-02T10:49:00.005Z\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket/order?sessionId=0f335293-d987-4529-be6d-aefed75dcdd2",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket",
										"order"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "0f335293-d987-4529-be6d-aefed75dcdd2"
										}
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "b4d44125-ee00-4cb7-b099-7ef3e3cd8c03",
							"name": "Service Unavailable",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"referenceNumber\": \"fill it for tracking\",\r\n  \"wishDate\": \"2024-03-02T10:49:00.005Z\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/contracting/basket/order?sessionId=0f335293-d987-4529-be6d-aefed75dcdd2",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contracting",
										"basket",
										"order"
									],
									"query": [
										{
											"key": "sessionId",
											"value": "0f335293-d987-4529-be6d-aefed75dcdd2"
										}
									]
								},
								"description": "<div style='max-height: 400px; overflow: auto; width: 100%'>This is a central enpoint for contracting or modifing products. Depending on `change` object passed to this method you can initialize basket, mark product to be contracted, mark product to be terminated, set some parameter for contracting process and so on. Below you will find example scenarios of using basket. \n\n# Modify contract\n\n1. Find contract to modify using: `GET /contract/all`\n2. Check if contract modification is possible for selected contract using:  `GET /order/operations`. Check flags for `modify` in response   (`visible` and `enabled` are set to true).\n3. Initialize basket using selected contract: `POST /contracting/basket`\n   ```\n   {\n       \"contractId\": [id of contract to be modified]\n   }\n   ```\n4. Get basket content (including products tree): `GET /contracting/basket`\n5. Now you can select and deselect products (you can send more than one - every change will be proceeded one after another) using: `POST /contracting/basket`\n   ```\n   {\n     \"productActions\": [{\n       \"productId\": [id field from tree],\n       \"amount\": [optional number of products to be put - important only for PUT action, min 1, max 100, default 1],\n       \"type\": [\"PUT\" | \"REMOVE\"]\n     }]\n   }\n   ```\n   Sending multiply changes should be used mainly if you are sure all changes can be applied (i.e. one action won't exclude following ones). \n   Step 4 and 5 can be repeated multiply times.\n6. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n\n# Create new contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. Get basket content (including products tree): `GET /contracting/basket`\n4. Select and deselect products - in the same way as during contract modification\n5. Right now you can fill in some characteristic values. Characteristics are all values which are needed to fully configured\n   the future contract. The set of characteristics depends on previously selected products (for example you will receive\n   different values for mobile subscription and for fixed one). What is more, it is possible that setting some characteristics\n   can enable another ones. So after every such action you should check basket content. Let's assume you've selected in the previous\n   step `IP Centrex`. In such situation you will get in your basket something like this:\n   ```\n   (...)\n     \"characteristics\": {\n       \"firstName\": {\n         \"name\": \"firstName\",\n         \"value\": \"Jan\",\n         \"possibleValues\": [{\"value\": \"Jan\"}]\n       },\n       \"lastName\": {\n         \"name\": \"lastName\",\n         \"value\": \"Kowalski\",\n         \"possibleValues\": [{\"value\": \"Kowalski\"}]\n       },\n       \"loginExtension\": {\n         \"name\": \"loginExtension\"\n       },\n       \"loginExtensionPrefix\": {\n         \"name\": \"loginExtensionPrefix\",\n         \"value\": \"\",\n         \"possibleValues\": [{\"value\": \"\"}]\n       },\n       \"deviceOption\": {\n         \"name\": \"deviceOption\",\n         \"possibleValues\": [\n           {\n             \"value\": \"Off-The-Shelf\",\n             \"caption\": {\"en\": \"Off-The-Shelf\", \"nl\": \"Off-The-Shelf\"}\n           },\n           {\n             \"value\": \"Deviceless\",\n             \"caption\": {\"en\": \"Deviceless\", \"nl\": \"Deviceless\"}\n           },\n           {\n             \"value\": \"Existing Shared\",\n             \"caption\": {\"en\": \"Existing Shared\", \"nl\": \"Existing Shared\"}\n           }\n         ]\n       },\n       \"fixedNumber\": {\n         \"name\": \"fixedNumber\"\n       },\n       \"email\": {\n         \"name\": \"email\",\n         \"value\": \"jan.kowalski@comarch.com\",\n         \"possibleValues\": [{\"value\": \"jan.kowalski@comarch.com\"}]\n       },\n       \"group\": {\n         \"name\": \"group\",\n         \"possibleValues\": [\n           {\n             \"value\": \"166715563\",\n             \"caption\": {\"en\": \"Codemaster Group 1\", \"nl\": \"Codemaster Group 1\"}\n           },\n           {\n             \"value\": \"166715564\",\n             \"caption\": {\"en\": \"Codemaster Group 2\", \"nl\": \"Codemaster Group 2\"}\n           }\n         ]\n       }\n     }\n   (...)\n   ```\n   Some of these characteristics are read-only as they have only one possible value which is prefilled and can't be changed    to anything else (for example `firstName`, `lastName`). They are included in the response for informational purpose    and can be presented on a front-end. The rest of characteristics should be entered:\n   * `loginExtension`,\n   * `deviceOption`,\n   * `fixedNumber`,\n   * `group`.\n   Setting characteristic value is done through the same `POST /contracting/basket` endpoint, but now we are going to use `characteristicActions` key, for example:\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": \"deviceOption\",\n       \"value\": \"Off-The-Shelf\"\n     }]\n   }\n   ```\n   After `deviceOption` is set to `Off-The-Shelf` you will receive additionally `deviceType` characteristic to set.\n   Theoretically, you can merge many characteristic requests into one request by passing a list of actions instead   of single one. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order   may be important (for example you need set ` deviceOption` characteristic before `deviceType`). Or you can just    make separated request for each individual value. It's up to you.\n   The process of consulting basket content and setting characteristics value should be repeated until all required values are set.6. Next, if you decide to give a new sim card (possible only when you haven't ordered a new one), you should `POST /basket` the following object:\n   ```\n   {\"simCardNumber\": <short uiccid>}\n   ```\n7. You can create order with introduced changes via `POST /contracting/basket/order`\n   ```\n   {\n     \"referenceNumber\": [reference number],\n     \"wishDate\": [date when the order is going to be started]\n   }\n   ```\n   Please note that if you selected some order you have to extend this object with address section.\n\n# Create new contract (by template)\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Initialize basket using selected account (subscriber): `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step]\n   }\n   ```\n3. From now you can get template list using `GET /contracing/basket/templates`\n4. You can use one of those templates (select it) using `POST /contracting/basket`:\n   ```\n   {\n     \"templateId\": [template id]\n   }\n   ```\n5. Get basket content (including products tree): `GET /contracting/basket`\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Reactivate contract\n\n1. Find subscriber for whom you want to create new contract, e.g. `GET /hierarchy/subscribers`\n2. Find service request in which contract was terminated, e.g. `GET /track-and-trace/service-requests`\n3. Initialize basket using selected account (subscriber) and contract: `POST /contracting/basket`\n   ```\n   {\n     \"accountGroupId\": [subscriber id found in previous step],\n     \"orderId\": [termination order id found in previous step]\n   }\n   ```\n4. A read-only characteristic `previousPhoneNumber` is initialized. You can use it to get the previous phone number and present it to an end user.\n\nThe rest of steps is analogous to standard way of creating contract.\n\n# Port in number\n\nInitials steps are the same as for creating a new contract. After configuring products tree (by hand or by template) you should be able to set porting characteristics. Please note that this characteristic will be only available if you select mobile product. You can check possible list of characteristics to be set using: `GET /basket` or `GET /basket/characteristics`. Example response after selecting mobile product (fragment of `GET /basket` response):\n\n```\n(...)\n\n  \"characteristics\": {\n    \"porting\": {\n      \"name\": \"porting\",\n      \"value\": \"false\",\n      \"possibleValues\": [\n        {\n          \"value\": \"false\",\n          \"caption\": {\n            \"en\": \"false\",\n            \"nl\": \"false\"\n          }\n        },\n        {\n          \"value\": \"true\",\n          \"caption\": {\n            \"en\": \"true\",\n            \"nl\": \"true\"\n          }\n        }\n      ]\n    }\n  }\n\n(...)\n```\n\nThe response says that:\n  * you can set `porting` characteristic (field `name`),\n  * current value is `false` (field `value`),\n  * it can take one of two values: `true` or `false` (field `possibleValues`).\n\nTo switch porting value to `true`, you have to make the following request:\n\n```\n{\n  \"characteristicActions\": [{\n    \"name\": \"porting\",\n    \"value\": \"true\"\n  }]\n}\n```\n\nAfter setting porting to `true` there will be possibility to set few more porting-specific parameters (you can get new list of characteristics again using `GET /basket`):\n  * `phoneNumber` - required, regex: `316\\d{8} | 3197\\d{9}`\n  * `customerNumber` - required, length <= 70\n  * `customerName`, lenght <= 20\n  * `keepExistingSimCard` - default `false`\n  * `note` - length <= 60\n\nTheoretically, you can merge characteristic requests into one request by passing a list of actions instead of single action. But please be aware, that in such case they are proceeded sequentially one-by-one, so their order may be important (for example you need set `porting` characteristic before `phoneNumber`). Or you can just make separated request for each individual value. It's up to you.\n\nTurning on `porting` flag additionally disable possibility to get more main products and contract additional main products such as handsets, sim cards etc. During porting contracting such products is not possible.\n\nIf sent characteristic value does not met validation criteria an error is raised (`400 Bad Request`) with possible code values:\n  * `INVALID_CUSTOMER_NAME`,\n  * `INVALID_CUSTOMER_NUMBER`,\n  * `INVALID_NOTE`,\n  * `BASKET_INVALID`,\n  * `INVALID_MSISDN_ALREADY_EXISTS_FOR_A_CUSTOMER`,\n  * `INVALID_MSISDN_IS_BLOCKED`,\n  * `INVALID_MSISDN_FORMAT_NOT_VALID`,\n  * `INVALID_MSISDN_LENGTH_FOR_THIS_PRODUCT`,\n  * `INVALID_MSISDN_FOR_CUSTOMER_OFFER`,\n\nNext, if you decide to give a new sim card (possible only when `keepExistingSimCard` = `false`), you should `POST /basket` the following object:\n\n```\n{\n  \"simCardNumber\": <short uiccid>\n}\n```\n\nto pass short UICCD of ported number.\n\nKeeping existing sim card is only possible for phone number registered currently in KPN (internal porting).\n\nStart a new order is possible via 'POST /basket/order'. You can pass:\n  * `wishDate` - preferred date of porting (null is treated as ASAP),\n  * `referenceNumber`.\n\nWe do not pass address to backend.\n\nPossible error codes (for `400 Bad Request` response):\n  * `BASKET_INVALID` - not all parameters have been set, or product tree is in error state,\n  * `INVALID_WISH_DATE` - as wish date should be <= current date + 90, and can not be set on holiday.\n\n# Combine fixed and mobile contract\n\n1. Find first contract to combine using: `GET /contract/all`\n2. Check if contract combination is possible for selected contract using:  `GET /order/operations`. Check flags for `combineFixedMobile` in response   (`visible` and `enabled` are set to true).\n3. Depending on previous contract type find second contract using `GET /contracting/id/{id}/vamo/fixed-numbers` or `GET /contracting/id/{id}/vamo/mobile-numbers`\n4. Initialize basket using selected contracts: `POST /contracting/basket`\n   ```\n   {\n       \"fixedContractId\": [id of fixed contract],\n       \"mobileContractId\": [id of mobile contract],\n   }\n   ```\n5. Get list of possible characterists to bet set (for example pbx groups, service types, combine types). The response contains also current value    of every characteristics: `GET /contracting/basket/characteristics\n6. Set selected characteristics using modify basket (you can send more than one - every change will be proceeded one after another)\n   ```\n   {\n     \"characteristicActions\": [{\n       \"name\": [characteristic name],\n       \"value\": [characteristic value]\n     }]\n   }\n   Step 5 and 6 can be repeated multiply times.\n7. Get products tree: `GET /contracting/basket/products`\n\nThe rest of steps are still not implemented.\n# Modify existing template\n1. Find valid template to modify using: `GET /contracting/templates`\n2. Initialize basket using selected template: `POST /contracting/basket`\n   ```\n   {\n       \"templatedIdToModify\": [id of template to be modified]\n   }\n   ```\n3. You can preview and modify basket state the same way as during create new subscrition or dduring contract modification\n4. When the basket is in valid state you can save all change using `POST /contracting/basket/modify-template`\n</div>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "10:Get service requests details",
					"id": "f18f8a17-8b7a-4f1e-96d8-94b6ec789920",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/track-and-trace/service-requests/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"track-and-trace",
								"service-requests",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "49579318",
									"description": "(Required) id"
								}
							]
						},
						"description": "The possible keys of `attributes` map in response object:<div style='max-height: 400px; overflow: auto; width: 100%'>\n<dl>\n<dt><b>Attribute name</b></dt><dd><b>Meaning</b></dd>\n<dt>login</dt><dd>Login</dd>\n<dt>roles</dt><dd>Roles</dd>\n<dt>firstName</dt><dd>First name</dd>\n<dt>lastName</dt><dd>Last name</dd>\n<dt>surnamePrefix</dt><dd>Surname prefix</dd>\n<dt>email</dt><dd>E-mail</dd>\n<dt>dateOfBirth</dt><dd>Date of birth</dd>\n<dt>vip</dt><dd>VIP</dd>\n<dt>employeeNumber</dt><dd>Employee number</dd>\n<dt>gender</dt><dd>Gender</dd>\n<dt>salutation</dt><dd>Salutation</dd>\n<dt>preferredLanguage</dt><dd>Preferred language</dd>\n<dt>comments</dt><dd>Comments</dd>\n<dt>accesspointNameMSISDN</dt><dd>Mobile number</dd>\n<dt>accesspointNameSIM</dt><dd>SIM card number</dd>\n<dt>accesspointNameIMSI</dt><dd>IMSI</dd>\n<dt>IMEI</dt><dd>IMEI</dd>\n<dt>Hanset_IMEI_number</dt><dd>IMEI</dd>\n<dt>accesspointNameFixedNumber</dt><dd>Fixed Number</dd>\n<dt>activeTo</dt><dd>Active to</dd>\n<dt>contractName</dt><dd>Subscription or device name</dd>\n<dt>totalOnetimePrice</dt><dd>One time price</dd>\n<dt>totalRecurrentPrice</dt><dd>Recurring price</dd>\n<dt>deferredPrice</dt><dd>Deferred price</dd>\n<dt>newUiccId</dt><dd>New SIM card number</dd>\n<dt>movedGroupName</dt><dd>Moved account</dd>\n<dt>subscriberAccountId</dt><dd>Old location</dd>\n<dt>destinationAccount</dt><dd>New location</dd>\n<dt>selectedDuoUiccid</dt><dd>Selected Duo SIM card number</dd>\n<dt>projectId</dt><dd>Project ID</dd>\n<dt>new_fixed_number</dt><dd>New fixed number</dd>\n<dt>new_desk_number</dt><dd>New extension</dd>\n<dt>oldUserGroupName</dt><dd>Previous user group</dd>\n<dt>newUserGroupName</dt><dd>New user group</dd>\n<dt>vpnName</dt><dd>VPN name</dd>\n<dt>deskNumber</dt><dd>Extension</dd>\n<dt>accesspointNameDeskNumber</dt><dd>Extension</dd>\n<dt>mobileAddress</dt><dd>Mobile number</dd>\n<dt>enterpriseName</dt><dd>Enterprise name</dd>\n<dt>enterpriseID</dt><dd>Enterprise ID</dd>\n<dt>mobilityGroupName</dt><dd>Fixed-Mobile PBX name</dd>\n<dt>userGroupName</dt><dd>User group</dd>\n<dt>enterpriseUserGroup</dt><dd>User group</dd>\n<dt>initialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>sipAccountName</dt><dd>SIP account name</dd>\n<dt>accessInstanceAttributeinitialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>accesspointNameQueuePhoneNumber</dt><dd>Queue phone number</dd>\n<dt>accesspointNameSipAccountName</dt><dd>SIP account name</dd>\n<dt>subscriptionAmount</dt><dd>New subscription amount</dd>\n<dt>contract_contact_name</dt><dd>Contract contact person (name)</dd>\n<dt>contract_contact_phone</dt><dd>Contract contact person (phone)</dd>\n<dt>contract_contact_mail</dt><dd>Contract contact person (mail)</dd>\n<dt>financial_contact_name</dt><dd>Financial contact person (name)</dd>\n<dt>financial_contact_phone</dt><dd>Financial contact person (phone)</dd>\n<dt>financial_contact_mail</dt><dd>Financial contact person (mail)</dd>\n<dt>technical_contact_name</dt><dd>Technical contact Person (name)</dd>\n<dt>technical_contact_phone</dt><dd>Technical contact Person (phone)</dd>\n<dt>technical_contact_mail</dt><dd>Technical contact Person (mail)</dd>\n<dt>deviceOption</dt><dd>Device option</dd>\n<dt>deviceType_label</dt><dd>Device type</dd>\n<dt>macAddress</dt><dd>Mac address</dd>\n<dt>deviceName</dt><dd>Device name</dd>\n<dt>sacGroupAccountId_label</dt><dd>Location account</dd>\n<dt>groupId</dt><dd>Location</dd>\n<dt>vGroupMovingToID</dt><dd>New location</dd>\n<dt>pbxName</dt><dd>PBX</dd>\n<dt>groupCitemId_label</dt><dd>Group</dd>\n<dt>Fixed</dt><dd>Alternate fixed number</dd>\n<dt>DeskNumber</dt><dd>Alternate extension</dd>\n<dt>billing_retention_period</dt><dd>Financial data retention period (months)</dd>\n<dt>managedGroupName</dt><dd>Authorized for</dd>\n<dt>subscriptionType</dt><dd>Subscription type</dd>\n<dt>CurrentNetworkOperator</dt><dd>Current network operator</dd>\n<dt>CurrentServiceProvider</dt><dd>Current service provider</dd>\n<dt>Customer_name_at_current_provider</dt><dd>Customer name at current provider</dd>\n<dt>Current_contract_number</dt><dd>Customer number at current provider</dd>\n<dt>UIccId</dt><dd>Current SIM card number</dd>\n<dt>Initials</dt><dd>Initials</dd>\n<dt>FamilyNamePrefix</dt><dd>Family name prefix</dd>\n<dt>FamilyName</dt><dd>Family name</dd>\n<dt>delivery_TT_id</dt><dd>Delivery Track&trace ID</dd>\n<dt>IsAppleDEP</dt><dd>Apple DEP</dd>\n<dt>IsSamsungKNOX</dt><dd>Samsung KNOX</dd>\n<dt>keepCurrentSim</dt><dd>Keep existing SIM card</dd>\n<dt>Note</dt><dd>Note</dd>\n<dt>Porting_wish_date</dt><dd>Preferred transition date</dd>\n<dt>returnReason</dt><dd>Reason for return</dd>\n<dt>returnRemarks</dt><dd>Remarks</dd>\n<dt>companyName</dt><dd>Company name</dd>\n<dt>companyNamePronounciation</dt><dd>Comapny name pronounciation</dd>\n<dt>businessVoiceMailMessageText</dt><dd>Chosen business voicemail message</dd>\n</dl>\n<div>\n<style type=\"text/css\">  dl {\n    display: flex;\n    flex-flow: row wrap;\n  }\n  dt {\n    flex-basis: 20%;\n    text-align: right;\n  }\n  dd {\n    flex-basis: 70%;\n    flex-grow: 1;\n  }\n</style>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_orders_track_and_trace</li><li>privileges_orders_authorization</li></ul>"
					},
					"response": [
						{
							"id": "eca45afa-9415-4299-9db8-d650454cc91f",
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/track-and-trace/service-requests/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"track-and-trace",
										"service-requests",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "49579318",
											"description": "(Required) id"
										}
									]
								},
								"description": "The possible keys of `attributes` map in response object:<div style='max-height: 400px; overflow: auto; width: 100%'>\n<dl>\n<dt><b>Attribute name</b></dt><dd><b>Meaning</b></dd>\n<dt>login</dt><dd>Login</dd>\n<dt>roles</dt><dd>Roles</dd>\n<dt>firstName</dt><dd>First name</dd>\n<dt>lastName</dt><dd>Last name</dd>\n<dt>surnamePrefix</dt><dd>Surname prefix</dd>\n<dt>email</dt><dd>E-mail</dd>\n<dt>dateOfBirth</dt><dd>Date of birth</dd>\n<dt>vip</dt><dd>VIP</dd>\n<dt>employeeNumber</dt><dd>Employee number</dd>\n<dt>gender</dt><dd>Gender</dd>\n<dt>salutation</dt><dd>Salutation</dd>\n<dt>preferredLanguage</dt><dd>Preferred language</dd>\n<dt>comments</dt><dd>Comments</dd>\n<dt>accesspointNameMSISDN</dt><dd>Mobile number</dd>\n<dt>accesspointNameSIM</dt><dd>SIM card number</dd>\n<dt>accesspointNameIMSI</dt><dd>IMSI</dd>\n<dt>IMEI</dt><dd>IMEI</dd>\n<dt>Hanset_IMEI_number</dt><dd>IMEI</dd>\n<dt>accesspointNameFixedNumber</dt><dd>Fixed Number</dd>\n<dt>activeTo</dt><dd>Active to</dd>\n<dt>contractName</dt><dd>Subscription or device name</dd>\n<dt>totalOnetimePrice</dt><dd>One time price</dd>\n<dt>totalRecurrentPrice</dt><dd>Recurring price</dd>\n<dt>deferredPrice</dt><dd>Deferred price</dd>\n<dt>newUiccId</dt><dd>New SIM card number</dd>\n<dt>movedGroupName</dt><dd>Moved account</dd>\n<dt>subscriberAccountId</dt><dd>Old location</dd>\n<dt>destinationAccount</dt><dd>New location</dd>\n<dt>selectedDuoUiccid</dt><dd>Selected Duo SIM card number</dd>\n<dt>projectId</dt><dd>Project ID</dd>\n<dt>new_fixed_number</dt><dd>New fixed number</dd>\n<dt>new_desk_number</dt><dd>New extension</dd>\n<dt>oldUserGroupName</dt><dd>Previous user group</dd>\n<dt>newUserGroupName</dt><dd>New user group</dd>\n<dt>vpnName</dt><dd>VPN name</dd>\n<dt>deskNumber</dt><dd>Extension</dd>\n<dt>accesspointNameDeskNumber</dt><dd>Extension</dd>\n<dt>mobileAddress</dt><dd>Mobile number</dd>\n<dt>enterpriseName</dt><dd>Enterprise name</dd>\n<dt>enterpriseID</dt><dd>Enterprise ID</dd>\n<dt>mobilityGroupName</dt><dd>Fixed-Mobile PBX name</dd>\n<dt>userGroupName</dt><dd>User group</dd>\n<dt>enterpriseUserGroup</dt><dd>User group</dd>\n<dt>initialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>sipAccountName</dt><dd>SIP account name</dd>\n<dt>accessInstanceAttributeinitialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>accesspointNameQueuePhoneNumber</dt><dd>Queue phone number</dd>\n<dt>accesspointNameSipAccountName</dt><dd>SIP account name</dd>\n<dt>subscriptionAmount</dt><dd>New subscription amount</dd>\n<dt>contract_contact_name</dt><dd>Contract contact person (name)</dd>\n<dt>contract_contact_phone</dt><dd>Contract contact person (phone)</dd>\n<dt>contract_contact_mail</dt><dd>Contract contact person (mail)</dd>\n<dt>financial_contact_name</dt><dd>Financial contact person (name)</dd>\n<dt>financial_contact_phone</dt><dd>Financial contact person (phone)</dd>\n<dt>financial_contact_mail</dt><dd>Financial contact person (mail)</dd>\n<dt>technical_contact_name</dt><dd>Technical contact Person (name)</dd>\n<dt>technical_contact_phone</dt><dd>Technical contact Person (phone)</dd>\n<dt>technical_contact_mail</dt><dd>Technical contact Person (mail)</dd>\n<dt>deviceOption</dt><dd>Device option</dd>\n<dt>deviceType_label</dt><dd>Device type</dd>\n<dt>macAddress</dt><dd>Mac address</dd>\n<dt>deviceName</dt><dd>Device name</dd>\n<dt>sacGroupAccountId_label</dt><dd>Location account</dd>\n<dt>groupId</dt><dd>Location</dd>\n<dt>vGroupMovingToID</dt><dd>New location</dd>\n<dt>pbxName</dt><dd>PBX</dd>\n<dt>groupCitemId_label</dt><dd>Group</dd>\n<dt>Fixed</dt><dd>Alternate fixed number</dd>\n<dt>DeskNumber</dt><dd>Alternate extension</dd>\n<dt>billing_retention_period</dt><dd>Financial data retention period (months)</dd>\n<dt>managedGroupName</dt><dd>Authorized for</dd>\n<dt>subscriptionType</dt><dd>Subscription type</dd>\n<dt>CurrentNetworkOperator</dt><dd>Current network operator</dd>\n<dt>CurrentServiceProvider</dt><dd>Current service provider</dd>\n<dt>Customer_name_at_current_provider</dt><dd>Customer name at current provider</dd>\n<dt>Current_contract_number</dt><dd>Customer number at current provider</dd>\n<dt>UIccId</dt><dd>Current SIM card number</dd>\n<dt>Initials</dt><dd>Initials</dd>\n<dt>FamilyNamePrefix</dt><dd>Family name prefix</dd>\n<dt>FamilyName</dt><dd>Family name</dd>\n<dt>delivery_TT_id</dt><dd>Delivery Track&trace ID</dd>\n<dt>IsAppleDEP</dt><dd>Apple DEP</dd>\n<dt>IsSamsungKNOX</dt><dd>Samsung KNOX</dd>\n<dt>keepCurrentSim</dt><dd>Keep existing SIM card</dd>\n<dt>Note</dt><dd>Note</dd>\n<dt>Porting_wish_date</dt><dd>Preferred transition date</dd>\n<dt>returnReason</dt><dd>Reason for return</dd>\n<dt>returnRemarks</dt><dd>Remarks</dd>\n<dt>companyName</dt><dd>Company name</dd>\n<dt>companyNamePronounciation</dt><dd>Comapny name pronounciation</dd>\n<dt>businessVoiceMailMessageText</dt><dd>Chosen business voicemail message</dd>\n</dl>\n<div>\n<style type=\"text/css\">  dl {\n    display: flex;\n    flex-flow: row wrap;\n  }\n  dt {\n    flex-basis: 20%;\n    text-align: right;\n  }\n  dd {\n    flex-basis: 70%;\n    flex-grow: 1;\n  }\n</style>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_orders_track_and_trace</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "05dffaa5-61c6-4700-bda2-535e80e26716",
							"name": "Bad Request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/track-and-trace/service-requests/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"track-and-trace",
										"service-requests",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "49579318",
											"description": "(Required) id"
										}
									]
								},
								"description": "The possible keys of `attributes` map in response object:<div style='max-height: 400px; overflow: auto; width: 100%'>\n<dl>\n<dt><b>Attribute name</b></dt><dd><b>Meaning</b></dd>\n<dt>login</dt><dd>Login</dd>\n<dt>roles</dt><dd>Roles</dd>\n<dt>firstName</dt><dd>First name</dd>\n<dt>lastName</dt><dd>Last name</dd>\n<dt>surnamePrefix</dt><dd>Surname prefix</dd>\n<dt>email</dt><dd>E-mail</dd>\n<dt>dateOfBirth</dt><dd>Date of birth</dd>\n<dt>vip</dt><dd>VIP</dd>\n<dt>employeeNumber</dt><dd>Employee number</dd>\n<dt>gender</dt><dd>Gender</dd>\n<dt>salutation</dt><dd>Salutation</dd>\n<dt>preferredLanguage</dt><dd>Preferred language</dd>\n<dt>comments</dt><dd>Comments</dd>\n<dt>accesspointNameMSISDN</dt><dd>Mobile number</dd>\n<dt>accesspointNameSIM</dt><dd>SIM card number</dd>\n<dt>accesspointNameIMSI</dt><dd>IMSI</dd>\n<dt>IMEI</dt><dd>IMEI</dd>\n<dt>Hanset_IMEI_number</dt><dd>IMEI</dd>\n<dt>accesspointNameFixedNumber</dt><dd>Fixed Number</dd>\n<dt>activeTo</dt><dd>Active to</dd>\n<dt>contractName</dt><dd>Subscription or device name</dd>\n<dt>totalOnetimePrice</dt><dd>One time price</dd>\n<dt>totalRecurrentPrice</dt><dd>Recurring price</dd>\n<dt>deferredPrice</dt><dd>Deferred price</dd>\n<dt>newUiccId</dt><dd>New SIM card number</dd>\n<dt>movedGroupName</dt><dd>Moved account</dd>\n<dt>subscriberAccountId</dt><dd>Old location</dd>\n<dt>destinationAccount</dt><dd>New location</dd>\n<dt>selectedDuoUiccid</dt><dd>Selected Duo SIM card number</dd>\n<dt>projectId</dt><dd>Project ID</dd>\n<dt>new_fixed_number</dt><dd>New fixed number</dd>\n<dt>new_desk_number</dt><dd>New extension</dd>\n<dt>oldUserGroupName</dt><dd>Previous user group</dd>\n<dt>newUserGroupName</dt><dd>New user group</dd>\n<dt>vpnName</dt><dd>VPN name</dd>\n<dt>deskNumber</dt><dd>Extension</dd>\n<dt>accesspointNameDeskNumber</dt><dd>Extension</dd>\n<dt>mobileAddress</dt><dd>Mobile number</dd>\n<dt>enterpriseName</dt><dd>Enterprise name</dd>\n<dt>enterpriseID</dt><dd>Enterprise ID</dd>\n<dt>mobilityGroupName</dt><dd>Fixed-Mobile PBX name</dd>\n<dt>userGroupName</dt><dd>User group</dd>\n<dt>enterpriseUserGroup</dt><dd>User group</dd>\n<dt>initialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>sipAccountName</dt><dd>SIP account name</dd>\n<dt>accessInstanceAttributeinitialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>accesspointNameQueuePhoneNumber</dt><dd>Queue phone number</dd>\n<dt>accesspointNameSipAccountName</dt><dd>SIP account name</dd>\n<dt>subscriptionAmount</dt><dd>New subscription amount</dd>\n<dt>contract_contact_name</dt><dd>Contract contact person (name)</dd>\n<dt>contract_contact_phone</dt><dd>Contract contact person (phone)</dd>\n<dt>contract_contact_mail</dt><dd>Contract contact person (mail)</dd>\n<dt>financial_contact_name</dt><dd>Financial contact person (name)</dd>\n<dt>financial_contact_phone</dt><dd>Financial contact person (phone)</dd>\n<dt>financial_contact_mail</dt><dd>Financial contact person (mail)</dd>\n<dt>technical_contact_name</dt><dd>Technical contact Person (name)</dd>\n<dt>technical_contact_phone</dt><dd>Technical contact Person (phone)</dd>\n<dt>technical_contact_mail</dt><dd>Technical contact Person (mail)</dd>\n<dt>deviceOption</dt><dd>Device option</dd>\n<dt>deviceType_label</dt><dd>Device type</dd>\n<dt>macAddress</dt><dd>Mac address</dd>\n<dt>deviceName</dt><dd>Device name</dd>\n<dt>sacGroupAccountId_label</dt><dd>Location account</dd>\n<dt>groupId</dt><dd>Location</dd>\n<dt>vGroupMovingToID</dt><dd>New location</dd>\n<dt>pbxName</dt><dd>PBX</dd>\n<dt>groupCitemId_label</dt><dd>Group</dd>\n<dt>Fixed</dt><dd>Alternate fixed number</dd>\n<dt>DeskNumber</dt><dd>Alternate extension</dd>\n<dt>billing_retention_period</dt><dd>Financial data retention period (months)</dd>\n<dt>managedGroupName</dt><dd>Authorized for</dd>\n<dt>subscriptionType</dt><dd>Subscription type</dd>\n<dt>CurrentNetworkOperator</dt><dd>Current network operator</dd>\n<dt>CurrentServiceProvider</dt><dd>Current service provider</dd>\n<dt>Customer_name_at_current_provider</dt><dd>Customer name at current provider</dd>\n<dt>Current_contract_number</dt><dd>Customer number at current provider</dd>\n<dt>UIccId</dt><dd>Current SIM card number</dd>\n<dt>Initials</dt><dd>Initials</dd>\n<dt>FamilyNamePrefix</dt><dd>Family name prefix</dd>\n<dt>FamilyName</dt><dd>Family name</dd>\n<dt>delivery_TT_id</dt><dd>Delivery Track&trace ID</dd>\n<dt>IsAppleDEP</dt><dd>Apple DEP</dd>\n<dt>IsSamsungKNOX</dt><dd>Samsung KNOX</dd>\n<dt>keepCurrentSim</dt><dd>Keep existing SIM card</dd>\n<dt>Note</dt><dd>Note</dd>\n<dt>Porting_wish_date</dt><dd>Preferred transition date</dd>\n<dt>returnReason</dt><dd>Reason for return</dd>\n<dt>returnRemarks</dt><dd>Remarks</dd>\n<dt>companyName</dt><dd>Company name</dd>\n<dt>companyNamePronounciation</dt><dd>Comapny name pronounciation</dd>\n<dt>businessVoiceMailMessageText</dt><dd>Chosen business voicemail message</dd>\n</dl>\n<div>\n<style type=\"text/css\">  dl {\n    display: flex;\n    flex-flow: row wrap;\n  }\n  dt {\n    flex-basis: 20%;\n    text-align: right;\n  }\n  dd {\n    flex-basis: 70%;\n    flex-grow: 1;\n  }\n</style>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_orders_track_and_trace</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "b53a1133-7415-42a1-a2e9-b4fcf10c54ed",
							"name": "Unauthorized",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/track-and-trace/service-requests/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"track-and-trace",
										"service-requests",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "49579318",
											"description": "(Required) id"
										}
									]
								},
								"description": "The possible keys of `attributes` map in response object:<div style='max-height: 400px; overflow: auto; width: 100%'>\n<dl>\n<dt><b>Attribute name</b></dt><dd><b>Meaning</b></dd>\n<dt>login</dt><dd>Login</dd>\n<dt>roles</dt><dd>Roles</dd>\n<dt>firstName</dt><dd>First name</dd>\n<dt>lastName</dt><dd>Last name</dd>\n<dt>surnamePrefix</dt><dd>Surname prefix</dd>\n<dt>email</dt><dd>E-mail</dd>\n<dt>dateOfBirth</dt><dd>Date of birth</dd>\n<dt>vip</dt><dd>VIP</dd>\n<dt>employeeNumber</dt><dd>Employee number</dd>\n<dt>gender</dt><dd>Gender</dd>\n<dt>salutation</dt><dd>Salutation</dd>\n<dt>preferredLanguage</dt><dd>Preferred language</dd>\n<dt>comments</dt><dd>Comments</dd>\n<dt>accesspointNameMSISDN</dt><dd>Mobile number</dd>\n<dt>accesspointNameSIM</dt><dd>SIM card number</dd>\n<dt>accesspointNameIMSI</dt><dd>IMSI</dd>\n<dt>IMEI</dt><dd>IMEI</dd>\n<dt>Hanset_IMEI_number</dt><dd>IMEI</dd>\n<dt>accesspointNameFixedNumber</dt><dd>Fixed Number</dd>\n<dt>activeTo</dt><dd>Active to</dd>\n<dt>contractName</dt><dd>Subscription or device name</dd>\n<dt>totalOnetimePrice</dt><dd>One time price</dd>\n<dt>totalRecurrentPrice</dt><dd>Recurring price</dd>\n<dt>deferredPrice</dt><dd>Deferred price</dd>\n<dt>newUiccId</dt><dd>New SIM card number</dd>\n<dt>movedGroupName</dt><dd>Moved account</dd>\n<dt>subscriberAccountId</dt><dd>Old location</dd>\n<dt>destinationAccount</dt><dd>New location</dd>\n<dt>selectedDuoUiccid</dt><dd>Selected Duo SIM card number</dd>\n<dt>projectId</dt><dd>Project ID</dd>\n<dt>new_fixed_number</dt><dd>New fixed number</dd>\n<dt>new_desk_number</dt><dd>New extension</dd>\n<dt>oldUserGroupName</dt><dd>Previous user group</dd>\n<dt>newUserGroupName</dt><dd>New user group</dd>\n<dt>vpnName</dt><dd>VPN name</dd>\n<dt>deskNumber</dt><dd>Extension</dd>\n<dt>accesspointNameDeskNumber</dt><dd>Extension</dd>\n<dt>mobileAddress</dt><dd>Mobile number</dd>\n<dt>enterpriseName</dt><dd>Enterprise name</dd>\n<dt>enterpriseID</dt><dd>Enterprise ID</dd>\n<dt>mobilityGroupName</dt><dd>Fixed-Mobile PBX name</dd>\n<dt>userGroupName</dt><dd>User group</dd>\n<dt>enterpriseUserGroup</dt><dd>User group</dd>\n<dt>initialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>sipAccountName</dt><dd>SIP account name</dd>\n<dt>accessInstanceAttributeinitialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>accesspointNameQueuePhoneNumber</dt><dd>Queue phone number</dd>\n<dt>accesspointNameSipAccountName</dt><dd>SIP account name</dd>\n<dt>subscriptionAmount</dt><dd>New subscription amount</dd>\n<dt>contract_contact_name</dt><dd>Contract contact person (name)</dd>\n<dt>contract_contact_phone</dt><dd>Contract contact person (phone)</dd>\n<dt>contract_contact_mail</dt><dd>Contract contact person (mail)</dd>\n<dt>financial_contact_name</dt><dd>Financial contact person (name)</dd>\n<dt>financial_contact_phone</dt><dd>Financial contact person (phone)</dd>\n<dt>financial_contact_mail</dt><dd>Financial contact person (mail)</dd>\n<dt>technical_contact_name</dt><dd>Technical contact Person (name)</dd>\n<dt>technical_contact_phone</dt><dd>Technical contact Person (phone)</dd>\n<dt>technical_contact_mail</dt><dd>Technical contact Person (mail)</dd>\n<dt>deviceOption</dt><dd>Device option</dd>\n<dt>deviceType_label</dt><dd>Device type</dd>\n<dt>macAddress</dt><dd>Mac address</dd>\n<dt>deviceName</dt><dd>Device name</dd>\n<dt>sacGroupAccountId_label</dt><dd>Location account</dd>\n<dt>groupId</dt><dd>Location</dd>\n<dt>vGroupMovingToID</dt><dd>New location</dd>\n<dt>pbxName</dt><dd>PBX</dd>\n<dt>groupCitemId_label</dt><dd>Group</dd>\n<dt>Fixed</dt><dd>Alternate fixed number</dd>\n<dt>DeskNumber</dt><dd>Alternate extension</dd>\n<dt>billing_retention_period</dt><dd>Financial data retention period (months)</dd>\n<dt>managedGroupName</dt><dd>Authorized for</dd>\n<dt>subscriptionType</dt><dd>Subscription type</dd>\n<dt>CurrentNetworkOperator</dt><dd>Current network operator</dd>\n<dt>CurrentServiceProvider</dt><dd>Current service provider</dd>\n<dt>Customer_name_at_current_provider</dt><dd>Customer name at current provider</dd>\n<dt>Current_contract_number</dt><dd>Customer number at current provider</dd>\n<dt>UIccId</dt><dd>Current SIM card number</dd>\n<dt>Initials</dt><dd>Initials</dd>\n<dt>FamilyNamePrefix</dt><dd>Family name prefix</dd>\n<dt>FamilyName</dt><dd>Family name</dd>\n<dt>delivery_TT_id</dt><dd>Delivery Track&trace ID</dd>\n<dt>IsAppleDEP</dt><dd>Apple DEP</dd>\n<dt>IsSamsungKNOX</dt><dd>Samsung KNOX</dd>\n<dt>keepCurrentSim</dt><dd>Keep existing SIM card</dd>\n<dt>Note</dt><dd>Note</dd>\n<dt>Porting_wish_date</dt><dd>Preferred transition date</dd>\n<dt>returnReason</dt><dd>Reason for return</dd>\n<dt>returnRemarks</dt><dd>Remarks</dd>\n<dt>companyName</dt><dd>Company name</dd>\n<dt>companyNamePronounciation</dt><dd>Comapny name pronounciation</dd>\n<dt>businessVoiceMailMessageText</dt><dd>Chosen business voicemail message</dd>\n</dl>\n<div>\n<style type=\"text/css\">  dl {\n    display: flex;\n    flex-flow: row wrap;\n  }\n  dt {\n    flex-basis: 20%;\n    text-align: right;\n  }\n  dd {\n    flex-basis: 70%;\n    flex-grow: 1;\n  }\n</style>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_orders_track_and_trace</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "ed55ad9b-6a37-4509-8ebf-54d273322ba0",
							"name": "Forbidden",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/track-and-trace/service-requests/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"track-and-trace",
										"service-requests",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "49579318",
											"description": "(Required) id"
										}
									]
								},
								"description": "The possible keys of `attributes` map in response object:<div style='max-height: 400px; overflow: auto; width: 100%'>\n<dl>\n<dt><b>Attribute name</b></dt><dd><b>Meaning</b></dd>\n<dt>login</dt><dd>Login</dd>\n<dt>roles</dt><dd>Roles</dd>\n<dt>firstName</dt><dd>First name</dd>\n<dt>lastName</dt><dd>Last name</dd>\n<dt>surnamePrefix</dt><dd>Surname prefix</dd>\n<dt>email</dt><dd>E-mail</dd>\n<dt>dateOfBirth</dt><dd>Date of birth</dd>\n<dt>vip</dt><dd>VIP</dd>\n<dt>employeeNumber</dt><dd>Employee number</dd>\n<dt>gender</dt><dd>Gender</dd>\n<dt>salutation</dt><dd>Salutation</dd>\n<dt>preferredLanguage</dt><dd>Preferred language</dd>\n<dt>comments</dt><dd>Comments</dd>\n<dt>accesspointNameMSISDN</dt><dd>Mobile number</dd>\n<dt>accesspointNameSIM</dt><dd>SIM card number</dd>\n<dt>accesspointNameIMSI</dt><dd>IMSI</dd>\n<dt>IMEI</dt><dd>IMEI</dd>\n<dt>Hanset_IMEI_number</dt><dd>IMEI</dd>\n<dt>accesspointNameFixedNumber</dt><dd>Fixed Number</dd>\n<dt>activeTo</dt><dd>Active to</dd>\n<dt>contractName</dt><dd>Subscription or device name</dd>\n<dt>totalOnetimePrice</dt><dd>One time price</dd>\n<dt>totalRecurrentPrice</dt><dd>Recurring price</dd>\n<dt>deferredPrice</dt><dd>Deferred price</dd>\n<dt>newUiccId</dt><dd>New SIM card number</dd>\n<dt>movedGroupName</dt><dd>Moved account</dd>\n<dt>subscriberAccountId</dt><dd>Old location</dd>\n<dt>destinationAccount</dt><dd>New location</dd>\n<dt>selectedDuoUiccid</dt><dd>Selected Duo SIM card number</dd>\n<dt>projectId</dt><dd>Project ID</dd>\n<dt>new_fixed_number</dt><dd>New fixed number</dd>\n<dt>new_desk_number</dt><dd>New extension</dd>\n<dt>oldUserGroupName</dt><dd>Previous user group</dd>\n<dt>newUserGroupName</dt><dd>New user group</dd>\n<dt>vpnName</dt><dd>VPN name</dd>\n<dt>deskNumber</dt><dd>Extension</dd>\n<dt>accesspointNameDeskNumber</dt><dd>Extension</dd>\n<dt>mobileAddress</dt><dd>Mobile number</dd>\n<dt>enterpriseName</dt><dd>Enterprise name</dd>\n<dt>enterpriseID</dt><dd>Enterprise ID</dd>\n<dt>mobilityGroupName</dt><dd>Fixed-Mobile PBX name</dd>\n<dt>userGroupName</dt><dd>User group</dd>\n<dt>enterpriseUserGroup</dt><dd>User group</dd>\n<dt>initialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>sipAccountName</dt><dd>SIP account name</dd>\n<dt>accessInstanceAttributeinitialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>accesspointNameQueuePhoneNumber</dt><dd>Queue phone number</dd>\n<dt>accesspointNameSipAccountName</dt><dd>SIP account name</dd>\n<dt>subscriptionAmount</dt><dd>New subscription amount</dd>\n<dt>contract_contact_name</dt><dd>Contract contact person (name)</dd>\n<dt>contract_contact_phone</dt><dd>Contract contact person (phone)</dd>\n<dt>contract_contact_mail</dt><dd>Contract contact person (mail)</dd>\n<dt>financial_contact_name</dt><dd>Financial contact person (name)</dd>\n<dt>financial_contact_phone</dt><dd>Financial contact person (phone)</dd>\n<dt>financial_contact_mail</dt><dd>Financial contact person (mail)</dd>\n<dt>technical_contact_name</dt><dd>Technical contact Person (name)</dd>\n<dt>technical_contact_phone</dt><dd>Technical contact Person (phone)</dd>\n<dt>technical_contact_mail</dt><dd>Technical contact Person (mail)</dd>\n<dt>deviceOption</dt><dd>Device option</dd>\n<dt>deviceType_label</dt><dd>Device type</dd>\n<dt>macAddress</dt><dd>Mac address</dd>\n<dt>deviceName</dt><dd>Device name</dd>\n<dt>sacGroupAccountId_label</dt><dd>Location account</dd>\n<dt>groupId</dt><dd>Location</dd>\n<dt>vGroupMovingToID</dt><dd>New location</dd>\n<dt>pbxName</dt><dd>PBX</dd>\n<dt>groupCitemId_label</dt><dd>Group</dd>\n<dt>Fixed</dt><dd>Alternate fixed number</dd>\n<dt>DeskNumber</dt><dd>Alternate extension</dd>\n<dt>billing_retention_period</dt><dd>Financial data retention period (months)</dd>\n<dt>managedGroupName</dt><dd>Authorized for</dd>\n<dt>subscriptionType</dt><dd>Subscription type</dd>\n<dt>CurrentNetworkOperator</dt><dd>Current network operator</dd>\n<dt>CurrentServiceProvider</dt><dd>Current service provider</dd>\n<dt>Customer_name_at_current_provider</dt><dd>Customer name at current provider</dd>\n<dt>Current_contract_number</dt><dd>Customer number at current provider</dd>\n<dt>UIccId</dt><dd>Current SIM card number</dd>\n<dt>Initials</dt><dd>Initials</dd>\n<dt>FamilyNamePrefix</dt><dd>Family name prefix</dd>\n<dt>FamilyName</dt><dd>Family name</dd>\n<dt>delivery_TT_id</dt><dd>Delivery Track&trace ID</dd>\n<dt>IsAppleDEP</dt><dd>Apple DEP</dd>\n<dt>IsSamsungKNOX</dt><dd>Samsung KNOX</dd>\n<dt>keepCurrentSim</dt><dd>Keep existing SIM card</dd>\n<dt>Note</dt><dd>Note</dd>\n<dt>Porting_wish_date</dt><dd>Preferred transition date</dd>\n<dt>returnReason</dt><dd>Reason for return</dd>\n<dt>returnRemarks</dt><dd>Remarks</dd>\n<dt>companyName</dt><dd>Company name</dd>\n<dt>companyNamePronounciation</dt><dd>Comapny name pronounciation</dd>\n<dt>businessVoiceMailMessageText</dt><dd>Chosen business voicemail message</dd>\n</dl>\n<div>\n<style type=\"text/css\">  dl {\n    display: flex;\n    flex-flow: row wrap;\n  }\n  dt {\n    flex-basis: 20%;\n    text-align: right;\n  }\n  dd {\n    flex-basis: 70%;\n    flex-grow: 1;\n  }\n</style>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_orders_track_and_trace</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "6f7705ed-3517-429c-8552-a4d5c998bce0",
							"name": "Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/track-and-trace/service-requests/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"track-and-trace",
										"service-requests",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "49579318",
											"description": "(Required) id"
										}
									]
								},
								"description": "The possible keys of `attributes` map in response object:<div style='max-height: 400px; overflow: auto; width: 100%'>\n<dl>\n<dt><b>Attribute name</b></dt><dd><b>Meaning</b></dd>\n<dt>login</dt><dd>Login</dd>\n<dt>roles</dt><dd>Roles</dd>\n<dt>firstName</dt><dd>First name</dd>\n<dt>lastName</dt><dd>Last name</dd>\n<dt>surnamePrefix</dt><dd>Surname prefix</dd>\n<dt>email</dt><dd>E-mail</dd>\n<dt>dateOfBirth</dt><dd>Date of birth</dd>\n<dt>vip</dt><dd>VIP</dd>\n<dt>employeeNumber</dt><dd>Employee number</dd>\n<dt>gender</dt><dd>Gender</dd>\n<dt>salutation</dt><dd>Salutation</dd>\n<dt>preferredLanguage</dt><dd>Preferred language</dd>\n<dt>comments</dt><dd>Comments</dd>\n<dt>accesspointNameMSISDN</dt><dd>Mobile number</dd>\n<dt>accesspointNameSIM</dt><dd>SIM card number</dd>\n<dt>accesspointNameIMSI</dt><dd>IMSI</dd>\n<dt>IMEI</dt><dd>IMEI</dd>\n<dt>Hanset_IMEI_number</dt><dd>IMEI</dd>\n<dt>accesspointNameFixedNumber</dt><dd>Fixed Number</dd>\n<dt>activeTo</dt><dd>Active to</dd>\n<dt>contractName</dt><dd>Subscription or device name</dd>\n<dt>totalOnetimePrice</dt><dd>One time price</dd>\n<dt>totalRecurrentPrice</dt><dd>Recurring price</dd>\n<dt>deferredPrice</dt><dd>Deferred price</dd>\n<dt>newUiccId</dt><dd>New SIM card number</dd>\n<dt>movedGroupName</dt><dd>Moved account</dd>\n<dt>subscriberAccountId</dt><dd>Old location</dd>\n<dt>destinationAccount</dt><dd>New location</dd>\n<dt>selectedDuoUiccid</dt><dd>Selected Duo SIM card number</dd>\n<dt>projectId</dt><dd>Project ID</dd>\n<dt>new_fixed_number</dt><dd>New fixed number</dd>\n<dt>new_desk_number</dt><dd>New extension</dd>\n<dt>oldUserGroupName</dt><dd>Previous user group</dd>\n<dt>newUserGroupName</dt><dd>New user group</dd>\n<dt>vpnName</dt><dd>VPN name</dd>\n<dt>deskNumber</dt><dd>Extension</dd>\n<dt>accesspointNameDeskNumber</dt><dd>Extension</dd>\n<dt>mobileAddress</dt><dd>Mobile number</dd>\n<dt>enterpriseName</dt><dd>Enterprise name</dd>\n<dt>enterpriseID</dt><dd>Enterprise ID</dd>\n<dt>mobilityGroupName</dt><dd>Fixed-Mobile PBX name</dd>\n<dt>userGroupName</dt><dd>User group</dd>\n<dt>enterpriseUserGroup</dt><dd>User group</dd>\n<dt>initialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>sipAccountName</dt><dd>SIP account name</dd>\n<dt>accessInstanceAttributeinitialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>accesspointNameQueuePhoneNumber</dt><dd>Queue phone number</dd>\n<dt>accesspointNameSipAccountName</dt><dd>SIP account name</dd>\n<dt>subscriptionAmount</dt><dd>New subscription amount</dd>\n<dt>contract_contact_name</dt><dd>Contract contact person (name)</dd>\n<dt>contract_contact_phone</dt><dd>Contract contact person (phone)</dd>\n<dt>contract_contact_mail</dt><dd>Contract contact person (mail)</dd>\n<dt>financial_contact_name</dt><dd>Financial contact person (name)</dd>\n<dt>financial_contact_phone</dt><dd>Financial contact person (phone)</dd>\n<dt>financial_contact_mail</dt><dd>Financial contact person (mail)</dd>\n<dt>technical_contact_name</dt><dd>Technical contact Person (name)</dd>\n<dt>technical_contact_phone</dt><dd>Technical contact Person (phone)</dd>\n<dt>technical_contact_mail</dt><dd>Technical contact Person (mail)</dd>\n<dt>deviceOption</dt><dd>Device option</dd>\n<dt>deviceType_label</dt><dd>Device type</dd>\n<dt>macAddress</dt><dd>Mac address</dd>\n<dt>deviceName</dt><dd>Device name</dd>\n<dt>sacGroupAccountId_label</dt><dd>Location account</dd>\n<dt>groupId</dt><dd>Location</dd>\n<dt>vGroupMovingToID</dt><dd>New location</dd>\n<dt>pbxName</dt><dd>PBX</dd>\n<dt>groupCitemId_label</dt><dd>Group</dd>\n<dt>Fixed</dt><dd>Alternate fixed number</dd>\n<dt>DeskNumber</dt><dd>Alternate extension</dd>\n<dt>billing_retention_period</dt><dd>Financial data retention period (months)</dd>\n<dt>managedGroupName</dt><dd>Authorized for</dd>\n<dt>subscriptionType</dt><dd>Subscription type</dd>\n<dt>CurrentNetworkOperator</dt><dd>Current network operator</dd>\n<dt>CurrentServiceProvider</dt><dd>Current service provider</dd>\n<dt>Customer_name_at_current_provider</dt><dd>Customer name at current provider</dd>\n<dt>Current_contract_number</dt><dd>Customer number at current provider</dd>\n<dt>UIccId</dt><dd>Current SIM card number</dd>\n<dt>Initials</dt><dd>Initials</dd>\n<dt>FamilyNamePrefix</dt><dd>Family name prefix</dd>\n<dt>FamilyName</dt><dd>Family name</dd>\n<dt>delivery_TT_id</dt><dd>Delivery Track&trace ID</dd>\n<dt>IsAppleDEP</dt><dd>Apple DEP</dd>\n<dt>IsSamsungKNOX</dt><dd>Samsung KNOX</dd>\n<dt>keepCurrentSim</dt><dd>Keep existing SIM card</dd>\n<dt>Note</dt><dd>Note</dd>\n<dt>Porting_wish_date</dt><dd>Preferred transition date</dd>\n<dt>returnReason</dt><dd>Reason for return</dd>\n<dt>returnRemarks</dt><dd>Remarks</dd>\n<dt>companyName</dt><dd>Company name</dd>\n<dt>companyNamePronounciation</dt><dd>Comapny name pronounciation</dd>\n<dt>businessVoiceMailMessageText</dt><dd>Chosen business voicemail message</dd>\n</dl>\n<div>\n<style type=\"text/css\">  dl {\n    display: flex;\n    flex-flow: row wrap;\n  }\n  dt {\n    flex-basis: 20%;\n    text-align: right;\n  }\n  dd {\n    flex-basis: 70%;\n    flex-grow: 1;\n  }\n</style>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_orders_track_and_trace</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "80ee44d7-dbf5-40dd-aea0-5f853feae237",
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/track-and-trace/service-requests/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"track-and-trace",
										"service-requests",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "49579318",
											"description": "(Required) id"
										}
									]
								},
								"description": "The possible keys of `attributes` map in response object:<div style='max-height: 400px; overflow: auto; width: 100%'>\n<dl>\n<dt><b>Attribute name</b></dt><dd><b>Meaning</b></dd>\n<dt>login</dt><dd>Login</dd>\n<dt>roles</dt><dd>Roles</dd>\n<dt>firstName</dt><dd>First name</dd>\n<dt>lastName</dt><dd>Last name</dd>\n<dt>surnamePrefix</dt><dd>Surname prefix</dd>\n<dt>email</dt><dd>E-mail</dd>\n<dt>dateOfBirth</dt><dd>Date of birth</dd>\n<dt>vip</dt><dd>VIP</dd>\n<dt>employeeNumber</dt><dd>Employee number</dd>\n<dt>gender</dt><dd>Gender</dd>\n<dt>salutation</dt><dd>Salutation</dd>\n<dt>preferredLanguage</dt><dd>Preferred language</dd>\n<dt>comments</dt><dd>Comments</dd>\n<dt>accesspointNameMSISDN</dt><dd>Mobile number</dd>\n<dt>accesspointNameSIM</dt><dd>SIM card number</dd>\n<dt>accesspointNameIMSI</dt><dd>IMSI</dd>\n<dt>IMEI</dt><dd>IMEI</dd>\n<dt>Hanset_IMEI_number</dt><dd>IMEI</dd>\n<dt>accesspointNameFixedNumber</dt><dd>Fixed Number</dd>\n<dt>activeTo</dt><dd>Active to</dd>\n<dt>contractName</dt><dd>Subscription or device name</dd>\n<dt>totalOnetimePrice</dt><dd>One time price</dd>\n<dt>totalRecurrentPrice</dt><dd>Recurring price</dd>\n<dt>deferredPrice</dt><dd>Deferred price</dd>\n<dt>newUiccId</dt><dd>New SIM card number</dd>\n<dt>movedGroupName</dt><dd>Moved account</dd>\n<dt>subscriberAccountId</dt><dd>Old location</dd>\n<dt>destinationAccount</dt><dd>New location</dd>\n<dt>selectedDuoUiccid</dt><dd>Selected Duo SIM card number</dd>\n<dt>projectId</dt><dd>Project ID</dd>\n<dt>new_fixed_number</dt><dd>New fixed number</dd>\n<dt>new_desk_number</dt><dd>New extension</dd>\n<dt>oldUserGroupName</dt><dd>Previous user group</dd>\n<dt>newUserGroupName</dt><dd>New user group</dd>\n<dt>vpnName</dt><dd>VPN name</dd>\n<dt>deskNumber</dt><dd>Extension</dd>\n<dt>accesspointNameDeskNumber</dt><dd>Extension</dd>\n<dt>mobileAddress</dt><dd>Mobile number</dd>\n<dt>enterpriseName</dt><dd>Enterprise name</dd>\n<dt>enterpriseID</dt><dd>Enterprise ID</dd>\n<dt>mobilityGroupName</dt><dd>Fixed-Mobile PBX name</dd>\n<dt>userGroupName</dt><dd>User group</dd>\n<dt>enterpriseUserGroup</dt><dd>User group</dd>\n<dt>initialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>sipAccountName</dt><dd>SIP account name</dd>\n<dt>accessInstanceAttributeinitialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>accesspointNameQueuePhoneNumber</dt><dd>Queue phone number</dd>\n<dt>accesspointNameSipAccountName</dt><dd>SIP account name</dd>\n<dt>subscriptionAmount</dt><dd>New subscription amount</dd>\n<dt>contract_contact_name</dt><dd>Contract contact person (name)</dd>\n<dt>contract_contact_phone</dt><dd>Contract contact person (phone)</dd>\n<dt>contract_contact_mail</dt><dd>Contract contact person (mail)</dd>\n<dt>financial_contact_name</dt><dd>Financial contact person (name)</dd>\n<dt>financial_contact_phone</dt><dd>Financial contact person (phone)</dd>\n<dt>financial_contact_mail</dt><dd>Financial contact person (mail)</dd>\n<dt>technical_contact_name</dt><dd>Technical contact Person (name)</dd>\n<dt>technical_contact_phone</dt><dd>Technical contact Person (phone)</dd>\n<dt>technical_contact_mail</dt><dd>Technical contact Person (mail)</dd>\n<dt>deviceOption</dt><dd>Device option</dd>\n<dt>deviceType_label</dt><dd>Device type</dd>\n<dt>macAddress</dt><dd>Mac address</dd>\n<dt>deviceName</dt><dd>Device name</dd>\n<dt>sacGroupAccountId_label</dt><dd>Location account</dd>\n<dt>groupId</dt><dd>Location</dd>\n<dt>vGroupMovingToID</dt><dd>New location</dd>\n<dt>pbxName</dt><dd>PBX</dd>\n<dt>groupCitemId_label</dt><dd>Group</dd>\n<dt>Fixed</dt><dd>Alternate fixed number</dd>\n<dt>DeskNumber</dt><dd>Alternate extension</dd>\n<dt>billing_retention_period</dt><dd>Financial data retention period (months)</dd>\n<dt>managedGroupName</dt><dd>Authorized for</dd>\n<dt>subscriptionType</dt><dd>Subscription type</dd>\n<dt>CurrentNetworkOperator</dt><dd>Current network operator</dd>\n<dt>CurrentServiceProvider</dt><dd>Current service provider</dd>\n<dt>Customer_name_at_current_provider</dt><dd>Customer name at current provider</dd>\n<dt>Current_contract_number</dt><dd>Customer number at current provider</dd>\n<dt>UIccId</dt><dd>Current SIM card number</dd>\n<dt>Initials</dt><dd>Initials</dd>\n<dt>FamilyNamePrefix</dt><dd>Family name prefix</dd>\n<dt>FamilyName</dt><dd>Family name</dd>\n<dt>delivery_TT_id</dt><dd>Delivery Track&trace ID</dd>\n<dt>IsAppleDEP</dt><dd>Apple DEP</dd>\n<dt>IsSamsungKNOX</dt><dd>Samsung KNOX</dd>\n<dt>keepCurrentSim</dt><dd>Keep existing SIM card</dd>\n<dt>Note</dt><dd>Note</dd>\n<dt>Porting_wish_date</dt><dd>Preferred transition date</dd>\n<dt>returnReason</dt><dd>Reason for return</dd>\n<dt>returnRemarks</dt><dd>Remarks</dd>\n<dt>companyName</dt><dd>Company name</dd>\n<dt>companyNamePronounciation</dt><dd>Comapny name pronounciation</dd>\n<dt>businessVoiceMailMessageText</dt><dd>Chosen business voicemail message</dd>\n</dl>\n<div>\n<style type=\"text/css\">  dl {\n    display: flex;\n    flex-flow: row wrap;\n  }\n  dt {\n    flex-basis: 20%;\n    text-align: right;\n  }\n  dd {\n    flex-basis: 70%;\n    flex-grow: 1;\n  }\n</style>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_orders_track_and_trace</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "4abbd35f-3750-4121-8318-d538a619a46b",
							"name": "Server Error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/track-and-trace/service-requests/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"track-and-trace",
										"service-requests",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "49579318",
											"description": "(Required) id"
										}
									]
								},
								"description": "The possible keys of `attributes` map in response object:<div style='max-height: 400px; overflow: auto; width: 100%'>\n<dl>\n<dt><b>Attribute name</b></dt><dd><b>Meaning</b></dd>\n<dt>login</dt><dd>Login</dd>\n<dt>roles</dt><dd>Roles</dd>\n<dt>firstName</dt><dd>First name</dd>\n<dt>lastName</dt><dd>Last name</dd>\n<dt>surnamePrefix</dt><dd>Surname prefix</dd>\n<dt>email</dt><dd>E-mail</dd>\n<dt>dateOfBirth</dt><dd>Date of birth</dd>\n<dt>vip</dt><dd>VIP</dd>\n<dt>employeeNumber</dt><dd>Employee number</dd>\n<dt>gender</dt><dd>Gender</dd>\n<dt>salutation</dt><dd>Salutation</dd>\n<dt>preferredLanguage</dt><dd>Preferred language</dd>\n<dt>comments</dt><dd>Comments</dd>\n<dt>accesspointNameMSISDN</dt><dd>Mobile number</dd>\n<dt>accesspointNameSIM</dt><dd>SIM card number</dd>\n<dt>accesspointNameIMSI</dt><dd>IMSI</dd>\n<dt>IMEI</dt><dd>IMEI</dd>\n<dt>Hanset_IMEI_number</dt><dd>IMEI</dd>\n<dt>accesspointNameFixedNumber</dt><dd>Fixed Number</dd>\n<dt>activeTo</dt><dd>Active to</dd>\n<dt>contractName</dt><dd>Subscription or device name</dd>\n<dt>totalOnetimePrice</dt><dd>One time price</dd>\n<dt>totalRecurrentPrice</dt><dd>Recurring price</dd>\n<dt>deferredPrice</dt><dd>Deferred price</dd>\n<dt>newUiccId</dt><dd>New SIM card number</dd>\n<dt>movedGroupName</dt><dd>Moved account</dd>\n<dt>subscriberAccountId</dt><dd>Old location</dd>\n<dt>destinationAccount</dt><dd>New location</dd>\n<dt>selectedDuoUiccid</dt><dd>Selected Duo SIM card number</dd>\n<dt>projectId</dt><dd>Project ID</dd>\n<dt>new_fixed_number</dt><dd>New fixed number</dd>\n<dt>new_desk_number</dt><dd>New extension</dd>\n<dt>oldUserGroupName</dt><dd>Previous user group</dd>\n<dt>newUserGroupName</dt><dd>New user group</dd>\n<dt>vpnName</dt><dd>VPN name</dd>\n<dt>deskNumber</dt><dd>Extension</dd>\n<dt>accesspointNameDeskNumber</dt><dd>Extension</dd>\n<dt>mobileAddress</dt><dd>Mobile number</dd>\n<dt>enterpriseName</dt><dd>Enterprise name</dd>\n<dt>enterpriseID</dt><dd>Enterprise ID</dd>\n<dt>mobilityGroupName</dt><dd>Fixed-Mobile PBX name</dd>\n<dt>userGroupName</dt><dd>User group</dd>\n<dt>enterpriseUserGroup</dt><dd>User group</dd>\n<dt>initialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>sipAccountName</dt><dd>SIP account name</dd>\n<dt>accessInstanceAttributeinitialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>accesspointNameQueuePhoneNumber</dt><dd>Queue phone number</dd>\n<dt>accesspointNameSipAccountName</dt><dd>SIP account name</dd>\n<dt>subscriptionAmount</dt><dd>New subscription amount</dd>\n<dt>contract_contact_name</dt><dd>Contract contact person (name)</dd>\n<dt>contract_contact_phone</dt><dd>Contract contact person (phone)</dd>\n<dt>contract_contact_mail</dt><dd>Contract contact person (mail)</dd>\n<dt>financial_contact_name</dt><dd>Financial contact person (name)</dd>\n<dt>financial_contact_phone</dt><dd>Financial contact person (phone)</dd>\n<dt>financial_contact_mail</dt><dd>Financial contact person (mail)</dd>\n<dt>technical_contact_name</dt><dd>Technical contact Person (name)</dd>\n<dt>technical_contact_phone</dt><dd>Technical contact Person (phone)</dd>\n<dt>technical_contact_mail</dt><dd>Technical contact Person (mail)</dd>\n<dt>deviceOption</dt><dd>Device option</dd>\n<dt>deviceType_label</dt><dd>Device type</dd>\n<dt>macAddress</dt><dd>Mac address</dd>\n<dt>deviceName</dt><dd>Device name</dd>\n<dt>sacGroupAccountId_label</dt><dd>Location account</dd>\n<dt>groupId</dt><dd>Location</dd>\n<dt>vGroupMovingToID</dt><dd>New location</dd>\n<dt>pbxName</dt><dd>PBX</dd>\n<dt>groupCitemId_label</dt><dd>Group</dd>\n<dt>Fixed</dt><dd>Alternate fixed number</dd>\n<dt>DeskNumber</dt><dd>Alternate extension</dd>\n<dt>billing_retention_period</dt><dd>Financial data retention period (months)</dd>\n<dt>managedGroupName</dt><dd>Authorized for</dd>\n<dt>subscriptionType</dt><dd>Subscription type</dd>\n<dt>CurrentNetworkOperator</dt><dd>Current network operator</dd>\n<dt>CurrentServiceProvider</dt><dd>Current service provider</dd>\n<dt>Customer_name_at_current_provider</dt><dd>Customer name at current provider</dd>\n<dt>Current_contract_number</dt><dd>Customer number at current provider</dd>\n<dt>UIccId</dt><dd>Current SIM card number</dd>\n<dt>Initials</dt><dd>Initials</dd>\n<dt>FamilyNamePrefix</dt><dd>Family name prefix</dd>\n<dt>FamilyName</dt><dd>Family name</dd>\n<dt>delivery_TT_id</dt><dd>Delivery Track&trace ID</dd>\n<dt>IsAppleDEP</dt><dd>Apple DEP</dd>\n<dt>IsSamsungKNOX</dt><dd>Samsung KNOX</dd>\n<dt>keepCurrentSim</dt><dd>Keep existing SIM card</dd>\n<dt>Note</dt><dd>Note</dd>\n<dt>Porting_wish_date</dt><dd>Preferred transition date</dd>\n<dt>returnReason</dt><dd>Reason for return</dd>\n<dt>returnRemarks</dt><dd>Remarks</dd>\n<dt>companyName</dt><dd>Company name</dd>\n<dt>companyNamePronounciation</dt><dd>Comapny name pronounciation</dd>\n<dt>businessVoiceMailMessageText</dt><dd>Chosen business voicemail message</dd>\n</dl>\n<div>\n<style type=\"text/css\">  dl {\n    display: flex;\n    flex-flow: row wrap;\n  }\n  dt {\n    flex-basis: 20%;\n    text-align: right;\n  }\n  dd {\n    flex-basis: 70%;\n    flex-grow: 1;\n  }\n</style>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_orders_track_and_trace</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "7bc222bf-c6da-4105-96f5-9ae5ef2f6f25",
							"name": "Service Unavailable",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/track-and-trace/service-requests/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"track-and-trace",
										"service-requests",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "49579318",
											"description": "(Required) id"
										}
									]
								},
								"description": "The possible keys of `attributes` map in response object:<div style='max-height: 400px; overflow: auto; width: 100%'>\n<dl>\n<dt><b>Attribute name</b></dt><dd><b>Meaning</b></dd>\n<dt>login</dt><dd>Login</dd>\n<dt>roles</dt><dd>Roles</dd>\n<dt>firstName</dt><dd>First name</dd>\n<dt>lastName</dt><dd>Last name</dd>\n<dt>surnamePrefix</dt><dd>Surname prefix</dd>\n<dt>email</dt><dd>E-mail</dd>\n<dt>dateOfBirth</dt><dd>Date of birth</dd>\n<dt>vip</dt><dd>VIP</dd>\n<dt>employeeNumber</dt><dd>Employee number</dd>\n<dt>gender</dt><dd>Gender</dd>\n<dt>salutation</dt><dd>Salutation</dd>\n<dt>preferredLanguage</dt><dd>Preferred language</dd>\n<dt>comments</dt><dd>Comments</dd>\n<dt>accesspointNameMSISDN</dt><dd>Mobile number</dd>\n<dt>accesspointNameSIM</dt><dd>SIM card number</dd>\n<dt>accesspointNameIMSI</dt><dd>IMSI</dd>\n<dt>IMEI</dt><dd>IMEI</dd>\n<dt>Hanset_IMEI_number</dt><dd>IMEI</dd>\n<dt>accesspointNameFixedNumber</dt><dd>Fixed Number</dd>\n<dt>activeTo</dt><dd>Active to</dd>\n<dt>contractName</dt><dd>Subscription or device name</dd>\n<dt>totalOnetimePrice</dt><dd>One time price</dd>\n<dt>totalRecurrentPrice</dt><dd>Recurring price</dd>\n<dt>deferredPrice</dt><dd>Deferred price</dd>\n<dt>newUiccId</dt><dd>New SIM card number</dd>\n<dt>movedGroupName</dt><dd>Moved account</dd>\n<dt>subscriberAccountId</dt><dd>Old location</dd>\n<dt>destinationAccount</dt><dd>New location</dd>\n<dt>selectedDuoUiccid</dt><dd>Selected Duo SIM card number</dd>\n<dt>projectId</dt><dd>Project ID</dd>\n<dt>new_fixed_number</dt><dd>New fixed number</dd>\n<dt>new_desk_number</dt><dd>New extension</dd>\n<dt>oldUserGroupName</dt><dd>Previous user group</dd>\n<dt>newUserGroupName</dt><dd>New user group</dd>\n<dt>vpnName</dt><dd>VPN name</dd>\n<dt>deskNumber</dt><dd>Extension</dd>\n<dt>accesspointNameDeskNumber</dt><dd>Extension</dd>\n<dt>mobileAddress</dt><dd>Mobile number</dd>\n<dt>enterpriseName</dt><dd>Enterprise name</dd>\n<dt>enterpriseID</dt><dd>Enterprise ID</dd>\n<dt>mobilityGroupName</dt><dd>Fixed-Mobile PBX name</dd>\n<dt>userGroupName</dt><dd>User group</dd>\n<dt>enterpriseUserGroup</dt><dd>User group</dd>\n<dt>initialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>sipAccountName</dt><dd>SIP account name</dd>\n<dt>accessInstanceAttributeinitialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>accesspointNameQueuePhoneNumber</dt><dd>Queue phone number</dd>\n<dt>accesspointNameSipAccountName</dt><dd>SIP account name</dd>\n<dt>subscriptionAmount</dt><dd>New subscription amount</dd>\n<dt>contract_contact_name</dt><dd>Contract contact person (name)</dd>\n<dt>contract_contact_phone</dt><dd>Contract contact person (phone)</dd>\n<dt>contract_contact_mail</dt><dd>Contract contact person (mail)</dd>\n<dt>financial_contact_name</dt><dd>Financial contact person (name)</dd>\n<dt>financial_contact_phone</dt><dd>Financial contact person (phone)</dd>\n<dt>financial_contact_mail</dt><dd>Financial contact person (mail)</dd>\n<dt>technical_contact_name</dt><dd>Technical contact Person (name)</dd>\n<dt>technical_contact_phone</dt><dd>Technical contact Person (phone)</dd>\n<dt>technical_contact_mail</dt><dd>Technical contact Person (mail)</dd>\n<dt>deviceOption</dt><dd>Device option</dd>\n<dt>deviceType_label</dt><dd>Device type</dd>\n<dt>macAddress</dt><dd>Mac address</dd>\n<dt>deviceName</dt><dd>Device name</dd>\n<dt>sacGroupAccountId_label</dt><dd>Location account</dd>\n<dt>groupId</dt><dd>Location</dd>\n<dt>vGroupMovingToID</dt><dd>New location</dd>\n<dt>pbxName</dt><dd>PBX</dd>\n<dt>groupCitemId_label</dt><dd>Group</dd>\n<dt>Fixed</dt><dd>Alternate fixed number</dd>\n<dt>DeskNumber</dt><dd>Alternate extension</dd>\n<dt>billing_retention_period</dt><dd>Financial data retention period (months)</dd>\n<dt>managedGroupName</dt><dd>Authorized for</dd>\n<dt>subscriptionType</dt><dd>Subscription type</dd>\n<dt>CurrentNetworkOperator</dt><dd>Current network operator</dd>\n<dt>CurrentServiceProvider</dt><dd>Current service provider</dd>\n<dt>Customer_name_at_current_provider</dt><dd>Customer name at current provider</dd>\n<dt>Current_contract_number</dt><dd>Customer number at current provider</dd>\n<dt>UIccId</dt><dd>Current SIM card number</dd>\n<dt>Initials</dt><dd>Initials</dd>\n<dt>FamilyNamePrefix</dt><dd>Family name prefix</dd>\n<dt>FamilyName</dt><dd>Family name</dd>\n<dt>delivery_TT_id</dt><dd>Delivery Track&trace ID</dd>\n<dt>IsAppleDEP</dt><dd>Apple DEP</dd>\n<dt>IsSamsungKNOX</dt><dd>Samsung KNOX</dd>\n<dt>keepCurrentSim</dt><dd>Keep existing SIM card</dd>\n<dt>Note</dt><dd>Note</dd>\n<dt>Porting_wish_date</dt><dd>Preferred transition date</dd>\n<dt>returnReason</dt><dd>Reason for return</dd>\n<dt>returnRemarks</dt><dd>Remarks</dd>\n<dt>companyName</dt><dd>Company name</dd>\n<dt>companyNamePronounciation</dt><dd>Comapny name pronounciation</dd>\n<dt>businessVoiceMailMessageText</dt><dd>Chosen business voicemail message</dd>\n</dl>\n<div>\n<style type=\"text/css\">  dl {\n    display: flex;\n    flex-flow: row wrap;\n  }\n  dt {\n    flex-basis: 20%;\n    text-align: right;\n  }\n  dd {\n    flex-basis: 70%;\n    flex-grow: 1;\n  }\n</style>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_orders_track_and_trace</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			],
			"id": "0a227440-149e-44b2-821a-2d8d53b40991",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "97a1637a-3217-4c55-bcea-5c417928264f",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "3a470afa-6500-45dd-8527-8e36e9f3a533",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "07- Terminate Subscription",
			"item": [
				{
					"name": "1- Get all contracts",
					"id": "74f3e802-7132-48fe-af27-76d10a640471",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"description": "Content-Language",
								"key": "Content-Language",
								"value": "elit aute"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/contract/all",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"contract",
								"all"
							]
						},
						"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li></ul>"
					},
					"response": [
						{
							"id": "cee5dc17-a3b6-42ca-9c93-74abafb91b98",
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Content-Language",
										"key": "Content-Language",
										"value": "elit aute"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contract/all",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contract",
										"all"
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li></ul>"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "c1ec5e13-8fd1-4e66-a0c4-4108747dc288",
							"name": "Bad Request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Content-Language",
										"key": "Content-Language",
										"value": "elit aute"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contract/all",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contract",
										"all"
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li></ul>"
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "7b278ff7-1e5a-4bc1-b54f-5cbcffba473a",
							"name": "Unauthorized",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Content-Language",
										"key": "Content-Language",
										"value": "elit aute"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contract/all",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contract",
										"all"
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li></ul>"
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "2b6aff96-e587-45ed-a94b-b223fb15138b",
							"name": "Forbidden",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Content-Language",
										"key": "Content-Language",
										"value": "elit aute"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contract/all",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contract",
										"all"
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li></ul>"
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "cd2da824-dcf6-4fd4-b420-41337b948441",
							"name": "Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Content-Language",
										"key": "Content-Language",
										"value": "elit aute"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contract/all",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contract",
										"all"
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li></ul>"
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "b8871de5-6366-44f1-8a22-807de1247737",
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Content-Language",
										"key": "Content-Language",
										"value": "elit aute"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contract/all",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contract",
										"all"
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li></ul>"
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "d7079048-5d87-4927-a186-7267b849ae71",
							"name": "Server Error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Content-Language",
										"key": "Content-Language",
										"value": "elit aute"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contract/all",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contract",
										"all"
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li></ul>"
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "8cd801f1-3223-418a-b5a5-fc82fe1b32f1",
							"name": "Service Unavailable",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Content-Language",
										"key": "Content-Language",
										"value": "elit aute"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contract/all",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contract",
										"all"
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li></ul>"
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "2- Get information about operations available for given contract.",
					"id": "a7b73bee-4a13-436d-84bf-29099fe667e8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/order/operations?contractId=1283615806",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"order",
								"operations"
							],
							"query": [
								{
									"key": "contractId",
									"value": "1283615806"
								}
							]
						},
						"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
					},
					"response": [
						{
							"id": "8df94c6f-55a3-4a46-9f95-5a4b72279a18",
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/order/operations?contractId=1283615806",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"order",
										"operations"
									],
									"query": [
										{
											"key": "contractId",
											"value": "1283615806"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "b3849752-3049-4346-90a5-2347df3a1f06",
							"name": "Bad Request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/order/operations?contractId=1283615806",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"order",
										"operations"
									],
									"query": [
										{
											"key": "contractId",
											"value": "1283615806"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "7a5369ee-cc94-4553-aff0-5632bada52dd",
							"name": "Unauthorized",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/order/operations?contractId=1283615806",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"order",
										"operations"
									],
									"query": [
										{
											"key": "contractId",
											"value": "1283615806"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "27202556-805f-4136-9195-68a7e082d740",
							"name": "Forbidden",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/order/operations?contractId=1283615806",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"order",
										"operations"
									],
									"query": [
										{
											"key": "contractId",
											"value": "1283615806"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "61155551-84fe-4488-b783-6313384d3c5f",
							"name": "Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/order/operations?contractId=1283615806",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"order",
										"operations"
									],
									"query": [
										{
											"key": "contractId",
											"value": "1283615806"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "98c3e45f-5fe3-4309-82fc-566b9b3cf9d7",
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/order/operations?contractId=1283615806",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"order",
										"operations"
									],
									"query": [
										{
											"key": "contractId",
											"value": "1283615806"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "ca6bbe8b-0af8-42dd-88ff-998f0a7974c7",
							"name": "Server Error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/order/operations?contractId=1283615806",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"order",
										"operations"
									],
									"query": [
										{
											"key": "contractId",
											"value": "1283615806"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "21d48a2b-da09-4047-92be-e4092ca00b92",
							"name": "Service Unavailable",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/order/operations?contractId=1283615806",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"order",
										"operations"
									],
									"query": [
										{
											"key": "contractId",
											"value": "1283615806"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "3- Get first possible termination date for given contract",
					"id": "61a3e788-cf71-4fae-b779-e3a29ab99d74",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/order/terminate/:contractId/min-date",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"order",
								"terminate",
								":contractId",
								"min-date"
							],
							"variable": [
								{
									"key": "contractId",
									"value": "1283615806",
									"description": "(Required) contractId"
								}
							]
						},
						"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
					},
					"response": [
						{
							"id": "93990d60-0fc6-4360-9ca5-8ec904f35ebd",
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/order/terminate/:contractId/min-date",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"order",
										"terminate",
										":contractId",
										"min-date"
									],
									"variable": [
										{
											"key": "contractId",
											"value": "1283615806",
											"description": "(Required) contractId"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": "1973-11-22T10:20:24.566Z"
						},
						{
							"id": "9bb4e5b4-8186-499f-88a6-cc86995da31c",
							"name": "Bad Request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/order/terminate/:contractId/min-date",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"order",
										"terminate",
										":contractId",
										"min-date"
									],
									"variable": [
										{
											"key": "contractId",
											"value": "1283615806",
											"description": "(Required) contractId"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "67d09483-7ece-41e4-bd1f-a4a8598ee11a",
							"name": "Unauthorized",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/order/terminate/:contractId/min-date",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"order",
										"terminate",
										":contractId",
										"min-date"
									],
									"variable": [
										{
											"key": "contractId",
											"value": "1283615806",
											"description": "(Required) contractId"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "8adcee6a-5225-44ad-900a-92372673adab",
							"name": "Forbidden",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/order/terminate/:contractId/min-date",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"order",
										"terminate",
										":contractId",
										"min-date"
									],
									"variable": [
										{
											"key": "contractId",
											"value": "1283615806",
											"description": "(Required) contractId"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "fd0b8dc3-3ca8-4a5c-8258-c22c0f671013",
							"name": "Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/order/terminate/:contractId/min-date",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"order",
										"terminate",
										":contractId",
										"min-date"
									],
									"variable": [
										{
											"key": "contractId",
											"value": "1283615806",
											"description": "(Required) contractId"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "041dd7cb-9cee-4116-b643-3b0ba682cd6f",
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/order/terminate/:contractId/min-date",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"order",
										"terminate",
										":contractId",
										"min-date"
									],
									"variable": [
										{
											"key": "contractId",
											"value": "1283615806",
											"description": "(Required) contractId"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "c4935494-95fa-4e5c-b9e9-a5ef24f520a6",
							"name": "Server Error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/order/terminate/:contractId/min-date",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"order",
										"terminate",
										":contractId",
										"min-date"
									],
									"variable": [
										{
											"key": "contractId",
											"value": "1283615806",
											"description": "(Required) contractId"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "c40fbabf-e74e-4223-866f-c186d3c65e53",
							"name": "Service Unavailable",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/order/terminate/:contractId/min-date",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"order",
										"terminate",
										":contractId",
										"min-date"
									],
									"variable": [
										{
											"key": "contractId",
											"value": "1283615806",
											"description": "(Required) contractId"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "4- Get termination fee for giver contract and termination date",
					"id": "0c68f0e8-363b-448d-a4f0-eedfb431bd0c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/order/terminate/termination-fee?contractId=1283615806&wishDate=2022-10-22T10:20:24.566Z",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"order",
								"terminate",
								"termination-fee"
							],
							"query": [
								{
									"key": "contractId",
									"value": "1283615806",
									"description": "(Required) contractId"
								},
								{
									"key": "wishDate",
									"value": "2022-10-22T10:20:24.566Z",
									"description": "(Required) wishDate"
								}
							]
						},
						"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
					},
					"response": [
						{
							"id": "edb8f422-1796-4287-954c-8d1b8622ee35",
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/order/terminate/termination-fee?contractId=1283615806&wishDate=2022-10-22T10:20:24.566Z",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"order",
										"terminate",
										"termination-fee"
									],
									"query": [
										{
											"key": "contractId",
											"value": "1283615806",
											"description": "(Required) contractId"
										},
										{
											"key": "wishDate",
											"value": "2022-10-22T10:20:24.566Z",
											"description": "(Required) wishDate"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "4867776c-0c55-4461-8d30-c1ae2b08009c",
							"name": "Bad Request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/order/terminate/termination-fee?contractId=1283615806&wishDate=2022-10-22T10:20:24.566Z",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"order",
										"terminate",
										"termination-fee"
									],
									"query": [
										{
											"key": "contractId",
											"value": "1283615806",
											"description": "(Required) contractId"
										},
										{
											"key": "wishDate",
											"value": "2022-10-22T10:20:24.566Z",
											"description": "(Required) wishDate"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "0181b67a-1072-4b0a-a892-075cbf9b703d",
							"name": "Unauthorized",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/order/terminate/termination-fee?contractId=1283615806&wishDate=2022-10-22T10:20:24.566Z",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"order",
										"terminate",
										"termination-fee"
									],
									"query": [
										{
											"key": "contractId",
											"value": "1283615806",
											"description": "(Required) contractId"
										},
										{
											"key": "wishDate",
											"value": "2022-10-22T10:20:24.566Z",
											"description": "(Required) wishDate"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "0664011f-e742-46a5-8918-40b3731297fd",
							"name": "Forbidden",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/order/terminate/termination-fee?contractId=1283615806&wishDate=2022-10-22T10:20:24.566Z",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"order",
										"terminate",
										"termination-fee"
									],
									"query": [
										{
											"key": "contractId",
											"value": "1283615806",
											"description": "(Required) contractId"
										},
										{
											"key": "wishDate",
											"value": "2022-10-22T10:20:24.566Z",
											"description": "(Required) wishDate"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "198ee84f-cee5-4733-864e-57df4df9ea6f",
							"name": "Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/order/terminate/termination-fee?contractId=1283615806&wishDate=2022-10-22T10:20:24.566Z",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"order",
										"terminate",
										"termination-fee"
									],
									"query": [
										{
											"key": "contractId",
											"value": "1283615806",
											"description": "(Required) contractId"
										},
										{
											"key": "wishDate",
											"value": "2022-10-22T10:20:24.566Z",
											"description": "(Required) wishDate"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "946ba3a8-07b0-4f02-bde7-5922710d6d80",
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/order/terminate/termination-fee?contractId=1283615806&wishDate=2022-10-22T10:20:24.566Z",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"order",
										"terminate",
										"termination-fee"
									],
									"query": [
										{
											"key": "contractId",
											"value": "1283615806",
											"description": "(Required) contractId"
										},
										{
											"key": "wishDate",
											"value": "2022-10-22T10:20:24.566Z",
											"description": "(Required) wishDate"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "9097806c-beed-4f1f-9fd1-2ccbeb96d774",
							"name": "Server Error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/order/terminate/termination-fee?contractId=1283615806&wishDate=2022-10-22T10:20:24.566Z",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"order",
										"terminate",
										"termination-fee"
									],
									"query": [
										{
											"key": "contractId",
											"value": "1283615806",
											"description": "(Required) contractId"
										},
										{
											"key": "wishDate",
											"value": "2022-10-22T10:20:24.566Z",
											"description": "(Required) wishDate"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "a39c15a3-f3dc-45a1-b59e-e5208a61cc87",
							"name": "Service Unavailable",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/order/terminate/termination-fee?contractId=1283615806&wishDate=2022-10-22T10:20:24.566Z",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"order",
										"terminate",
										"termination-fee"
									],
									"query": [
										{
											"key": "contractId",
											"value": "1283615806",
											"description": "(Required) contractId"
										},
										{
											"key": "wishDate",
											"value": "2022-10-22T10:20:24.566Z",
											"description": "(Required) wishDate"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "5- Terminate contract",
					"id": "5e69fb80-21aa-4d28-bcfc-05f5f28c6d41",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"contractId\": 1283615806,\n    \"referenceNumber\": \"\",\n    \"wishDate\": \"2022-10-07T03:05:53.691Z\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/order/terminate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"order",
								"terminate"
							]
						},
						"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
					},
					"response": [
						{
							"id": "33686ee0-c2d2-46b5-bb9b-5063c775a956",
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"contractId\": 1283615806,\n    \"referenceNumber\": \"\",\n    \"wishDate\": \"2022-10-07T03:05:53.691Z\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/order/terminate",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"order",
										"terminate"
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "e10bd80e-841f-4794-8ff6-74dd0f6d3b88",
							"name": "Bad Request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"contractId\": 1283615806,\n    \"referenceNumber\": \"\",\n    \"wishDate\": \"2022-10-07T03:05:53.691Z\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/order/terminate",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"order",
										"terminate"
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "282fb2f7-d229-4471-bf08-956e29ba811e",
							"name": "Unauthorized",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"contractId\": 1283615806,\n    \"referenceNumber\": \"\",\n    \"wishDate\": \"2022-10-07T03:05:53.691Z\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/order/terminate",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"order",
										"terminate"
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "a1726b48-0660-4e24-aaf0-9574f5eac464",
							"name": "Forbidden",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"contractId\": 1283615806,\n    \"referenceNumber\": \"\",\n    \"wishDate\": \"2022-10-07T03:05:53.691Z\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/order/terminate",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"order",
										"terminate"
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "2bd3be99-01e0-4a4f-9527-ae87adb0367b",
							"name": "Not Found",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"contractId\": 1283615806,\n    \"referenceNumber\": \"\",\n    \"wishDate\": \"2022-10-07T03:05:53.691Z\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/order/terminate",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"order",
										"terminate"
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "730a8e76-52d0-425d-8a36-1c968d64df28",
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"contractId\": 1283615806,\n    \"referenceNumber\": \"\",\n    \"wishDate\": \"2022-10-07T03:05:53.691Z\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/order/terminate",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"order",
										"terminate"
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "66741750-7810-4226-ade9-398d78e106d3",
							"name": "Server Error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"contractId\": 1283615806,\n    \"referenceNumber\": \"\",\n    \"wishDate\": \"2022-10-07T03:05:53.691Z\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/order/terminate",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"order",
										"terminate"
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "f90a527a-c4e5-4a61-9f7b-95361554dcb0",
							"name": "Service Unavailable",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"contractId\": 1283615806,\n    \"referenceNumber\": \"\",\n    \"wishDate\": \"2022-10-07T03:05:53.691Z\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/order/terminate",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"order",
										"terminate"
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "6- Get service requests details",
					"id": "b9261d9e-8908-47cb-98b0-1e4e3c2c4467",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/track-and-trace/service-requests/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"track-and-trace",
								"service-requests",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "49579398",
									"description": "Service request ID"
								}
							]
						},
						"description": "The possible keys of `attributes` map in response object:<div style='max-height: 400px; overflow: auto; width: 100%'>\n<dl>\n<dt><b>Attribute name</b></dt><dd><b>Meaning</b></dd>\n<dt>login</dt><dd>Login</dd>\n<dt>roles</dt><dd>Roles</dd>\n<dt>firstName</dt><dd>First name</dd>\n<dt>lastName</dt><dd>Last name</dd>\n<dt>surnamePrefix</dt><dd>Surname prefix</dd>\n<dt>email</dt><dd>E-mail</dd>\n<dt>dateOfBirth</dt><dd>Date of birth</dd>\n<dt>vip</dt><dd>VIP</dd>\n<dt>employeeNumber</dt><dd>Employee number</dd>\n<dt>gender</dt><dd>Gender</dd>\n<dt>salutation</dt><dd>Salutation</dd>\n<dt>preferredLanguage</dt><dd>Preferred language</dd>\n<dt>comments</dt><dd>Comments</dd>\n<dt>accesspointNameMSISDN</dt><dd>Mobile number</dd>\n<dt>accesspointNameSIM</dt><dd>SIM card number</dd>\n<dt>accesspointNameIMSI</dt><dd>IMSI</dd>\n<dt>IMEI</dt><dd>IMEI</dd>\n<dt>Hanset_IMEI_number</dt><dd>IMEI</dd>\n<dt>accesspointNameFixedNumber</dt><dd>Fixed Number</dd>\n<dt>activeTo</dt><dd>Active to</dd>\n<dt>contractName</dt><dd>Subscription or device name</dd>\n<dt>totalOnetimePrice</dt><dd>One time price</dd>\n<dt>totalRecurrentPrice</dt><dd>Recurring price</dd>\n<dt>deferredPrice</dt><dd>Deferred price</dd>\n<dt>newUiccId</dt><dd>New SIM card number</dd>\n<dt>movedGroupName</dt><dd>Moved account</dd>\n<dt>subscriberAccountId</dt><dd>Old location</dd>\n<dt>destinationAccount</dt><dd>New location</dd>\n<dt>selectedDuoUiccid</dt><dd>Selected Duo SIM card number</dd>\n<dt>projectId</dt><dd>Project ID</dd>\n<dt>new_fixed_number</dt><dd>New fixed number</dd>\n<dt>new_desk_number</dt><dd>New extension</dd>\n<dt>oldUserGroupName</dt><dd>Previous user group</dd>\n<dt>newUserGroupName</dt><dd>New user group</dd>\n<dt>vpnName</dt><dd>VPN name</dd>\n<dt>deskNumber</dt><dd>Extension</dd>\n<dt>accesspointNameDeskNumber</dt><dd>Extension</dd>\n<dt>mobileAddress</dt><dd>Mobile number</dd>\n<dt>enterpriseName</dt><dd>Enterprise name</dd>\n<dt>enterpriseID</dt><dd>Enterprise ID</dd>\n<dt>mobilityGroupName</dt><dd>Fixed-Mobile PBX name</dd>\n<dt>userGroupName</dt><dd>User group</dd>\n<dt>enterpriseUserGroup</dt><dd>User group</dd>\n<dt>initialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>sipAccountName</dt><dd>SIP account name</dd>\n<dt>accessInstanceAttributeinitialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>accesspointNameQueuePhoneNumber</dt><dd>Queue phone number</dd>\n<dt>accesspointNameSipAccountName</dt><dd>SIP account name</dd>\n<dt>subscriptionAmount</dt><dd>New subscription amount</dd>\n<dt>contract_contact_name</dt><dd>Contract contact person (name)</dd>\n<dt>contract_contact_phone</dt><dd>Contract contact person (phone)</dd>\n<dt>contract_contact_mail</dt><dd>Contract contact person (mail)</dd>\n<dt>financial_contact_name</dt><dd>Financial contact person (name)</dd>\n<dt>financial_contact_phone</dt><dd>Financial contact person (phone)</dd>\n<dt>financial_contact_mail</dt><dd>Financial contact person (mail)</dd>\n<dt>technical_contact_name</dt><dd>Technical contact Person (name)</dd>\n<dt>technical_contact_phone</dt><dd>Technical contact Person (phone)</dd>\n<dt>technical_contact_mail</dt><dd>Technical contact Person (mail)</dd>\n<dt>deviceOption</dt><dd>Device option</dd>\n<dt>deviceType_label</dt><dd>Device type</dd>\n<dt>macAddress</dt><dd>Mac address</dd>\n<dt>deviceName</dt><dd>Device name</dd>\n<dt>sacGroupAccountId_label</dt><dd>Location account</dd>\n<dt>groupId</dt><dd>Location</dd>\n<dt>vGroupMovingToID</dt><dd>New location</dd>\n<dt>pbxName</dt><dd>PBX</dd>\n<dt>groupCitemId_label</dt><dd>Group</dd>\n<dt>Fixed</dt><dd>Alternate fixed number</dd>\n<dt>DeskNumber</dt><dd>Alternate extension</dd>\n<dt>billing_retention_period</dt><dd>Financial data retention period (months)</dd>\n<dt>managedGroupName</dt><dd>Authorized for</dd>\n<dt>subscriptionType</dt><dd>Subscription type</dd>\n<dt>CurrentNetworkOperator</dt><dd>Current network operator</dd>\n<dt>CurrentServiceProvider</dt><dd>Current service provider</dd>\n<dt>Customer_name_at_current_provider</dt><dd>Customer name at current provider</dd>\n<dt>Current_contract_number</dt><dd>Customer number at current provider</dd>\n<dt>UIccId</dt><dd>Current SIM card number</dd>\n<dt>Initials</dt><dd>Initials</dd>\n<dt>FamilyNamePrefix</dt><dd>Family name prefix</dd>\n<dt>FamilyName</dt><dd>Family name</dd>\n<dt>delivery_TT_id</dt><dd>Delivery Track&trace ID</dd>\n<dt>IsAppleDEP</dt><dd>Apple DEP</dd>\n<dt>IsSamsungKNOX</dt><dd>Samsung KNOX</dd>\n<dt>keepCurrentSim</dt><dd>Keep existing SIM card</dd>\n<dt>Note</dt><dd>Note</dd>\n<dt>Porting_wish_date</dt><dd>Preferred transition date</dd>\n<dt>returnReason</dt><dd>Reason for return</dd>\n<dt>returnRemarks</dt><dd>Remarks</dd>\n<dt>companyName</dt><dd>Company name</dd>\n<dt>companyNamePronounciation</dt><dd>Comapny name pronounciation</dd>\n<dt>businessVoiceMailMessageText</dt><dd>Chosen business voicemail message</dd>\n</dl>\n<div>\n<style type=\"text/css\">  dl {\n    display: flex;\n    flex-flow: row wrap;\n  }\n  dt {\n    flex-basis: 20%;\n    text-align: right;\n  }\n  dd {\n    flex-basis: 70%;\n    flex-grow: 1;\n  }\n</style>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_orders_track_and_trace</li><li>privileges_orders_authorization</li></ul>"
					},
					"response": [
						{
							"id": "dc5ccb04-d399-4979-8a1e-37fa0a1c8269",
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/track-and-trace/service-requests/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"track-and-trace",
										"service-requests",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "49579398",
											"description": "Service request ID"
										}
									]
								},
								"description": "The possible keys of `attributes` map in response object:<div style='max-height: 400px; overflow: auto; width: 100%'>\n<dl>\n<dt><b>Attribute name</b></dt><dd><b>Meaning</b></dd>\n<dt>login</dt><dd>Login</dd>\n<dt>roles</dt><dd>Roles</dd>\n<dt>firstName</dt><dd>First name</dd>\n<dt>lastName</dt><dd>Last name</dd>\n<dt>surnamePrefix</dt><dd>Surname prefix</dd>\n<dt>email</dt><dd>E-mail</dd>\n<dt>dateOfBirth</dt><dd>Date of birth</dd>\n<dt>vip</dt><dd>VIP</dd>\n<dt>employeeNumber</dt><dd>Employee number</dd>\n<dt>gender</dt><dd>Gender</dd>\n<dt>salutation</dt><dd>Salutation</dd>\n<dt>preferredLanguage</dt><dd>Preferred language</dd>\n<dt>comments</dt><dd>Comments</dd>\n<dt>accesspointNameMSISDN</dt><dd>Mobile number</dd>\n<dt>accesspointNameSIM</dt><dd>SIM card number</dd>\n<dt>accesspointNameIMSI</dt><dd>IMSI</dd>\n<dt>IMEI</dt><dd>IMEI</dd>\n<dt>Hanset_IMEI_number</dt><dd>IMEI</dd>\n<dt>accesspointNameFixedNumber</dt><dd>Fixed Number</dd>\n<dt>activeTo</dt><dd>Active to</dd>\n<dt>contractName</dt><dd>Subscription or device name</dd>\n<dt>totalOnetimePrice</dt><dd>One time price</dd>\n<dt>totalRecurrentPrice</dt><dd>Recurring price</dd>\n<dt>deferredPrice</dt><dd>Deferred price</dd>\n<dt>newUiccId</dt><dd>New SIM card number</dd>\n<dt>movedGroupName</dt><dd>Moved account</dd>\n<dt>subscriberAccountId</dt><dd>Old location</dd>\n<dt>destinationAccount</dt><dd>New location</dd>\n<dt>selectedDuoUiccid</dt><dd>Selected Duo SIM card number</dd>\n<dt>projectId</dt><dd>Project ID</dd>\n<dt>new_fixed_number</dt><dd>New fixed number</dd>\n<dt>new_desk_number</dt><dd>New extension</dd>\n<dt>oldUserGroupName</dt><dd>Previous user group</dd>\n<dt>newUserGroupName</dt><dd>New user group</dd>\n<dt>vpnName</dt><dd>VPN name</dd>\n<dt>deskNumber</dt><dd>Extension</dd>\n<dt>accesspointNameDeskNumber</dt><dd>Extension</dd>\n<dt>mobileAddress</dt><dd>Mobile number</dd>\n<dt>enterpriseName</dt><dd>Enterprise name</dd>\n<dt>enterpriseID</dt><dd>Enterprise ID</dd>\n<dt>mobilityGroupName</dt><dd>Fixed-Mobile PBX name</dd>\n<dt>userGroupName</dt><dd>User group</dd>\n<dt>enterpriseUserGroup</dt><dd>User group</dd>\n<dt>initialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>sipAccountName</dt><dd>SIP account name</dd>\n<dt>accessInstanceAttributeinitialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>accesspointNameQueuePhoneNumber</dt><dd>Queue phone number</dd>\n<dt>accesspointNameSipAccountName</dt><dd>SIP account name</dd>\n<dt>subscriptionAmount</dt><dd>New subscription amount</dd>\n<dt>contract_contact_name</dt><dd>Contract contact person (name)</dd>\n<dt>contract_contact_phone</dt><dd>Contract contact person (phone)</dd>\n<dt>contract_contact_mail</dt><dd>Contract contact person (mail)</dd>\n<dt>financial_contact_name</dt><dd>Financial contact person (name)</dd>\n<dt>financial_contact_phone</dt><dd>Financial contact person (phone)</dd>\n<dt>financial_contact_mail</dt><dd>Financial contact person (mail)</dd>\n<dt>technical_contact_name</dt><dd>Technical contact Person (name)</dd>\n<dt>technical_contact_phone</dt><dd>Technical contact Person (phone)</dd>\n<dt>technical_contact_mail</dt><dd>Technical contact Person (mail)</dd>\n<dt>deviceOption</dt><dd>Device option</dd>\n<dt>deviceType_label</dt><dd>Device type</dd>\n<dt>macAddress</dt><dd>Mac address</dd>\n<dt>deviceName</dt><dd>Device name</dd>\n<dt>sacGroupAccountId_label</dt><dd>Location account</dd>\n<dt>groupId</dt><dd>Location</dd>\n<dt>vGroupMovingToID</dt><dd>New location</dd>\n<dt>pbxName</dt><dd>PBX</dd>\n<dt>groupCitemId_label</dt><dd>Group</dd>\n<dt>Fixed</dt><dd>Alternate fixed number</dd>\n<dt>DeskNumber</dt><dd>Alternate extension</dd>\n<dt>billing_retention_period</dt><dd>Financial data retention period (months)</dd>\n<dt>managedGroupName</dt><dd>Authorized for</dd>\n<dt>subscriptionType</dt><dd>Subscription type</dd>\n<dt>CurrentNetworkOperator</dt><dd>Current network operator</dd>\n<dt>CurrentServiceProvider</dt><dd>Current service provider</dd>\n<dt>Customer_name_at_current_provider</dt><dd>Customer name at current provider</dd>\n<dt>Current_contract_number</dt><dd>Customer number at current provider</dd>\n<dt>UIccId</dt><dd>Current SIM card number</dd>\n<dt>Initials</dt><dd>Initials</dd>\n<dt>FamilyNamePrefix</dt><dd>Family name prefix</dd>\n<dt>FamilyName</dt><dd>Family name</dd>\n<dt>delivery_TT_id</dt><dd>Delivery Track&trace ID</dd>\n<dt>IsAppleDEP</dt><dd>Apple DEP</dd>\n<dt>IsSamsungKNOX</dt><dd>Samsung KNOX</dd>\n<dt>keepCurrentSim</dt><dd>Keep existing SIM card</dd>\n<dt>Note</dt><dd>Note</dd>\n<dt>Porting_wish_date</dt><dd>Preferred transition date</dd>\n<dt>returnReason</dt><dd>Reason for return</dd>\n<dt>returnRemarks</dt><dd>Remarks</dd>\n<dt>companyName</dt><dd>Company name</dd>\n<dt>companyNamePronounciation</dt><dd>Comapny name pronounciation</dd>\n<dt>businessVoiceMailMessageText</dt><dd>Chosen business voicemail message</dd>\n</dl>\n<div>\n<style type=\"text/css\">  dl {\n    display: flex;\n    flex-flow: row wrap;\n  }\n  dt {\n    flex-basis: 20%;\n    text-align: right;\n  }\n  dd {\n    flex-basis: 70%;\n    flex-grow: 1;\n  }\n</style>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_orders_track_and_trace</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "42855ae3-e9dc-4569-b88d-6de0257e3839",
							"name": "Bad Request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/track-and-trace/service-requests/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"track-and-trace",
										"service-requests",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "49579398",
											"description": "Service request ID"
										}
									]
								},
								"description": "The possible keys of `attributes` map in response object:<div style='max-height: 400px; overflow: auto; width: 100%'>\n<dl>\n<dt><b>Attribute name</b></dt><dd><b>Meaning</b></dd>\n<dt>login</dt><dd>Login</dd>\n<dt>roles</dt><dd>Roles</dd>\n<dt>firstName</dt><dd>First name</dd>\n<dt>lastName</dt><dd>Last name</dd>\n<dt>surnamePrefix</dt><dd>Surname prefix</dd>\n<dt>email</dt><dd>E-mail</dd>\n<dt>dateOfBirth</dt><dd>Date of birth</dd>\n<dt>vip</dt><dd>VIP</dd>\n<dt>employeeNumber</dt><dd>Employee number</dd>\n<dt>gender</dt><dd>Gender</dd>\n<dt>salutation</dt><dd>Salutation</dd>\n<dt>preferredLanguage</dt><dd>Preferred language</dd>\n<dt>comments</dt><dd>Comments</dd>\n<dt>accesspointNameMSISDN</dt><dd>Mobile number</dd>\n<dt>accesspointNameSIM</dt><dd>SIM card number</dd>\n<dt>accesspointNameIMSI</dt><dd>IMSI</dd>\n<dt>IMEI</dt><dd>IMEI</dd>\n<dt>Hanset_IMEI_number</dt><dd>IMEI</dd>\n<dt>accesspointNameFixedNumber</dt><dd>Fixed Number</dd>\n<dt>activeTo</dt><dd>Active to</dd>\n<dt>contractName</dt><dd>Subscription or device name</dd>\n<dt>totalOnetimePrice</dt><dd>One time price</dd>\n<dt>totalRecurrentPrice</dt><dd>Recurring price</dd>\n<dt>deferredPrice</dt><dd>Deferred price</dd>\n<dt>newUiccId</dt><dd>New SIM card number</dd>\n<dt>movedGroupName</dt><dd>Moved account</dd>\n<dt>subscriberAccountId</dt><dd>Old location</dd>\n<dt>destinationAccount</dt><dd>New location</dd>\n<dt>selectedDuoUiccid</dt><dd>Selected Duo SIM card number</dd>\n<dt>projectId</dt><dd>Project ID</dd>\n<dt>new_fixed_number</dt><dd>New fixed number</dd>\n<dt>new_desk_number</dt><dd>New extension</dd>\n<dt>oldUserGroupName</dt><dd>Previous user group</dd>\n<dt>newUserGroupName</dt><dd>New user group</dd>\n<dt>vpnName</dt><dd>VPN name</dd>\n<dt>deskNumber</dt><dd>Extension</dd>\n<dt>accesspointNameDeskNumber</dt><dd>Extension</dd>\n<dt>mobileAddress</dt><dd>Mobile number</dd>\n<dt>enterpriseName</dt><dd>Enterprise name</dd>\n<dt>enterpriseID</dt><dd>Enterprise ID</dd>\n<dt>mobilityGroupName</dt><dd>Fixed-Mobile PBX name</dd>\n<dt>userGroupName</dt><dd>User group</dd>\n<dt>enterpriseUserGroup</dt><dd>User group</dd>\n<dt>initialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>sipAccountName</dt><dd>SIP account name</dd>\n<dt>accessInstanceAttributeinitialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>accesspointNameQueuePhoneNumber</dt><dd>Queue phone number</dd>\n<dt>accesspointNameSipAccountName</dt><dd>SIP account name</dd>\n<dt>subscriptionAmount</dt><dd>New subscription amount</dd>\n<dt>contract_contact_name</dt><dd>Contract contact person (name)</dd>\n<dt>contract_contact_phone</dt><dd>Contract contact person (phone)</dd>\n<dt>contract_contact_mail</dt><dd>Contract contact person (mail)</dd>\n<dt>financial_contact_name</dt><dd>Financial contact person (name)</dd>\n<dt>financial_contact_phone</dt><dd>Financial contact person (phone)</dd>\n<dt>financial_contact_mail</dt><dd>Financial contact person (mail)</dd>\n<dt>technical_contact_name</dt><dd>Technical contact Person (name)</dd>\n<dt>technical_contact_phone</dt><dd>Technical contact Person (phone)</dd>\n<dt>technical_contact_mail</dt><dd>Technical contact Person (mail)</dd>\n<dt>deviceOption</dt><dd>Device option</dd>\n<dt>deviceType_label</dt><dd>Device type</dd>\n<dt>macAddress</dt><dd>Mac address</dd>\n<dt>deviceName</dt><dd>Device name</dd>\n<dt>sacGroupAccountId_label</dt><dd>Location account</dd>\n<dt>groupId</dt><dd>Location</dd>\n<dt>vGroupMovingToID</dt><dd>New location</dd>\n<dt>pbxName</dt><dd>PBX</dd>\n<dt>groupCitemId_label</dt><dd>Group</dd>\n<dt>Fixed</dt><dd>Alternate fixed number</dd>\n<dt>DeskNumber</dt><dd>Alternate extension</dd>\n<dt>billing_retention_period</dt><dd>Financial data retention period (months)</dd>\n<dt>managedGroupName</dt><dd>Authorized for</dd>\n<dt>subscriptionType</dt><dd>Subscription type</dd>\n<dt>CurrentNetworkOperator</dt><dd>Current network operator</dd>\n<dt>CurrentServiceProvider</dt><dd>Current service provider</dd>\n<dt>Customer_name_at_current_provider</dt><dd>Customer name at current provider</dd>\n<dt>Current_contract_number</dt><dd>Customer number at current provider</dd>\n<dt>UIccId</dt><dd>Current SIM card number</dd>\n<dt>Initials</dt><dd>Initials</dd>\n<dt>FamilyNamePrefix</dt><dd>Family name prefix</dd>\n<dt>FamilyName</dt><dd>Family name</dd>\n<dt>delivery_TT_id</dt><dd>Delivery Track&trace ID</dd>\n<dt>IsAppleDEP</dt><dd>Apple DEP</dd>\n<dt>IsSamsungKNOX</dt><dd>Samsung KNOX</dd>\n<dt>keepCurrentSim</dt><dd>Keep existing SIM card</dd>\n<dt>Note</dt><dd>Note</dd>\n<dt>Porting_wish_date</dt><dd>Preferred transition date</dd>\n<dt>returnReason</dt><dd>Reason for return</dd>\n<dt>returnRemarks</dt><dd>Remarks</dd>\n<dt>companyName</dt><dd>Company name</dd>\n<dt>companyNamePronounciation</dt><dd>Comapny name pronounciation</dd>\n<dt>businessVoiceMailMessageText</dt><dd>Chosen business voicemail message</dd>\n</dl>\n<div>\n<style type=\"text/css\">  dl {\n    display: flex;\n    flex-flow: row wrap;\n  }\n  dt {\n    flex-basis: 20%;\n    text-align: right;\n  }\n  dd {\n    flex-basis: 70%;\n    flex-grow: 1;\n  }\n</style>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_orders_track_and_trace</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "66f130a0-aec9-4ab5-8952-0a25c62333fd",
							"name": "Unauthorized",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/track-and-trace/service-requests/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"track-and-trace",
										"service-requests",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "49579398",
											"description": "Service request ID"
										}
									]
								},
								"description": "The possible keys of `attributes` map in response object:<div style='max-height: 400px; overflow: auto; width: 100%'>\n<dl>\n<dt><b>Attribute name</b></dt><dd><b>Meaning</b></dd>\n<dt>login</dt><dd>Login</dd>\n<dt>roles</dt><dd>Roles</dd>\n<dt>firstName</dt><dd>First name</dd>\n<dt>lastName</dt><dd>Last name</dd>\n<dt>surnamePrefix</dt><dd>Surname prefix</dd>\n<dt>email</dt><dd>E-mail</dd>\n<dt>dateOfBirth</dt><dd>Date of birth</dd>\n<dt>vip</dt><dd>VIP</dd>\n<dt>employeeNumber</dt><dd>Employee number</dd>\n<dt>gender</dt><dd>Gender</dd>\n<dt>salutation</dt><dd>Salutation</dd>\n<dt>preferredLanguage</dt><dd>Preferred language</dd>\n<dt>comments</dt><dd>Comments</dd>\n<dt>accesspointNameMSISDN</dt><dd>Mobile number</dd>\n<dt>accesspointNameSIM</dt><dd>SIM card number</dd>\n<dt>accesspointNameIMSI</dt><dd>IMSI</dd>\n<dt>IMEI</dt><dd>IMEI</dd>\n<dt>Hanset_IMEI_number</dt><dd>IMEI</dd>\n<dt>accesspointNameFixedNumber</dt><dd>Fixed Number</dd>\n<dt>activeTo</dt><dd>Active to</dd>\n<dt>contractName</dt><dd>Subscription or device name</dd>\n<dt>totalOnetimePrice</dt><dd>One time price</dd>\n<dt>totalRecurrentPrice</dt><dd>Recurring price</dd>\n<dt>deferredPrice</dt><dd>Deferred price</dd>\n<dt>newUiccId</dt><dd>New SIM card number</dd>\n<dt>movedGroupName</dt><dd>Moved account</dd>\n<dt>subscriberAccountId</dt><dd>Old location</dd>\n<dt>destinationAccount</dt><dd>New location</dd>\n<dt>selectedDuoUiccid</dt><dd>Selected Duo SIM card number</dd>\n<dt>projectId</dt><dd>Project ID</dd>\n<dt>new_fixed_number</dt><dd>New fixed number</dd>\n<dt>new_desk_number</dt><dd>New extension</dd>\n<dt>oldUserGroupName</dt><dd>Previous user group</dd>\n<dt>newUserGroupName</dt><dd>New user group</dd>\n<dt>vpnName</dt><dd>VPN name</dd>\n<dt>deskNumber</dt><dd>Extension</dd>\n<dt>accesspointNameDeskNumber</dt><dd>Extension</dd>\n<dt>mobileAddress</dt><dd>Mobile number</dd>\n<dt>enterpriseName</dt><dd>Enterprise name</dd>\n<dt>enterpriseID</dt><dd>Enterprise ID</dd>\n<dt>mobilityGroupName</dt><dd>Fixed-Mobile PBX name</dd>\n<dt>userGroupName</dt><dd>User group</dd>\n<dt>enterpriseUserGroup</dt><dd>User group</dd>\n<dt>initialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>sipAccountName</dt><dd>SIP account name</dd>\n<dt>accessInstanceAttributeinitialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>accesspointNameQueuePhoneNumber</dt><dd>Queue phone number</dd>\n<dt>accesspointNameSipAccountName</dt><dd>SIP account name</dd>\n<dt>subscriptionAmount</dt><dd>New subscription amount</dd>\n<dt>contract_contact_name</dt><dd>Contract contact person (name)</dd>\n<dt>contract_contact_phone</dt><dd>Contract contact person (phone)</dd>\n<dt>contract_contact_mail</dt><dd>Contract contact person (mail)</dd>\n<dt>financial_contact_name</dt><dd>Financial contact person (name)</dd>\n<dt>financial_contact_phone</dt><dd>Financial contact person (phone)</dd>\n<dt>financial_contact_mail</dt><dd>Financial contact person (mail)</dd>\n<dt>technical_contact_name</dt><dd>Technical contact Person (name)</dd>\n<dt>technical_contact_phone</dt><dd>Technical contact Person (phone)</dd>\n<dt>technical_contact_mail</dt><dd>Technical contact Person (mail)</dd>\n<dt>deviceOption</dt><dd>Device option</dd>\n<dt>deviceType_label</dt><dd>Device type</dd>\n<dt>macAddress</dt><dd>Mac address</dd>\n<dt>deviceName</dt><dd>Device name</dd>\n<dt>sacGroupAccountId_label</dt><dd>Location account</dd>\n<dt>groupId</dt><dd>Location</dd>\n<dt>vGroupMovingToID</dt><dd>New location</dd>\n<dt>pbxName</dt><dd>PBX</dd>\n<dt>groupCitemId_label</dt><dd>Group</dd>\n<dt>Fixed</dt><dd>Alternate fixed number</dd>\n<dt>DeskNumber</dt><dd>Alternate extension</dd>\n<dt>billing_retention_period</dt><dd>Financial data retention period (months)</dd>\n<dt>managedGroupName</dt><dd>Authorized for</dd>\n<dt>subscriptionType</dt><dd>Subscription type</dd>\n<dt>CurrentNetworkOperator</dt><dd>Current network operator</dd>\n<dt>CurrentServiceProvider</dt><dd>Current service provider</dd>\n<dt>Customer_name_at_current_provider</dt><dd>Customer name at current provider</dd>\n<dt>Current_contract_number</dt><dd>Customer number at current provider</dd>\n<dt>UIccId</dt><dd>Current SIM card number</dd>\n<dt>Initials</dt><dd>Initials</dd>\n<dt>FamilyNamePrefix</dt><dd>Family name prefix</dd>\n<dt>FamilyName</dt><dd>Family name</dd>\n<dt>delivery_TT_id</dt><dd>Delivery Track&trace ID</dd>\n<dt>IsAppleDEP</dt><dd>Apple DEP</dd>\n<dt>IsSamsungKNOX</dt><dd>Samsung KNOX</dd>\n<dt>keepCurrentSim</dt><dd>Keep existing SIM card</dd>\n<dt>Note</dt><dd>Note</dd>\n<dt>Porting_wish_date</dt><dd>Preferred transition date</dd>\n<dt>returnReason</dt><dd>Reason for return</dd>\n<dt>returnRemarks</dt><dd>Remarks</dd>\n<dt>companyName</dt><dd>Company name</dd>\n<dt>companyNamePronounciation</dt><dd>Comapny name pronounciation</dd>\n<dt>businessVoiceMailMessageText</dt><dd>Chosen business voicemail message</dd>\n</dl>\n<div>\n<style type=\"text/css\">  dl {\n    display: flex;\n    flex-flow: row wrap;\n  }\n  dt {\n    flex-basis: 20%;\n    text-align: right;\n  }\n  dd {\n    flex-basis: 70%;\n    flex-grow: 1;\n  }\n</style>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_orders_track_and_trace</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "5912cba5-a59a-40c2-9553-1e64b9315925",
							"name": "Forbidden",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/track-and-trace/service-requests/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"track-and-trace",
										"service-requests",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "49579398",
											"description": "Service request ID"
										}
									]
								},
								"description": "The possible keys of `attributes` map in response object:<div style='max-height: 400px; overflow: auto; width: 100%'>\n<dl>\n<dt><b>Attribute name</b></dt><dd><b>Meaning</b></dd>\n<dt>login</dt><dd>Login</dd>\n<dt>roles</dt><dd>Roles</dd>\n<dt>firstName</dt><dd>First name</dd>\n<dt>lastName</dt><dd>Last name</dd>\n<dt>surnamePrefix</dt><dd>Surname prefix</dd>\n<dt>email</dt><dd>E-mail</dd>\n<dt>dateOfBirth</dt><dd>Date of birth</dd>\n<dt>vip</dt><dd>VIP</dd>\n<dt>employeeNumber</dt><dd>Employee number</dd>\n<dt>gender</dt><dd>Gender</dd>\n<dt>salutation</dt><dd>Salutation</dd>\n<dt>preferredLanguage</dt><dd>Preferred language</dd>\n<dt>comments</dt><dd>Comments</dd>\n<dt>accesspointNameMSISDN</dt><dd>Mobile number</dd>\n<dt>accesspointNameSIM</dt><dd>SIM card number</dd>\n<dt>accesspointNameIMSI</dt><dd>IMSI</dd>\n<dt>IMEI</dt><dd>IMEI</dd>\n<dt>Hanset_IMEI_number</dt><dd>IMEI</dd>\n<dt>accesspointNameFixedNumber</dt><dd>Fixed Number</dd>\n<dt>activeTo</dt><dd>Active to</dd>\n<dt>contractName</dt><dd>Subscription or device name</dd>\n<dt>totalOnetimePrice</dt><dd>One time price</dd>\n<dt>totalRecurrentPrice</dt><dd>Recurring price</dd>\n<dt>deferredPrice</dt><dd>Deferred price</dd>\n<dt>newUiccId</dt><dd>New SIM card number</dd>\n<dt>movedGroupName</dt><dd>Moved account</dd>\n<dt>subscriberAccountId</dt><dd>Old location</dd>\n<dt>destinationAccount</dt><dd>New location</dd>\n<dt>selectedDuoUiccid</dt><dd>Selected Duo SIM card number</dd>\n<dt>projectId</dt><dd>Project ID</dd>\n<dt>new_fixed_number</dt><dd>New fixed number</dd>\n<dt>new_desk_number</dt><dd>New extension</dd>\n<dt>oldUserGroupName</dt><dd>Previous user group</dd>\n<dt>newUserGroupName</dt><dd>New user group</dd>\n<dt>vpnName</dt><dd>VPN name</dd>\n<dt>deskNumber</dt><dd>Extension</dd>\n<dt>accesspointNameDeskNumber</dt><dd>Extension</dd>\n<dt>mobileAddress</dt><dd>Mobile number</dd>\n<dt>enterpriseName</dt><dd>Enterprise name</dd>\n<dt>enterpriseID</dt><dd>Enterprise ID</dd>\n<dt>mobilityGroupName</dt><dd>Fixed-Mobile PBX name</dd>\n<dt>userGroupName</dt><dd>User group</dd>\n<dt>enterpriseUserGroup</dt><dd>User group</dd>\n<dt>initialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>sipAccountName</dt><dd>SIP account name</dd>\n<dt>accessInstanceAttributeinitialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>accesspointNameQueuePhoneNumber</dt><dd>Queue phone number</dd>\n<dt>accesspointNameSipAccountName</dt><dd>SIP account name</dd>\n<dt>subscriptionAmount</dt><dd>New subscription amount</dd>\n<dt>contract_contact_name</dt><dd>Contract contact person (name)</dd>\n<dt>contract_contact_phone</dt><dd>Contract contact person (phone)</dd>\n<dt>contract_contact_mail</dt><dd>Contract contact person (mail)</dd>\n<dt>financial_contact_name</dt><dd>Financial contact person (name)</dd>\n<dt>financial_contact_phone</dt><dd>Financial contact person (phone)</dd>\n<dt>financial_contact_mail</dt><dd>Financial contact person (mail)</dd>\n<dt>technical_contact_name</dt><dd>Technical contact Person (name)</dd>\n<dt>technical_contact_phone</dt><dd>Technical contact Person (phone)</dd>\n<dt>technical_contact_mail</dt><dd>Technical contact Person (mail)</dd>\n<dt>deviceOption</dt><dd>Device option</dd>\n<dt>deviceType_label</dt><dd>Device type</dd>\n<dt>macAddress</dt><dd>Mac address</dd>\n<dt>deviceName</dt><dd>Device name</dd>\n<dt>sacGroupAccountId_label</dt><dd>Location account</dd>\n<dt>groupId</dt><dd>Location</dd>\n<dt>vGroupMovingToID</dt><dd>New location</dd>\n<dt>pbxName</dt><dd>PBX</dd>\n<dt>groupCitemId_label</dt><dd>Group</dd>\n<dt>Fixed</dt><dd>Alternate fixed number</dd>\n<dt>DeskNumber</dt><dd>Alternate extension</dd>\n<dt>billing_retention_period</dt><dd>Financial data retention period (months)</dd>\n<dt>managedGroupName</dt><dd>Authorized for</dd>\n<dt>subscriptionType</dt><dd>Subscription type</dd>\n<dt>CurrentNetworkOperator</dt><dd>Current network operator</dd>\n<dt>CurrentServiceProvider</dt><dd>Current service provider</dd>\n<dt>Customer_name_at_current_provider</dt><dd>Customer name at current provider</dd>\n<dt>Current_contract_number</dt><dd>Customer number at current provider</dd>\n<dt>UIccId</dt><dd>Current SIM card number</dd>\n<dt>Initials</dt><dd>Initials</dd>\n<dt>FamilyNamePrefix</dt><dd>Family name prefix</dd>\n<dt>FamilyName</dt><dd>Family name</dd>\n<dt>delivery_TT_id</dt><dd>Delivery Track&trace ID</dd>\n<dt>IsAppleDEP</dt><dd>Apple DEP</dd>\n<dt>IsSamsungKNOX</dt><dd>Samsung KNOX</dd>\n<dt>keepCurrentSim</dt><dd>Keep existing SIM card</dd>\n<dt>Note</dt><dd>Note</dd>\n<dt>Porting_wish_date</dt><dd>Preferred transition date</dd>\n<dt>returnReason</dt><dd>Reason for return</dd>\n<dt>returnRemarks</dt><dd>Remarks</dd>\n<dt>companyName</dt><dd>Company name</dd>\n<dt>companyNamePronounciation</dt><dd>Comapny name pronounciation</dd>\n<dt>businessVoiceMailMessageText</dt><dd>Chosen business voicemail message</dd>\n</dl>\n<div>\n<style type=\"text/css\">  dl {\n    display: flex;\n    flex-flow: row wrap;\n  }\n  dt {\n    flex-basis: 20%;\n    text-align: right;\n  }\n  dd {\n    flex-basis: 70%;\n    flex-grow: 1;\n  }\n</style>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_orders_track_and_trace</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "ecb11a87-d47d-4773-8980-8b5f947ee105",
							"name": "Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/track-and-trace/service-requests/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"track-and-trace",
										"service-requests",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "49579398",
											"description": "Service request ID"
										}
									]
								},
								"description": "The possible keys of `attributes` map in response object:<div style='max-height: 400px; overflow: auto; width: 100%'>\n<dl>\n<dt><b>Attribute name</b></dt><dd><b>Meaning</b></dd>\n<dt>login</dt><dd>Login</dd>\n<dt>roles</dt><dd>Roles</dd>\n<dt>firstName</dt><dd>First name</dd>\n<dt>lastName</dt><dd>Last name</dd>\n<dt>surnamePrefix</dt><dd>Surname prefix</dd>\n<dt>email</dt><dd>E-mail</dd>\n<dt>dateOfBirth</dt><dd>Date of birth</dd>\n<dt>vip</dt><dd>VIP</dd>\n<dt>employeeNumber</dt><dd>Employee number</dd>\n<dt>gender</dt><dd>Gender</dd>\n<dt>salutation</dt><dd>Salutation</dd>\n<dt>preferredLanguage</dt><dd>Preferred language</dd>\n<dt>comments</dt><dd>Comments</dd>\n<dt>accesspointNameMSISDN</dt><dd>Mobile number</dd>\n<dt>accesspointNameSIM</dt><dd>SIM card number</dd>\n<dt>accesspointNameIMSI</dt><dd>IMSI</dd>\n<dt>IMEI</dt><dd>IMEI</dd>\n<dt>Hanset_IMEI_number</dt><dd>IMEI</dd>\n<dt>accesspointNameFixedNumber</dt><dd>Fixed Number</dd>\n<dt>activeTo</dt><dd>Active to</dd>\n<dt>contractName</dt><dd>Subscription or device name</dd>\n<dt>totalOnetimePrice</dt><dd>One time price</dd>\n<dt>totalRecurrentPrice</dt><dd>Recurring price</dd>\n<dt>deferredPrice</dt><dd>Deferred price</dd>\n<dt>newUiccId</dt><dd>New SIM card number</dd>\n<dt>movedGroupName</dt><dd>Moved account</dd>\n<dt>subscriberAccountId</dt><dd>Old location</dd>\n<dt>destinationAccount</dt><dd>New location</dd>\n<dt>selectedDuoUiccid</dt><dd>Selected Duo SIM card number</dd>\n<dt>projectId</dt><dd>Project ID</dd>\n<dt>new_fixed_number</dt><dd>New fixed number</dd>\n<dt>new_desk_number</dt><dd>New extension</dd>\n<dt>oldUserGroupName</dt><dd>Previous user group</dd>\n<dt>newUserGroupName</dt><dd>New user group</dd>\n<dt>vpnName</dt><dd>VPN name</dd>\n<dt>deskNumber</dt><dd>Extension</dd>\n<dt>accesspointNameDeskNumber</dt><dd>Extension</dd>\n<dt>mobileAddress</dt><dd>Mobile number</dd>\n<dt>enterpriseName</dt><dd>Enterprise name</dd>\n<dt>enterpriseID</dt><dd>Enterprise ID</dd>\n<dt>mobilityGroupName</dt><dd>Fixed-Mobile PBX name</dd>\n<dt>userGroupName</dt><dd>User group</dd>\n<dt>enterpriseUserGroup</dt><dd>User group</dd>\n<dt>initialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>sipAccountName</dt><dd>SIP account name</dd>\n<dt>accessInstanceAttributeinitialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>accesspointNameQueuePhoneNumber</dt><dd>Queue phone number</dd>\n<dt>accesspointNameSipAccountName</dt><dd>SIP account name</dd>\n<dt>subscriptionAmount</dt><dd>New subscription amount</dd>\n<dt>contract_contact_name</dt><dd>Contract contact person (name)</dd>\n<dt>contract_contact_phone</dt><dd>Contract contact person (phone)</dd>\n<dt>contract_contact_mail</dt><dd>Contract contact person (mail)</dd>\n<dt>financial_contact_name</dt><dd>Financial contact person (name)</dd>\n<dt>financial_contact_phone</dt><dd>Financial contact person (phone)</dd>\n<dt>financial_contact_mail</dt><dd>Financial contact person (mail)</dd>\n<dt>technical_contact_name</dt><dd>Technical contact Person (name)</dd>\n<dt>technical_contact_phone</dt><dd>Technical contact Person (phone)</dd>\n<dt>technical_contact_mail</dt><dd>Technical contact Person (mail)</dd>\n<dt>deviceOption</dt><dd>Device option</dd>\n<dt>deviceType_label</dt><dd>Device type</dd>\n<dt>macAddress</dt><dd>Mac address</dd>\n<dt>deviceName</dt><dd>Device name</dd>\n<dt>sacGroupAccountId_label</dt><dd>Location account</dd>\n<dt>groupId</dt><dd>Location</dd>\n<dt>vGroupMovingToID</dt><dd>New location</dd>\n<dt>pbxName</dt><dd>PBX</dd>\n<dt>groupCitemId_label</dt><dd>Group</dd>\n<dt>Fixed</dt><dd>Alternate fixed number</dd>\n<dt>DeskNumber</dt><dd>Alternate extension</dd>\n<dt>billing_retention_period</dt><dd>Financial data retention period (months)</dd>\n<dt>managedGroupName</dt><dd>Authorized for</dd>\n<dt>subscriptionType</dt><dd>Subscription type</dd>\n<dt>CurrentNetworkOperator</dt><dd>Current network operator</dd>\n<dt>CurrentServiceProvider</dt><dd>Current service provider</dd>\n<dt>Customer_name_at_current_provider</dt><dd>Customer name at current provider</dd>\n<dt>Current_contract_number</dt><dd>Customer number at current provider</dd>\n<dt>UIccId</dt><dd>Current SIM card number</dd>\n<dt>Initials</dt><dd>Initials</dd>\n<dt>FamilyNamePrefix</dt><dd>Family name prefix</dd>\n<dt>FamilyName</dt><dd>Family name</dd>\n<dt>delivery_TT_id</dt><dd>Delivery Track&trace ID</dd>\n<dt>IsAppleDEP</dt><dd>Apple DEP</dd>\n<dt>IsSamsungKNOX</dt><dd>Samsung KNOX</dd>\n<dt>keepCurrentSim</dt><dd>Keep existing SIM card</dd>\n<dt>Note</dt><dd>Note</dd>\n<dt>Porting_wish_date</dt><dd>Preferred transition date</dd>\n<dt>returnReason</dt><dd>Reason for return</dd>\n<dt>returnRemarks</dt><dd>Remarks</dd>\n<dt>companyName</dt><dd>Company name</dd>\n<dt>companyNamePronounciation</dt><dd>Comapny name pronounciation</dd>\n<dt>businessVoiceMailMessageText</dt><dd>Chosen business voicemail message</dd>\n</dl>\n<div>\n<style type=\"text/css\">  dl {\n    display: flex;\n    flex-flow: row wrap;\n  }\n  dt {\n    flex-basis: 20%;\n    text-align: right;\n  }\n  dd {\n    flex-basis: 70%;\n    flex-grow: 1;\n  }\n</style>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_orders_track_and_trace</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "266df321-2680-4419-8778-f671a53088c3",
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/track-and-trace/service-requests/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"track-and-trace",
										"service-requests",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "49579398",
											"description": "Service request ID"
										}
									]
								},
								"description": "The possible keys of `attributes` map in response object:<div style='max-height: 400px; overflow: auto; width: 100%'>\n<dl>\n<dt><b>Attribute name</b></dt><dd><b>Meaning</b></dd>\n<dt>login</dt><dd>Login</dd>\n<dt>roles</dt><dd>Roles</dd>\n<dt>firstName</dt><dd>First name</dd>\n<dt>lastName</dt><dd>Last name</dd>\n<dt>surnamePrefix</dt><dd>Surname prefix</dd>\n<dt>email</dt><dd>E-mail</dd>\n<dt>dateOfBirth</dt><dd>Date of birth</dd>\n<dt>vip</dt><dd>VIP</dd>\n<dt>employeeNumber</dt><dd>Employee number</dd>\n<dt>gender</dt><dd>Gender</dd>\n<dt>salutation</dt><dd>Salutation</dd>\n<dt>preferredLanguage</dt><dd>Preferred language</dd>\n<dt>comments</dt><dd>Comments</dd>\n<dt>accesspointNameMSISDN</dt><dd>Mobile number</dd>\n<dt>accesspointNameSIM</dt><dd>SIM card number</dd>\n<dt>accesspointNameIMSI</dt><dd>IMSI</dd>\n<dt>IMEI</dt><dd>IMEI</dd>\n<dt>Hanset_IMEI_number</dt><dd>IMEI</dd>\n<dt>accesspointNameFixedNumber</dt><dd>Fixed Number</dd>\n<dt>activeTo</dt><dd>Active to</dd>\n<dt>contractName</dt><dd>Subscription or device name</dd>\n<dt>totalOnetimePrice</dt><dd>One time price</dd>\n<dt>totalRecurrentPrice</dt><dd>Recurring price</dd>\n<dt>deferredPrice</dt><dd>Deferred price</dd>\n<dt>newUiccId</dt><dd>New SIM card number</dd>\n<dt>movedGroupName</dt><dd>Moved account</dd>\n<dt>subscriberAccountId</dt><dd>Old location</dd>\n<dt>destinationAccount</dt><dd>New location</dd>\n<dt>selectedDuoUiccid</dt><dd>Selected Duo SIM card number</dd>\n<dt>projectId</dt><dd>Project ID</dd>\n<dt>new_fixed_number</dt><dd>New fixed number</dd>\n<dt>new_desk_number</dt><dd>New extension</dd>\n<dt>oldUserGroupName</dt><dd>Previous user group</dd>\n<dt>newUserGroupName</dt><dd>New user group</dd>\n<dt>vpnName</dt><dd>VPN name</dd>\n<dt>deskNumber</dt><dd>Extension</dd>\n<dt>accesspointNameDeskNumber</dt><dd>Extension</dd>\n<dt>mobileAddress</dt><dd>Mobile number</dd>\n<dt>enterpriseName</dt><dd>Enterprise name</dd>\n<dt>enterpriseID</dt><dd>Enterprise ID</dd>\n<dt>mobilityGroupName</dt><dd>Fixed-Mobile PBX name</dd>\n<dt>userGroupName</dt><dd>User group</dd>\n<dt>enterpriseUserGroup</dt><dd>User group</dd>\n<dt>initialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>sipAccountName</dt><dd>SIP account name</dd>\n<dt>accessInstanceAttributeinitialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>accesspointNameQueuePhoneNumber</dt><dd>Queue phone number</dd>\n<dt>accesspointNameSipAccountName</dt><dd>SIP account name</dd>\n<dt>subscriptionAmount</dt><dd>New subscription amount</dd>\n<dt>contract_contact_name</dt><dd>Contract contact person (name)</dd>\n<dt>contract_contact_phone</dt><dd>Contract contact person (phone)</dd>\n<dt>contract_contact_mail</dt><dd>Contract contact person (mail)</dd>\n<dt>financial_contact_name</dt><dd>Financial contact person (name)</dd>\n<dt>financial_contact_phone</dt><dd>Financial contact person (phone)</dd>\n<dt>financial_contact_mail</dt><dd>Financial contact person (mail)</dd>\n<dt>technical_contact_name</dt><dd>Technical contact Person (name)</dd>\n<dt>technical_contact_phone</dt><dd>Technical contact Person (phone)</dd>\n<dt>technical_contact_mail</dt><dd>Technical contact Person (mail)</dd>\n<dt>deviceOption</dt><dd>Device option</dd>\n<dt>deviceType_label</dt><dd>Device type</dd>\n<dt>macAddress</dt><dd>Mac address</dd>\n<dt>deviceName</dt><dd>Device name</dd>\n<dt>sacGroupAccountId_label</dt><dd>Location account</dd>\n<dt>groupId</dt><dd>Location</dd>\n<dt>vGroupMovingToID</dt><dd>New location</dd>\n<dt>pbxName</dt><dd>PBX</dd>\n<dt>groupCitemId_label</dt><dd>Group</dd>\n<dt>Fixed</dt><dd>Alternate fixed number</dd>\n<dt>DeskNumber</dt><dd>Alternate extension</dd>\n<dt>billing_retention_period</dt><dd>Financial data retention period (months)</dd>\n<dt>managedGroupName</dt><dd>Authorized for</dd>\n<dt>subscriptionType</dt><dd>Subscription type</dd>\n<dt>CurrentNetworkOperator</dt><dd>Current network operator</dd>\n<dt>CurrentServiceProvider</dt><dd>Current service provider</dd>\n<dt>Customer_name_at_current_provider</dt><dd>Customer name at current provider</dd>\n<dt>Current_contract_number</dt><dd>Customer number at current provider</dd>\n<dt>UIccId</dt><dd>Current SIM card number</dd>\n<dt>Initials</dt><dd>Initials</dd>\n<dt>FamilyNamePrefix</dt><dd>Family name prefix</dd>\n<dt>FamilyName</dt><dd>Family name</dd>\n<dt>delivery_TT_id</dt><dd>Delivery Track&trace ID</dd>\n<dt>IsAppleDEP</dt><dd>Apple DEP</dd>\n<dt>IsSamsungKNOX</dt><dd>Samsung KNOX</dd>\n<dt>keepCurrentSim</dt><dd>Keep existing SIM card</dd>\n<dt>Note</dt><dd>Note</dd>\n<dt>Porting_wish_date</dt><dd>Preferred transition date</dd>\n<dt>returnReason</dt><dd>Reason for return</dd>\n<dt>returnRemarks</dt><dd>Remarks</dd>\n<dt>companyName</dt><dd>Company name</dd>\n<dt>companyNamePronounciation</dt><dd>Comapny name pronounciation</dd>\n<dt>businessVoiceMailMessageText</dt><dd>Chosen business voicemail message</dd>\n</dl>\n<div>\n<style type=\"text/css\">  dl {\n    display: flex;\n    flex-flow: row wrap;\n  }\n  dt {\n    flex-basis: 20%;\n    text-align: right;\n  }\n  dd {\n    flex-basis: 70%;\n    flex-grow: 1;\n  }\n</style>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_orders_track_and_trace</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "18e792ba-c51a-4d82-9db7-b99bda52ec77",
							"name": "Server Error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/track-and-trace/service-requests/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"track-and-trace",
										"service-requests",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "49579398",
											"description": "Service request ID"
										}
									]
								},
								"description": "The possible keys of `attributes` map in response object:<div style='max-height: 400px; overflow: auto; width: 100%'>\n<dl>\n<dt><b>Attribute name</b></dt><dd><b>Meaning</b></dd>\n<dt>login</dt><dd>Login</dd>\n<dt>roles</dt><dd>Roles</dd>\n<dt>firstName</dt><dd>First name</dd>\n<dt>lastName</dt><dd>Last name</dd>\n<dt>surnamePrefix</dt><dd>Surname prefix</dd>\n<dt>email</dt><dd>E-mail</dd>\n<dt>dateOfBirth</dt><dd>Date of birth</dd>\n<dt>vip</dt><dd>VIP</dd>\n<dt>employeeNumber</dt><dd>Employee number</dd>\n<dt>gender</dt><dd>Gender</dd>\n<dt>salutation</dt><dd>Salutation</dd>\n<dt>preferredLanguage</dt><dd>Preferred language</dd>\n<dt>comments</dt><dd>Comments</dd>\n<dt>accesspointNameMSISDN</dt><dd>Mobile number</dd>\n<dt>accesspointNameSIM</dt><dd>SIM card number</dd>\n<dt>accesspointNameIMSI</dt><dd>IMSI</dd>\n<dt>IMEI</dt><dd>IMEI</dd>\n<dt>Hanset_IMEI_number</dt><dd>IMEI</dd>\n<dt>accesspointNameFixedNumber</dt><dd>Fixed Number</dd>\n<dt>activeTo</dt><dd>Active to</dd>\n<dt>contractName</dt><dd>Subscription or device name</dd>\n<dt>totalOnetimePrice</dt><dd>One time price</dd>\n<dt>totalRecurrentPrice</dt><dd>Recurring price</dd>\n<dt>deferredPrice</dt><dd>Deferred price</dd>\n<dt>newUiccId</dt><dd>New SIM card number</dd>\n<dt>movedGroupName</dt><dd>Moved account</dd>\n<dt>subscriberAccountId</dt><dd>Old location</dd>\n<dt>destinationAccount</dt><dd>New location</dd>\n<dt>selectedDuoUiccid</dt><dd>Selected Duo SIM card number</dd>\n<dt>projectId</dt><dd>Project ID</dd>\n<dt>new_fixed_number</dt><dd>New fixed number</dd>\n<dt>new_desk_number</dt><dd>New extension</dd>\n<dt>oldUserGroupName</dt><dd>Previous user group</dd>\n<dt>newUserGroupName</dt><dd>New user group</dd>\n<dt>vpnName</dt><dd>VPN name</dd>\n<dt>deskNumber</dt><dd>Extension</dd>\n<dt>accesspointNameDeskNumber</dt><dd>Extension</dd>\n<dt>mobileAddress</dt><dd>Mobile number</dd>\n<dt>enterpriseName</dt><dd>Enterprise name</dd>\n<dt>enterpriseID</dt><dd>Enterprise ID</dd>\n<dt>mobilityGroupName</dt><dd>Fixed-Mobile PBX name</dd>\n<dt>userGroupName</dt><dd>User group</dd>\n<dt>enterpriseUserGroup</dt><dd>User group</dd>\n<dt>initialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>sipAccountName</dt><dd>SIP account name</dd>\n<dt>accessInstanceAttributeinitialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>accesspointNameQueuePhoneNumber</dt><dd>Queue phone number</dd>\n<dt>accesspointNameSipAccountName</dt><dd>SIP account name</dd>\n<dt>subscriptionAmount</dt><dd>New subscription amount</dd>\n<dt>contract_contact_name</dt><dd>Contract contact person (name)</dd>\n<dt>contract_contact_phone</dt><dd>Contract contact person (phone)</dd>\n<dt>contract_contact_mail</dt><dd>Contract contact person (mail)</dd>\n<dt>financial_contact_name</dt><dd>Financial contact person (name)</dd>\n<dt>financial_contact_phone</dt><dd>Financial contact person (phone)</dd>\n<dt>financial_contact_mail</dt><dd>Financial contact person (mail)</dd>\n<dt>technical_contact_name</dt><dd>Technical contact Person (name)</dd>\n<dt>technical_contact_phone</dt><dd>Technical contact Person (phone)</dd>\n<dt>technical_contact_mail</dt><dd>Technical contact Person (mail)</dd>\n<dt>deviceOption</dt><dd>Device option</dd>\n<dt>deviceType_label</dt><dd>Device type</dd>\n<dt>macAddress</dt><dd>Mac address</dd>\n<dt>deviceName</dt><dd>Device name</dd>\n<dt>sacGroupAccountId_label</dt><dd>Location account</dd>\n<dt>groupId</dt><dd>Location</dd>\n<dt>vGroupMovingToID</dt><dd>New location</dd>\n<dt>pbxName</dt><dd>PBX</dd>\n<dt>groupCitemId_label</dt><dd>Group</dd>\n<dt>Fixed</dt><dd>Alternate fixed number</dd>\n<dt>DeskNumber</dt><dd>Alternate extension</dd>\n<dt>billing_retention_period</dt><dd>Financial data retention period (months)</dd>\n<dt>managedGroupName</dt><dd>Authorized for</dd>\n<dt>subscriptionType</dt><dd>Subscription type</dd>\n<dt>CurrentNetworkOperator</dt><dd>Current network operator</dd>\n<dt>CurrentServiceProvider</dt><dd>Current service provider</dd>\n<dt>Customer_name_at_current_provider</dt><dd>Customer name at current provider</dd>\n<dt>Current_contract_number</dt><dd>Customer number at current provider</dd>\n<dt>UIccId</dt><dd>Current SIM card number</dd>\n<dt>Initials</dt><dd>Initials</dd>\n<dt>FamilyNamePrefix</dt><dd>Family name prefix</dd>\n<dt>FamilyName</dt><dd>Family name</dd>\n<dt>delivery_TT_id</dt><dd>Delivery Track&trace ID</dd>\n<dt>IsAppleDEP</dt><dd>Apple DEP</dd>\n<dt>IsSamsungKNOX</dt><dd>Samsung KNOX</dd>\n<dt>keepCurrentSim</dt><dd>Keep existing SIM card</dd>\n<dt>Note</dt><dd>Note</dd>\n<dt>Porting_wish_date</dt><dd>Preferred transition date</dd>\n<dt>returnReason</dt><dd>Reason for return</dd>\n<dt>returnRemarks</dt><dd>Remarks</dd>\n<dt>companyName</dt><dd>Company name</dd>\n<dt>companyNamePronounciation</dt><dd>Comapny name pronounciation</dd>\n<dt>businessVoiceMailMessageText</dt><dd>Chosen business voicemail message</dd>\n</dl>\n<div>\n<style type=\"text/css\">  dl {\n    display: flex;\n    flex-flow: row wrap;\n  }\n  dt {\n    flex-basis: 20%;\n    text-align: right;\n  }\n  dd {\n    flex-basis: 70%;\n    flex-grow: 1;\n  }\n</style>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_orders_track_and_trace</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "c85c65a5-eddf-4805-a0be-72ab742858d4",
							"name": "Service Unavailable",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/track-and-trace/service-requests/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"track-and-trace",
										"service-requests",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "49579398",
											"description": "Service request ID"
										}
									]
								},
								"description": "The possible keys of `attributes` map in response object:<div style='max-height: 400px; overflow: auto; width: 100%'>\n<dl>\n<dt><b>Attribute name</b></dt><dd><b>Meaning</b></dd>\n<dt>login</dt><dd>Login</dd>\n<dt>roles</dt><dd>Roles</dd>\n<dt>firstName</dt><dd>First name</dd>\n<dt>lastName</dt><dd>Last name</dd>\n<dt>surnamePrefix</dt><dd>Surname prefix</dd>\n<dt>email</dt><dd>E-mail</dd>\n<dt>dateOfBirth</dt><dd>Date of birth</dd>\n<dt>vip</dt><dd>VIP</dd>\n<dt>employeeNumber</dt><dd>Employee number</dd>\n<dt>gender</dt><dd>Gender</dd>\n<dt>salutation</dt><dd>Salutation</dd>\n<dt>preferredLanguage</dt><dd>Preferred language</dd>\n<dt>comments</dt><dd>Comments</dd>\n<dt>accesspointNameMSISDN</dt><dd>Mobile number</dd>\n<dt>accesspointNameSIM</dt><dd>SIM card number</dd>\n<dt>accesspointNameIMSI</dt><dd>IMSI</dd>\n<dt>IMEI</dt><dd>IMEI</dd>\n<dt>Hanset_IMEI_number</dt><dd>IMEI</dd>\n<dt>accesspointNameFixedNumber</dt><dd>Fixed Number</dd>\n<dt>activeTo</dt><dd>Active to</dd>\n<dt>contractName</dt><dd>Subscription or device name</dd>\n<dt>totalOnetimePrice</dt><dd>One time price</dd>\n<dt>totalRecurrentPrice</dt><dd>Recurring price</dd>\n<dt>deferredPrice</dt><dd>Deferred price</dd>\n<dt>newUiccId</dt><dd>New SIM card number</dd>\n<dt>movedGroupName</dt><dd>Moved account</dd>\n<dt>subscriberAccountId</dt><dd>Old location</dd>\n<dt>destinationAccount</dt><dd>New location</dd>\n<dt>selectedDuoUiccid</dt><dd>Selected Duo SIM card number</dd>\n<dt>projectId</dt><dd>Project ID</dd>\n<dt>new_fixed_number</dt><dd>New fixed number</dd>\n<dt>new_desk_number</dt><dd>New extension</dd>\n<dt>oldUserGroupName</dt><dd>Previous user group</dd>\n<dt>newUserGroupName</dt><dd>New user group</dd>\n<dt>vpnName</dt><dd>VPN name</dd>\n<dt>deskNumber</dt><dd>Extension</dd>\n<dt>accesspointNameDeskNumber</dt><dd>Extension</dd>\n<dt>mobileAddress</dt><dd>Mobile number</dd>\n<dt>enterpriseName</dt><dd>Enterprise name</dd>\n<dt>enterpriseID</dt><dd>Enterprise ID</dd>\n<dt>mobilityGroupName</dt><dd>Fixed-Mobile PBX name</dd>\n<dt>userGroupName</dt><dd>User group</dd>\n<dt>enterpriseUserGroup</dt><dd>User group</dd>\n<dt>initialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>sipAccountName</dt><dd>SIP account name</dd>\n<dt>accessInstanceAttributeinitialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>accesspointNameQueuePhoneNumber</dt><dd>Queue phone number</dd>\n<dt>accesspointNameSipAccountName</dt><dd>SIP account name</dd>\n<dt>subscriptionAmount</dt><dd>New subscription amount</dd>\n<dt>contract_contact_name</dt><dd>Contract contact person (name)</dd>\n<dt>contract_contact_phone</dt><dd>Contract contact person (phone)</dd>\n<dt>contract_contact_mail</dt><dd>Contract contact person (mail)</dd>\n<dt>financial_contact_name</dt><dd>Financial contact person (name)</dd>\n<dt>financial_contact_phone</dt><dd>Financial contact person (phone)</dd>\n<dt>financial_contact_mail</dt><dd>Financial contact person (mail)</dd>\n<dt>technical_contact_name</dt><dd>Technical contact Person (name)</dd>\n<dt>technical_contact_phone</dt><dd>Technical contact Person (phone)</dd>\n<dt>technical_contact_mail</dt><dd>Technical contact Person (mail)</dd>\n<dt>deviceOption</dt><dd>Device option</dd>\n<dt>deviceType_label</dt><dd>Device type</dd>\n<dt>macAddress</dt><dd>Mac address</dd>\n<dt>deviceName</dt><dd>Device name</dd>\n<dt>sacGroupAccountId_label</dt><dd>Location account</dd>\n<dt>groupId</dt><dd>Location</dd>\n<dt>vGroupMovingToID</dt><dd>New location</dd>\n<dt>pbxName</dt><dd>PBX</dd>\n<dt>groupCitemId_label</dt><dd>Group</dd>\n<dt>Fixed</dt><dd>Alternate fixed number</dd>\n<dt>DeskNumber</dt><dd>Alternate extension</dd>\n<dt>billing_retention_period</dt><dd>Financial data retention period (months)</dd>\n<dt>managedGroupName</dt><dd>Authorized for</dd>\n<dt>subscriptionType</dt><dd>Subscription type</dd>\n<dt>CurrentNetworkOperator</dt><dd>Current network operator</dd>\n<dt>CurrentServiceProvider</dt><dd>Current service provider</dd>\n<dt>Customer_name_at_current_provider</dt><dd>Customer name at current provider</dd>\n<dt>Current_contract_number</dt><dd>Customer number at current provider</dd>\n<dt>UIccId</dt><dd>Current SIM card number</dd>\n<dt>Initials</dt><dd>Initials</dd>\n<dt>FamilyNamePrefix</dt><dd>Family name prefix</dd>\n<dt>FamilyName</dt><dd>Family name</dd>\n<dt>delivery_TT_id</dt><dd>Delivery Track&trace ID</dd>\n<dt>IsAppleDEP</dt><dd>Apple DEP</dd>\n<dt>IsSamsungKNOX</dt><dd>Samsung KNOX</dd>\n<dt>keepCurrentSim</dt><dd>Keep existing SIM card</dd>\n<dt>Note</dt><dd>Note</dd>\n<dt>Porting_wish_date</dt><dd>Preferred transition date</dd>\n<dt>returnReason</dt><dd>Reason for return</dd>\n<dt>returnRemarks</dt><dd>Remarks</dd>\n<dt>companyName</dt><dd>Company name</dd>\n<dt>companyNamePronounciation</dt><dd>Comapny name pronounciation</dd>\n<dt>businessVoiceMailMessageText</dt><dd>Chosen business voicemail message</dd>\n</dl>\n<div>\n<style type=\"text/css\">  dl {\n    display: flex;\n    flex-flow: row wrap;\n  }\n  dt {\n    flex-basis: 20%;\n    text-align: right;\n  }\n  dd {\n    flex-basis: 70%;\n    flex-grow: 1;\n  }\n</style>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_orders_track_and_trace</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			],
			"id": "66aed424-476f-48bf-a352-39d230b3ecf3",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "1d721ca2-3f25-46b1-8e71-cb1ca109a0c0",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "ae4cf928-7c2f-4753-aa64-f417bc97c92a",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "09- Port Number Out",
			"item": [
				{
					"name": "1- Get all contracts",
					"id": "5cbb96d5-c7f8-40fa-a8ce-bde8d4167538",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"description": "Content-Language",
								"key": "Content-Language",
								"value": "EN"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/contract/all?category=MOBILE",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"contract",
								"all"
							],
							"query": [
								{
									"key": "category",
									"value": "MOBILE"
								}
							]
						},
						"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li></ul>"
					},
					"response": [
						{
							"id": "0074e048-78db-44b1-89a4-13b7a910e51e",
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Content-Language",
										"key": "Content-Language",
										"value": "EN"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contract/all?category=MOBILE",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contract",
										"all"
									],
									"query": [
										{
											"key": "category",
											"value": "MOBILE"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li></ul>"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "237df901-3df9-46e7-b4f3-4abdfc4d2fab",
							"name": "Bad Request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Content-Language",
										"key": "Content-Language",
										"value": "EN"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contract/all?category=MOBILE",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contract",
										"all"
									],
									"query": [
										{
											"key": "category",
											"value": "MOBILE"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li></ul>"
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "2a906868-ea5a-4bc3-a4f4-f66a2dbe8043",
							"name": "Unauthorized",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Content-Language",
										"key": "Content-Language",
										"value": "EN"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contract/all?category=MOBILE",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contract",
										"all"
									],
									"query": [
										{
											"key": "category",
											"value": "MOBILE"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li></ul>"
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "f6fa6f83-be9d-47b1-9311-ae5720d0acf0",
							"name": "Forbidden",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Content-Language",
										"key": "Content-Language",
										"value": "EN"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contract/all?category=MOBILE",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contract",
										"all"
									],
									"query": [
										{
											"key": "category",
											"value": "MOBILE"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li></ul>"
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "44c88a66-1e97-430c-a08b-fdd92cb0ec41",
							"name": "Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Content-Language",
										"key": "Content-Language",
										"value": "EN"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contract/all?category=MOBILE",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contract",
										"all"
									],
									"query": [
										{
											"key": "category",
											"value": "MOBILE"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li></ul>"
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "b8152d7b-406e-4c2a-bab9-7f2739301d01",
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Content-Language",
										"key": "Content-Language",
										"value": "EN"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contract/all?category=MOBILE",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contract",
										"all"
									],
									"query": [
										{
											"key": "category",
											"value": "MOBILE"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li></ul>"
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "282cf8f4-e3d9-4731-836c-17114dccfad5",
							"name": "Server Error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Content-Language",
										"key": "Content-Language",
										"value": "EN"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contract/all?category=MOBILE",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contract",
										"all"
									],
									"query": [
										{
											"key": "category",
											"value": "MOBILE"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li></ul>"
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "305c46db-95fe-42ab-974b-3e2384507b07",
							"name": "Service Unavailable",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Content-Language",
										"key": "Content-Language",
										"value": "EN"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contract/all?category=MOBILE",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contract",
										"all"
									],
									"query": [
										{
											"key": "category",
											"value": "MOBILE"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li></ul>"
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "2- Get information about operations available for given contract.",
					"id": "18641b09-07a6-4e0c-8452-92e2a6a2bfc7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/order/operations?contractId=1283615806",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"order",
								"operations"
							],
							"query": [
								{
									"key": "contractId",
									"value": "1283615806"
								}
							]
						},
						"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
					},
					"response": [
						{
							"id": "daecc4cf-88fc-4a96-af8e-a271b7b52fbd",
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/order/operations?contractId=1283615806",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"order",
										"operations"
									],
									"query": [
										{
											"key": "contractId",
											"value": "1283615806"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "39bd4e44-159d-42ab-a1af-f090aee4faa8",
							"name": "Bad Request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/order/operations?contractId=1283615806",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"order",
										"operations"
									],
									"query": [
										{
											"key": "contractId",
											"value": "1283615806"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "997ecd77-f670-4123-9c40-0bdc052b02cd",
							"name": "Unauthorized",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/order/operations?contractId=1283615806",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"order",
										"operations"
									],
									"query": [
										{
											"key": "contractId",
											"value": "1283615806"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "c26249d5-aa23-45fe-a13b-b36fa0d83fef",
							"name": "Forbidden",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/order/operations?contractId=1283615806",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"order",
										"operations"
									],
									"query": [
										{
											"key": "contractId",
											"value": "1283615806"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "04fe8724-f145-4beb-a7de-a9856f8c88e3",
							"name": "Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/order/operations?contractId=1283615806",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"order",
										"operations"
									],
									"query": [
										{
											"key": "contractId",
											"value": "1283615806"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "31aa1245-3e7a-4af8-8403-2bfabc26e916",
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/order/operations?contractId=1283615806",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"order",
										"operations"
									],
									"query": [
										{
											"key": "contractId",
											"value": "1283615806"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "f6480a3b-ffc6-483d-b4a0-2671d95c39c5",
							"name": "Server Error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/order/operations?contractId=1283615806",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"order",
										"operations"
									],
									"query": [
										{
											"key": "contractId",
											"value": "1283615806"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "6c4845a9-0221-4405-b85f-50d9fc8465fa",
							"name": "Service Unavailable",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/order/operations?contractId=1283615806",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"order",
										"operations"
									],
									"query": [
										{
											"key": "contractId",
											"value": "1283615806"
										}
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "3- Port out contract",
					"id": "e4bcca4a-6240-41d0-9fb2-25442c069767",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"contractId\": 1283616746,\n    \"referenceNumber\": \"dolor minim pariatur quis\",\n    \"wishDate\": \"2022-10-15T07:50:49.217Z\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/order/porting-out",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"order",
								"porting-out"
							]
						},
						"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
					},
					"response": [
						{
							"id": "7fff6ad4-96a4-4a50-99d6-593f73de2ee5",
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"contractId\": 1283616746,\n    \"referenceNumber\": \"dolor minim pariatur quis\",\n    \"wishDate\": \"2022-10-15T07:50:49.217Z\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/order/porting-out",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"order",
										"porting-out"
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "3be4d09a-b51c-49d4-a23a-65d03c48aedd",
							"name": "Bad Request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"contractId\": 1283616746,\n    \"referenceNumber\": \"dolor minim pariatur quis\",\n    \"wishDate\": \"2022-10-15T07:50:49.217Z\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/order/porting-out",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"order",
										"porting-out"
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "ba4d07ea-1171-4442-8891-d1ba3b204a4c",
							"name": "Unauthorized",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"contractId\": 1283616746,\n    \"referenceNumber\": \"dolor minim pariatur quis\",\n    \"wishDate\": \"2022-10-15T07:50:49.217Z\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/order/porting-out",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"order",
										"porting-out"
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "59666af7-3f90-4cdc-b196-e9819e07586c",
							"name": "Forbidden",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"contractId\": 1283616746,\n    \"referenceNumber\": \"dolor minim pariatur quis\",\n    \"wishDate\": \"2022-10-15T07:50:49.217Z\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/order/porting-out",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"order",
										"porting-out"
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "87da4f1d-5459-483f-aa19-8b70514bb985",
							"name": "Not Found",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"contractId\": 1283616746,\n    \"referenceNumber\": \"dolor minim pariatur quis\",\n    \"wishDate\": \"2022-10-15T07:50:49.217Z\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/order/porting-out",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"order",
										"porting-out"
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "22223a50-8a90-4ad8-ad74-393476e0a741",
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"contractId\": 1283616746,\n    \"referenceNumber\": \"dolor minim pariatur quis\",\n    \"wishDate\": \"2022-10-15T07:50:49.217Z\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/order/porting-out",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"order",
										"porting-out"
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "5b2bc399-f8b2-4df3-b544-08268235e0c2",
							"name": "Server Error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"contractId\": 1283616746,\n    \"referenceNumber\": \"dolor minim pariatur quis\",\n    \"wishDate\": \"2022-10-15T07:50:49.217Z\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/order/porting-out",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"order",
										"porting-out"
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "ed913fd4-2ab8-46d3-96b5-6478e6dda1e3",
							"name": "Service Unavailable",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"contractId\": 1283616746,\n    \"referenceNumber\": \"dolor minim pariatur quis\",\n    \"wishDate\": \"2022-10-15T07:50:49.217Z\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/order/porting-out",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"order",
										"porting-out"
									]
								},
								"description": "<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "4- Get service requests details",
					"id": "c3acd12f-4290-414f-bb7c-01424c140ec2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/track-and-trace/service-requests/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"track-and-trace",
								"service-requests",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "49579418",
									"description": "Service request ID"
								}
							]
						},
						"description": "The possible keys of `attributes` map in response object:<div style='max-height: 400px; overflow: auto; width: 100%'>\n<dl>\n<dt><b>Attribute name</b></dt><dd><b>Meaning</b></dd>\n<dt>login</dt><dd>Login</dd>\n<dt>roles</dt><dd>Roles</dd>\n<dt>firstName</dt><dd>First name</dd>\n<dt>lastName</dt><dd>Last name</dd>\n<dt>surnamePrefix</dt><dd>Surname prefix</dd>\n<dt>email</dt><dd>E-mail</dd>\n<dt>dateOfBirth</dt><dd>Date of birth</dd>\n<dt>vip</dt><dd>VIP</dd>\n<dt>employeeNumber</dt><dd>Employee number</dd>\n<dt>gender</dt><dd>Gender</dd>\n<dt>salutation</dt><dd>Salutation</dd>\n<dt>preferredLanguage</dt><dd>Preferred language</dd>\n<dt>comments</dt><dd>Comments</dd>\n<dt>accesspointNameMSISDN</dt><dd>Mobile number</dd>\n<dt>accesspointNameSIM</dt><dd>SIM card number</dd>\n<dt>accesspointNameIMSI</dt><dd>IMSI</dd>\n<dt>IMEI</dt><dd>IMEI</dd>\n<dt>Hanset_IMEI_number</dt><dd>IMEI</dd>\n<dt>accesspointNameFixedNumber</dt><dd>Fixed Number</dd>\n<dt>activeTo</dt><dd>Active to</dd>\n<dt>contractName</dt><dd>Subscription or device name</dd>\n<dt>totalOnetimePrice</dt><dd>One time price</dd>\n<dt>totalRecurrentPrice</dt><dd>Recurring price</dd>\n<dt>deferredPrice</dt><dd>Deferred price</dd>\n<dt>newUiccId</dt><dd>New SIM card number</dd>\n<dt>movedGroupName</dt><dd>Moved account</dd>\n<dt>subscriberAccountId</dt><dd>Old location</dd>\n<dt>destinationAccount</dt><dd>New location</dd>\n<dt>selectedDuoUiccid</dt><dd>Selected Duo SIM card number</dd>\n<dt>projectId</dt><dd>Project ID</dd>\n<dt>new_fixed_number</dt><dd>New fixed number</dd>\n<dt>new_desk_number</dt><dd>New extension</dd>\n<dt>oldUserGroupName</dt><dd>Previous user group</dd>\n<dt>newUserGroupName</dt><dd>New user group</dd>\n<dt>vpnName</dt><dd>VPN name</dd>\n<dt>deskNumber</dt><dd>Extension</dd>\n<dt>accesspointNameDeskNumber</dt><dd>Extension</dd>\n<dt>mobileAddress</dt><dd>Mobile number</dd>\n<dt>enterpriseName</dt><dd>Enterprise name</dd>\n<dt>enterpriseID</dt><dd>Enterprise ID</dd>\n<dt>mobilityGroupName</dt><dd>Fixed-Mobile PBX name</dd>\n<dt>userGroupName</dt><dd>User group</dd>\n<dt>enterpriseUserGroup</dt><dd>User group</dd>\n<dt>initialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>sipAccountName</dt><dd>SIP account name</dd>\n<dt>accessInstanceAttributeinitialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>accesspointNameQueuePhoneNumber</dt><dd>Queue phone number</dd>\n<dt>accesspointNameSipAccountName</dt><dd>SIP account name</dd>\n<dt>subscriptionAmount</dt><dd>New subscription amount</dd>\n<dt>contract_contact_name</dt><dd>Contract contact person (name)</dd>\n<dt>contract_contact_phone</dt><dd>Contract contact person (phone)</dd>\n<dt>contract_contact_mail</dt><dd>Contract contact person (mail)</dd>\n<dt>financial_contact_name</dt><dd>Financial contact person (name)</dd>\n<dt>financial_contact_phone</dt><dd>Financial contact person (phone)</dd>\n<dt>financial_contact_mail</dt><dd>Financial contact person (mail)</dd>\n<dt>technical_contact_name</dt><dd>Technical contact Person (name)</dd>\n<dt>technical_contact_phone</dt><dd>Technical contact Person (phone)</dd>\n<dt>technical_contact_mail</dt><dd>Technical contact Person (mail)</dd>\n<dt>deviceOption</dt><dd>Device option</dd>\n<dt>deviceType_label</dt><dd>Device type</dd>\n<dt>macAddress</dt><dd>Mac address</dd>\n<dt>deviceName</dt><dd>Device name</dd>\n<dt>sacGroupAccountId_label</dt><dd>Location account</dd>\n<dt>groupId</dt><dd>Location</dd>\n<dt>vGroupMovingToID</dt><dd>New location</dd>\n<dt>pbxName</dt><dd>PBX</dd>\n<dt>groupCitemId_label</dt><dd>Group</dd>\n<dt>Fixed</dt><dd>Alternate fixed number</dd>\n<dt>DeskNumber</dt><dd>Alternate extension</dd>\n<dt>billing_retention_period</dt><dd>Financial data retention period (months)</dd>\n<dt>managedGroupName</dt><dd>Authorized for</dd>\n<dt>subscriptionType</dt><dd>Subscription type</dd>\n<dt>CurrentNetworkOperator</dt><dd>Current network operator</dd>\n<dt>CurrentServiceProvider</dt><dd>Current service provider</dd>\n<dt>Customer_name_at_current_provider</dt><dd>Customer name at current provider</dd>\n<dt>Current_contract_number</dt><dd>Customer number at current provider</dd>\n<dt>UIccId</dt><dd>Current SIM card number</dd>\n<dt>Initials</dt><dd>Initials</dd>\n<dt>FamilyNamePrefix</dt><dd>Family name prefix</dd>\n<dt>FamilyName</dt><dd>Family name</dd>\n<dt>delivery_TT_id</dt><dd>Delivery Track&trace ID</dd>\n<dt>IsAppleDEP</dt><dd>Apple DEP</dd>\n<dt>IsSamsungKNOX</dt><dd>Samsung KNOX</dd>\n<dt>keepCurrentSim</dt><dd>Keep existing SIM card</dd>\n<dt>Note</dt><dd>Note</dd>\n<dt>Porting_wish_date</dt><dd>Preferred transition date</dd>\n<dt>returnReason</dt><dd>Reason for return</dd>\n<dt>returnRemarks</dt><dd>Remarks</dd>\n<dt>companyName</dt><dd>Company name</dd>\n<dt>companyNamePronounciation</dt><dd>Comapny name pronounciation</dd>\n<dt>businessVoiceMailMessageText</dt><dd>Chosen business voicemail message</dd>\n</dl>\n<div>\n<style type=\"text/css\">  dl {\n    display: flex;\n    flex-flow: row wrap;\n  }\n  dt {\n    flex-basis: 20%;\n    text-align: right;\n  }\n  dd {\n    flex-basis: 70%;\n    flex-grow: 1;\n  }\n</style>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_orders_track_and_trace</li><li>privileges_orders_authorization</li></ul>"
					},
					"response": [
						{
							"id": "333d0d3c-cd7a-4d85-8c54-6876992737be",
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/track-and-trace/service-requests/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"track-and-trace",
										"service-requests",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "49579418",
											"description": "Service request ID"
										}
									]
								},
								"description": "The possible keys of `attributes` map in response object:<div style='max-height: 400px; overflow: auto; width: 100%'>\n<dl>\n<dt><b>Attribute name</b></dt><dd><b>Meaning</b></dd>\n<dt>login</dt><dd>Login</dd>\n<dt>roles</dt><dd>Roles</dd>\n<dt>firstName</dt><dd>First name</dd>\n<dt>lastName</dt><dd>Last name</dd>\n<dt>surnamePrefix</dt><dd>Surname prefix</dd>\n<dt>email</dt><dd>E-mail</dd>\n<dt>dateOfBirth</dt><dd>Date of birth</dd>\n<dt>vip</dt><dd>VIP</dd>\n<dt>employeeNumber</dt><dd>Employee number</dd>\n<dt>gender</dt><dd>Gender</dd>\n<dt>salutation</dt><dd>Salutation</dd>\n<dt>preferredLanguage</dt><dd>Preferred language</dd>\n<dt>comments</dt><dd>Comments</dd>\n<dt>accesspointNameMSISDN</dt><dd>Mobile number</dd>\n<dt>accesspointNameSIM</dt><dd>SIM card number</dd>\n<dt>accesspointNameIMSI</dt><dd>IMSI</dd>\n<dt>IMEI</dt><dd>IMEI</dd>\n<dt>Hanset_IMEI_number</dt><dd>IMEI</dd>\n<dt>accesspointNameFixedNumber</dt><dd>Fixed Number</dd>\n<dt>activeTo</dt><dd>Active to</dd>\n<dt>contractName</dt><dd>Subscription or device name</dd>\n<dt>totalOnetimePrice</dt><dd>One time price</dd>\n<dt>totalRecurrentPrice</dt><dd>Recurring price</dd>\n<dt>deferredPrice</dt><dd>Deferred price</dd>\n<dt>newUiccId</dt><dd>New SIM card number</dd>\n<dt>movedGroupName</dt><dd>Moved account</dd>\n<dt>subscriberAccountId</dt><dd>Old location</dd>\n<dt>destinationAccount</dt><dd>New location</dd>\n<dt>selectedDuoUiccid</dt><dd>Selected Duo SIM card number</dd>\n<dt>projectId</dt><dd>Project ID</dd>\n<dt>new_fixed_number</dt><dd>New fixed number</dd>\n<dt>new_desk_number</dt><dd>New extension</dd>\n<dt>oldUserGroupName</dt><dd>Previous user group</dd>\n<dt>newUserGroupName</dt><dd>New user group</dd>\n<dt>vpnName</dt><dd>VPN name</dd>\n<dt>deskNumber</dt><dd>Extension</dd>\n<dt>accesspointNameDeskNumber</dt><dd>Extension</dd>\n<dt>mobileAddress</dt><dd>Mobile number</dd>\n<dt>enterpriseName</dt><dd>Enterprise name</dd>\n<dt>enterpriseID</dt><dd>Enterprise ID</dd>\n<dt>mobilityGroupName</dt><dd>Fixed-Mobile PBX name</dd>\n<dt>userGroupName</dt><dd>User group</dd>\n<dt>enterpriseUserGroup</dt><dd>User group</dd>\n<dt>initialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>sipAccountName</dt><dd>SIP account name</dd>\n<dt>accessInstanceAttributeinitialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>accesspointNameQueuePhoneNumber</dt><dd>Queue phone number</dd>\n<dt>accesspointNameSipAccountName</dt><dd>SIP account name</dd>\n<dt>subscriptionAmount</dt><dd>New subscription amount</dd>\n<dt>contract_contact_name</dt><dd>Contract contact person (name)</dd>\n<dt>contract_contact_phone</dt><dd>Contract contact person (phone)</dd>\n<dt>contract_contact_mail</dt><dd>Contract contact person (mail)</dd>\n<dt>financial_contact_name</dt><dd>Financial contact person (name)</dd>\n<dt>financial_contact_phone</dt><dd>Financial contact person (phone)</dd>\n<dt>financial_contact_mail</dt><dd>Financial contact person (mail)</dd>\n<dt>technical_contact_name</dt><dd>Technical contact Person (name)</dd>\n<dt>technical_contact_phone</dt><dd>Technical contact Person (phone)</dd>\n<dt>technical_contact_mail</dt><dd>Technical contact Person (mail)</dd>\n<dt>deviceOption</dt><dd>Device option</dd>\n<dt>deviceType_label</dt><dd>Device type</dd>\n<dt>macAddress</dt><dd>Mac address</dd>\n<dt>deviceName</dt><dd>Device name</dd>\n<dt>sacGroupAccountId_label</dt><dd>Location account</dd>\n<dt>groupId</dt><dd>Location</dd>\n<dt>vGroupMovingToID</dt><dd>New location</dd>\n<dt>pbxName</dt><dd>PBX</dd>\n<dt>groupCitemId_label</dt><dd>Group</dd>\n<dt>Fixed</dt><dd>Alternate fixed number</dd>\n<dt>DeskNumber</dt><dd>Alternate extension</dd>\n<dt>billing_retention_period</dt><dd>Financial data retention period (months)</dd>\n<dt>managedGroupName</dt><dd>Authorized for</dd>\n<dt>subscriptionType</dt><dd>Subscription type</dd>\n<dt>CurrentNetworkOperator</dt><dd>Current network operator</dd>\n<dt>CurrentServiceProvider</dt><dd>Current service provider</dd>\n<dt>Customer_name_at_current_provider</dt><dd>Customer name at current provider</dd>\n<dt>Current_contract_number</dt><dd>Customer number at current provider</dd>\n<dt>UIccId</dt><dd>Current SIM card number</dd>\n<dt>Initials</dt><dd>Initials</dd>\n<dt>FamilyNamePrefix</dt><dd>Family name prefix</dd>\n<dt>FamilyName</dt><dd>Family name</dd>\n<dt>delivery_TT_id</dt><dd>Delivery Track&trace ID</dd>\n<dt>IsAppleDEP</dt><dd>Apple DEP</dd>\n<dt>IsSamsungKNOX</dt><dd>Samsung KNOX</dd>\n<dt>keepCurrentSim</dt><dd>Keep existing SIM card</dd>\n<dt>Note</dt><dd>Note</dd>\n<dt>Porting_wish_date</dt><dd>Preferred transition date</dd>\n<dt>returnReason</dt><dd>Reason for return</dd>\n<dt>returnRemarks</dt><dd>Remarks</dd>\n<dt>companyName</dt><dd>Company name</dd>\n<dt>companyNamePronounciation</dt><dd>Comapny name pronounciation</dd>\n<dt>businessVoiceMailMessageText</dt><dd>Chosen business voicemail message</dd>\n</dl>\n<div>\n<style type=\"text/css\">  dl {\n    display: flex;\n    flex-flow: row wrap;\n  }\n  dt {\n    flex-basis: 20%;\n    text-align: right;\n  }\n  dd {\n    flex-basis: 70%;\n    flex-grow: 1;\n  }\n</style>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_orders_track_and_trace</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "3b568fd3-bd7d-43e8-97ca-c4b5d0df686b",
							"name": "Bad Request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/track-and-trace/service-requests/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"track-and-trace",
										"service-requests",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "49579418",
											"description": "Service request ID"
										}
									]
								},
								"description": "The possible keys of `attributes` map in response object:<div style='max-height: 400px; overflow: auto; width: 100%'>\n<dl>\n<dt><b>Attribute name</b></dt><dd><b>Meaning</b></dd>\n<dt>login</dt><dd>Login</dd>\n<dt>roles</dt><dd>Roles</dd>\n<dt>firstName</dt><dd>First name</dd>\n<dt>lastName</dt><dd>Last name</dd>\n<dt>surnamePrefix</dt><dd>Surname prefix</dd>\n<dt>email</dt><dd>E-mail</dd>\n<dt>dateOfBirth</dt><dd>Date of birth</dd>\n<dt>vip</dt><dd>VIP</dd>\n<dt>employeeNumber</dt><dd>Employee number</dd>\n<dt>gender</dt><dd>Gender</dd>\n<dt>salutation</dt><dd>Salutation</dd>\n<dt>preferredLanguage</dt><dd>Preferred language</dd>\n<dt>comments</dt><dd>Comments</dd>\n<dt>accesspointNameMSISDN</dt><dd>Mobile number</dd>\n<dt>accesspointNameSIM</dt><dd>SIM card number</dd>\n<dt>accesspointNameIMSI</dt><dd>IMSI</dd>\n<dt>IMEI</dt><dd>IMEI</dd>\n<dt>Hanset_IMEI_number</dt><dd>IMEI</dd>\n<dt>accesspointNameFixedNumber</dt><dd>Fixed Number</dd>\n<dt>activeTo</dt><dd>Active to</dd>\n<dt>contractName</dt><dd>Subscription or device name</dd>\n<dt>totalOnetimePrice</dt><dd>One time price</dd>\n<dt>totalRecurrentPrice</dt><dd>Recurring price</dd>\n<dt>deferredPrice</dt><dd>Deferred price</dd>\n<dt>newUiccId</dt><dd>New SIM card number</dd>\n<dt>movedGroupName</dt><dd>Moved account</dd>\n<dt>subscriberAccountId</dt><dd>Old location</dd>\n<dt>destinationAccount</dt><dd>New location</dd>\n<dt>selectedDuoUiccid</dt><dd>Selected Duo SIM card number</dd>\n<dt>projectId</dt><dd>Project ID</dd>\n<dt>new_fixed_number</dt><dd>New fixed number</dd>\n<dt>new_desk_number</dt><dd>New extension</dd>\n<dt>oldUserGroupName</dt><dd>Previous user group</dd>\n<dt>newUserGroupName</dt><dd>New user group</dd>\n<dt>vpnName</dt><dd>VPN name</dd>\n<dt>deskNumber</dt><dd>Extension</dd>\n<dt>accesspointNameDeskNumber</dt><dd>Extension</dd>\n<dt>mobileAddress</dt><dd>Mobile number</dd>\n<dt>enterpriseName</dt><dd>Enterprise name</dd>\n<dt>enterpriseID</dt><dd>Enterprise ID</dd>\n<dt>mobilityGroupName</dt><dd>Fixed-Mobile PBX name</dd>\n<dt>userGroupName</dt><dd>User group</dd>\n<dt>enterpriseUserGroup</dt><dd>User group</dd>\n<dt>initialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>sipAccountName</dt><dd>SIP account name</dd>\n<dt>accessInstanceAttributeinitialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>accesspointNameQueuePhoneNumber</dt><dd>Queue phone number</dd>\n<dt>accesspointNameSipAccountName</dt><dd>SIP account name</dd>\n<dt>subscriptionAmount</dt><dd>New subscription amount</dd>\n<dt>contract_contact_name</dt><dd>Contract contact person (name)</dd>\n<dt>contract_contact_phone</dt><dd>Contract contact person (phone)</dd>\n<dt>contract_contact_mail</dt><dd>Contract contact person (mail)</dd>\n<dt>financial_contact_name</dt><dd>Financial contact person (name)</dd>\n<dt>financial_contact_phone</dt><dd>Financial contact person (phone)</dd>\n<dt>financial_contact_mail</dt><dd>Financial contact person (mail)</dd>\n<dt>technical_contact_name</dt><dd>Technical contact Person (name)</dd>\n<dt>technical_contact_phone</dt><dd>Technical contact Person (phone)</dd>\n<dt>technical_contact_mail</dt><dd>Technical contact Person (mail)</dd>\n<dt>deviceOption</dt><dd>Device option</dd>\n<dt>deviceType_label</dt><dd>Device type</dd>\n<dt>macAddress</dt><dd>Mac address</dd>\n<dt>deviceName</dt><dd>Device name</dd>\n<dt>sacGroupAccountId_label</dt><dd>Location account</dd>\n<dt>groupId</dt><dd>Location</dd>\n<dt>vGroupMovingToID</dt><dd>New location</dd>\n<dt>pbxName</dt><dd>PBX</dd>\n<dt>groupCitemId_label</dt><dd>Group</dd>\n<dt>Fixed</dt><dd>Alternate fixed number</dd>\n<dt>DeskNumber</dt><dd>Alternate extension</dd>\n<dt>billing_retention_period</dt><dd>Financial data retention period (months)</dd>\n<dt>managedGroupName</dt><dd>Authorized for</dd>\n<dt>subscriptionType</dt><dd>Subscription type</dd>\n<dt>CurrentNetworkOperator</dt><dd>Current network operator</dd>\n<dt>CurrentServiceProvider</dt><dd>Current service provider</dd>\n<dt>Customer_name_at_current_provider</dt><dd>Customer name at current provider</dd>\n<dt>Current_contract_number</dt><dd>Customer number at current provider</dd>\n<dt>UIccId</dt><dd>Current SIM card number</dd>\n<dt>Initials</dt><dd>Initials</dd>\n<dt>FamilyNamePrefix</dt><dd>Family name prefix</dd>\n<dt>FamilyName</dt><dd>Family name</dd>\n<dt>delivery_TT_id</dt><dd>Delivery Track&trace ID</dd>\n<dt>IsAppleDEP</dt><dd>Apple DEP</dd>\n<dt>IsSamsungKNOX</dt><dd>Samsung KNOX</dd>\n<dt>keepCurrentSim</dt><dd>Keep existing SIM card</dd>\n<dt>Note</dt><dd>Note</dd>\n<dt>Porting_wish_date</dt><dd>Preferred transition date</dd>\n<dt>returnReason</dt><dd>Reason for return</dd>\n<dt>returnRemarks</dt><dd>Remarks</dd>\n<dt>companyName</dt><dd>Company name</dd>\n<dt>companyNamePronounciation</dt><dd>Comapny name pronounciation</dd>\n<dt>businessVoiceMailMessageText</dt><dd>Chosen business voicemail message</dd>\n</dl>\n<div>\n<style type=\"text/css\">  dl {\n    display: flex;\n    flex-flow: row wrap;\n  }\n  dt {\n    flex-basis: 20%;\n    text-align: right;\n  }\n  dd {\n    flex-basis: 70%;\n    flex-grow: 1;\n  }\n</style>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_orders_track_and_trace</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "8ecd5158-ccf4-4618-a74f-f6f363aeaa77",
							"name": "Unauthorized",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/track-and-trace/service-requests/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"track-and-trace",
										"service-requests",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "49579418",
											"description": "Service request ID"
										}
									]
								},
								"description": "The possible keys of `attributes` map in response object:<div style='max-height: 400px; overflow: auto; width: 100%'>\n<dl>\n<dt><b>Attribute name</b></dt><dd><b>Meaning</b></dd>\n<dt>login</dt><dd>Login</dd>\n<dt>roles</dt><dd>Roles</dd>\n<dt>firstName</dt><dd>First name</dd>\n<dt>lastName</dt><dd>Last name</dd>\n<dt>surnamePrefix</dt><dd>Surname prefix</dd>\n<dt>email</dt><dd>E-mail</dd>\n<dt>dateOfBirth</dt><dd>Date of birth</dd>\n<dt>vip</dt><dd>VIP</dd>\n<dt>employeeNumber</dt><dd>Employee number</dd>\n<dt>gender</dt><dd>Gender</dd>\n<dt>salutation</dt><dd>Salutation</dd>\n<dt>preferredLanguage</dt><dd>Preferred language</dd>\n<dt>comments</dt><dd>Comments</dd>\n<dt>accesspointNameMSISDN</dt><dd>Mobile number</dd>\n<dt>accesspointNameSIM</dt><dd>SIM card number</dd>\n<dt>accesspointNameIMSI</dt><dd>IMSI</dd>\n<dt>IMEI</dt><dd>IMEI</dd>\n<dt>Hanset_IMEI_number</dt><dd>IMEI</dd>\n<dt>accesspointNameFixedNumber</dt><dd>Fixed Number</dd>\n<dt>activeTo</dt><dd>Active to</dd>\n<dt>contractName</dt><dd>Subscription or device name</dd>\n<dt>totalOnetimePrice</dt><dd>One time price</dd>\n<dt>totalRecurrentPrice</dt><dd>Recurring price</dd>\n<dt>deferredPrice</dt><dd>Deferred price</dd>\n<dt>newUiccId</dt><dd>New SIM card number</dd>\n<dt>movedGroupName</dt><dd>Moved account</dd>\n<dt>subscriberAccountId</dt><dd>Old location</dd>\n<dt>destinationAccount</dt><dd>New location</dd>\n<dt>selectedDuoUiccid</dt><dd>Selected Duo SIM card number</dd>\n<dt>projectId</dt><dd>Project ID</dd>\n<dt>new_fixed_number</dt><dd>New fixed number</dd>\n<dt>new_desk_number</dt><dd>New extension</dd>\n<dt>oldUserGroupName</dt><dd>Previous user group</dd>\n<dt>newUserGroupName</dt><dd>New user group</dd>\n<dt>vpnName</dt><dd>VPN name</dd>\n<dt>deskNumber</dt><dd>Extension</dd>\n<dt>accesspointNameDeskNumber</dt><dd>Extension</dd>\n<dt>mobileAddress</dt><dd>Mobile number</dd>\n<dt>enterpriseName</dt><dd>Enterprise name</dd>\n<dt>enterpriseID</dt><dd>Enterprise ID</dd>\n<dt>mobilityGroupName</dt><dd>Fixed-Mobile PBX name</dd>\n<dt>userGroupName</dt><dd>User group</dd>\n<dt>enterpriseUserGroup</dt><dd>User group</dd>\n<dt>initialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>sipAccountName</dt><dd>SIP account name</dd>\n<dt>accessInstanceAttributeinitialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>accesspointNameQueuePhoneNumber</dt><dd>Queue phone number</dd>\n<dt>accesspointNameSipAccountName</dt><dd>SIP account name</dd>\n<dt>subscriptionAmount</dt><dd>New subscription amount</dd>\n<dt>contract_contact_name</dt><dd>Contract contact person (name)</dd>\n<dt>contract_contact_phone</dt><dd>Contract contact person (phone)</dd>\n<dt>contract_contact_mail</dt><dd>Contract contact person (mail)</dd>\n<dt>financial_contact_name</dt><dd>Financial contact person (name)</dd>\n<dt>financial_contact_phone</dt><dd>Financial contact person (phone)</dd>\n<dt>financial_contact_mail</dt><dd>Financial contact person (mail)</dd>\n<dt>technical_contact_name</dt><dd>Technical contact Person (name)</dd>\n<dt>technical_contact_phone</dt><dd>Technical contact Person (phone)</dd>\n<dt>technical_contact_mail</dt><dd>Technical contact Person (mail)</dd>\n<dt>deviceOption</dt><dd>Device option</dd>\n<dt>deviceType_label</dt><dd>Device type</dd>\n<dt>macAddress</dt><dd>Mac address</dd>\n<dt>deviceName</dt><dd>Device name</dd>\n<dt>sacGroupAccountId_label</dt><dd>Location account</dd>\n<dt>groupId</dt><dd>Location</dd>\n<dt>vGroupMovingToID</dt><dd>New location</dd>\n<dt>pbxName</dt><dd>PBX</dd>\n<dt>groupCitemId_label</dt><dd>Group</dd>\n<dt>Fixed</dt><dd>Alternate fixed number</dd>\n<dt>DeskNumber</dt><dd>Alternate extension</dd>\n<dt>billing_retention_period</dt><dd>Financial data retention period (months)</dd>\n<dt>managedGroupName</dt><dd>Authorized for</dd>\n<dt>subscriptionType</dt><dd>Subscription type</dd>\n<dt>CurrentNetworkOperator</dt><dd>Current network operator</dd>\n<dt>CurrentServiceProvider</dt><dd>Current service provider</dd>\n<dt>Customer_name_at_current_provider</dt><dd>Customer name at current provider</dd>\n<dt>Current_contract_number</dt><dd>Customer number at current provider</dd>\n<dt>UIccId</dt><dd>Current SIM card number</dd>\n<dt>Initials</dt><dd>Initials</dd>\n<dt>FamilyNamePrefix</dt><dd>Family name prefix</dd>\n<dt>FamilyName</dt><dd>Family name</dd>\n<dt>delivery_TT_id</dt><dd>Delivery Track&trace ID</dd>\n<dt>IsAppleDEP</dt><dd>Apple DEP</dd>\n<dt>IsSamsungKNOX</dt><dd>Samsung KNOX</dd>\n<dt>keepCurrentSim</dt><dd>Keep existing SIM card</dd>\n<dt>Note</dt><dd>Note</dd>\n<dt>Porting_wish_date</dt><dd>Preferred transition date</dd>\n<dt>returnReason</dt><dd>Reason for return</dd>\n<dt>returnRemarks</dt><dd>Remarks</dd>\n<dt>companyName</dt><dd>Company name</dd>\n<dt>companyNamePronounciation</dt><dd>Comapny name pronounciation</dd>\n<dt>businessVoiceMailMessageText</dt><dd>Chosen business voicemail message</dd>\n</dl>\n<div>\n<style type=\"text/css\">  dl {\n    display: flex;\n    flex-flow: row wrap;\n  }\n  dt {\n    flex-basis: 20%;\n    text-align: right;\n  }\n  dd {\n    flex-basis: 70%;\n    flex-grow: 1;\n  }\n</style>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_orders_track_and_trace</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "5f7d573b-8777-4484-89a2-a8a33cf30bc7",
							"name": "Forbidden",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/track-and-trace/service-requests/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"track-and-trace",
										"service-requests",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "49579418",
											"description": "Service request ID"
										}
									]
								},
								"description": "The possible keys of `attributes` map in response object:<div style='max-height: 400px; overflow: auto; width: 100%'>\n<dl>\n<dt><b>Attribute name</b></dt><dd><b>Meaning</b></dd>\n<dt>login</dt><dd>Login</dd>\n<dt>roles</dt><dd>Roles</dd>\n<dt>firstName</dt><dd>First name</dd>\n<dt>lastName</dt><dd>Last name</dd>\n<dt>surnamePrefix</dt><dd>Surname prefix</dd>\n<dt>email</dt><dd>E-mail</dd>\n<dt>dateOfBirth</dt><dd>Date of birth</dd>\n<dt>vip</dt><dd>VIP</dd>\n<dt>employeeNumber</dt><dd>Employee number</dd>\n<dt>gender</dt><dd>Gender</dd>\n<dt>salutation</dt><dd>Salutation</dd>\n<dt>preferredLanguage</dt><dd>Preferred language</dd>\n<dt>comments</dt><dd>Comments</dd>\n<dt>accesspointNameMSISDN</dt><dd>Mobile number</dd>\n<dt>accesspointNameSIM</dt><dd>SIM card number</dd>\n<dt>accesspointNameIMSI</dt><dd>IMSI</dd>\n<dt>IMEI</dt><dd>IMEI</dd>\n<dt>Hanset_IMEI_number</dt><dd>IMEI</dd>\n<dt>accesspointNameFixedNumber</dt><dd>Fixed Number</dd>\n<dt>activeTo</dt><dd>Active to</dd>\n<dt>contractName</dt><dd>Subscription or device name</dd>\n<dt>totalOnetimePrice</dt><dd>One time price</dd>\n<dt>totalRecurrentPrice</dt><dd>Recurring price</dd>\n<dt>deferredPrice</dt><dd>Deferred price</dd>\n<dt>newUiccId</dt><dd>New SIM card number</dd>\n<dt>movedGroupName</dt><dd>Moved account</dd>\n<dt>subscriberAccountId</dt><dd>Old location</dd>\n<dt>destinationAccount</dt><dd>New location</dd>\n<dt>selectedDuoUiccid</dt><dd>Selected Duo SIM card number</dd>\n<dt>projectId</dt><dd>Project ID</dd>\n<dt>new_fixed_number</dt><dd>New fixed number</dd>\n<dt>new_desk_number</dt><dd>New extension</dd>\n<dt>oldUserGroupName</dt><dd>Previous user group</dd>\n<dt>newUserGroupName</dt><dd>New user group</dd>\n<dt>vpnName</dt><dd>VPN name</dd>\n<dt>deskNumber</dt><dd>Extension</dd>\n<dt>accesspointNameDeskNumber</dt><dd>Extension</dd>\n<dt>mobileAddress</dt><dd>Mobile number</dd>\n<dt>enterpriseName</dt><dd>Enterprise name</dd>\n<dt>enterpriseID</dt><dd>Enterprise ID</dd>\n<dt>mobilityGroupName</dt><dd>Fixed-Mobile PBX name</dd>\n<dt>userGroupName</dt><dd>User group</dd>\n<dt>enterpriseUserGroup</dt><dd>User group</dd>\n<dt>initialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>sipAccountName</dt><dd>SIP account name</dd>\n<dt>accessInstanceAttributeinitialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>accesspointNameQueuePhoneNumber</dt><dd>Queue phone number</dd>\n<dt>accesspointNameSipAccountName</dt><dd>SIP account name</dd>\n<dt>subscriptionAmount</dt><dd>New subscription amount</dd>\n<dt>contract_contact_name</dt><dd>Contract contact person (name)</dd>\n<dt>contract_contact_phone</dt><dd>Contract contact person (phone)</dd>\n<dt>contract_contact_mail</dt><dd>Contract contact person (mail)</dd>\n<dt>financial_contact_name</dt><dd>Financial contact person (name)</dd>\n<dt>financial_contact_phone</dt><dd>Financial contact person (phone)</dd>\n<dt>financial_contact_mail</dt><dd>Financial contact person (mail)</dd>\n<dt>technical_contact_name</dt><dd>Technical contact Person (name)</dd>\n<dt>technical_contact_phone</dt><dd>Technical contact Person (phone)</dd>\n<dt>technical_contact_mail</dt><dd>Technical contact Person (mail)</dd>\n<dt>deviceOption</dt><dd>Device option</dd>\n<dt>deviceType_label</dt><dd>Device type</dd>\n<dt>macAddress</dt><dd>Mac address</dd>\n<dt>deviceName</dt><dd>Device name</dd>\n<dt>sacGroupAccountId_label</dt><dd>Location account</dd>\n<dt>groupId</dt><dd>Location</dd>\n<dt>vGroupMovingToID</dt><dd>New location</dd>\n<dt>pbxName</dt><dd>PBX</dd>\n<dt>groupCitemId_label</dt><dd>Group</dd>\n<dt>Fixed</dt><dd>Alternate fixed number</dd>\n<dt>DeskNumber</dt><dd>Alternate extension</dd>\n<dt>billing_retention_period</dt><dd>Financial data retention period (months)</dd>\n<dt>managedGroupName</dt><dd>Authorized for</dd>\n<dt>subscriptionType</dt><dd>Subscription type</dd>\n<dt>CurrentNetworkOperator</dt><dd>Current network operator</dd>\n<dt>CurrentServiceProvider</dt><dd>Current service provider</dd>\n<dt>Customer_name_at_current_provider</dt><dd>Customer name at current provider</dd>\n<dt>Current_contract_number</dt><dd>Customer number at current provider</dd>\n<dt>UIccId</dt><dd>Current SIM card number</dd>\n<dt>Initials</dt><dd>Initials</dd>\n<dt>FamilyNamePrefix</dt><dd>Family name prefix</dd>\n<dt>FamilyName</dt><dd>Family name</dd>\n<dt>delivery_TT_id</dt><dd>Delivery Track&trace ID</dd>\n<dt>IsAppleDEP</dt><dd>Apple DEP</dd>\n<dt>IsSamsungKNOX</dt><dd>Samsung KNOX</dd>\n<dt>keepCurrentSim</dt><dd>Keep existing SIM card</dd>\n<dt>Note</dt><dd>Note</dd>\n<dt>Porting_wish_date</dt><dd>Preferred transition date</dd>\n<dt>returnReason</dt><dd>Reason for return</dd>\n<dt>returnRemarks</dt><dd>Remarks</dd>\n<dt>companyName</dt><dd>Company name</dd>\n<dt>companyNamePronounciation</dt><dd>Comapny name pronounciation</dd>\n<dt>businessVoiceMailMessageText</dt><dd>Chosen business voicemail message</dd>\n</dl>\n<div>\n<style type=\"text/css\">  dl {\n    display: flex;\n    flex-flow: row wrap;\n  }\n  dt {\n    flex-basis: 20%;\n    text-align: right;\n  }\n  dd {\n    flex-basis: 70%;\n    flex-grow: 1;\n  }\n</style>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_orders_track_and_trace</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "4a7c0cce-e61f-47dc-9b7a-9f20de9c9080",
							"name": "Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/track-and-trace/service-requests/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"track-and-trace",
										"service-requests",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "49579418",
											"description": "Service request ID"
										}
									]
								},
								"description": "The possible keys of `attributes` map in response object:<div style='max-height: 400px; overflow: auto; width: 100%'>\n<dl>\n<dt><b>Attribute name</b></dt><dd><b>Meaning</b></dd>\n<dt>login</dt><dd>Login</dd>\n<dt>roles</dt><dd>Roles</dd>\n<dt>firstName</dt><dd>First name</dd>\n<dt>lastName</dt><dd>Last name</dd>\n<dt>surnamePrefix</dt><dd>Surname prefix</dd>\n<dt>email</dt><dd>E-mail</dd>\n<dt>dateOfBirth</dt><dd>Date of birth</dd>\n<dt>vip</dt><dd>VIP</dd>\n<dt>employeeNumber</dt><dd>Employee number</dd>\n<dt>gender</dt><dd>Gender</dd>\n<dt>salutation</dt><dd>Salutation</dd>\n<dt>preferredLanguage</dt><dd>Preferred language</dd>\n<dt>comments</dt><dd>Comments</dd>\n<dt>accesspointNameMSISDN</dt><dd>Mobile number</dd>\n<dt>accesspointNameSIM</dt><dd>SIM card number</dd>\n<dt>accesspointNameIMSI</dt><dd>IMSI</dd>\n<dt>IMEI</dt><dd>IMEI</dd>\n<dt>Hanset_IMEI_number</dt><dd>IMEI</dd>\n<dt>accesspointNameFixedNumber</dt><dd>Fixed Number</dd>\n<dt>activeTo</dt><dd>Active to</dd>\n<dt>contractName</dt><dd>Subscription or device name</dd>\n<dt>totalOnetimePrice</dt><dd>One time price</dd>\n<dt>totalRecurrentPrice</dt><dd>Recurring price</dd>\n<dt>deferredPrice</dt><dd>Deferred price</dd>\n<dt>newUiccId</dt><dd>New SIM card number</dd>\n<dt>movedGroupName</dt><dd>Moved account</dd>\n<dt>subscriberAccountId</dt><dd>Old location</dd>\n<dt>destinationAccount</dt><dd>New location</dd>\n<dt>selectedDuoUiccid</dt><dd>Selected Duo SIM card number</dd>\n<dt>projectId</dt><dd>Project ID</dd>\n<dt>new_fixed_number</dt><dd>New fixed number</dd>\n<dt>new_desk_number</dt><dd>New extension</dd>\n<dt>oldUserGroupName</dt><dd>Previous user group</dd>\n<dt>newUserGroupName</dt><dd>New user group</dd>\n<dt>vpnName</dt><dd>VPN name</dd>\n<dt>deskNumber</dt><dd>Extension</dd>\n<dt>accesspointNameDeskNumber</dt><dd>Extension</dd>\n<dt>mobileAddress</dt><dd>Mobile number</dd>\n<dt>enterpriseName</dt><dd>Enterprise name</dd>\n<dt>enterpriseID</dt><dd>Enterprise ID</dd>\n<dt>mobilityGroupName</dt><dd>Fixed-Mobile PBX name</dd>\n<dt>userGroupName</dt><dd>User group</dd>\n<dt>enterpriseUserGroup</dt><dd>User group</dd>\n<dt>initialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>sipAccountName</dt><dd>SIP account name</dd>\n<dt>accessInstanceAttributeinitialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>accesspointNameQueuePhoneNumber</dt><dd>Queue phone number</dd>\n<dt>accesspointNameSipAccountName</dt><dd>SIP account name</dd>\n<dt>subscriptionAmount</dt><dd>New subscription amount</dd>\n<dt>contract_contact_name</dt><dd>Contract contact person (name)</dd>\n<dt>contract_contact_phone</dt><dd>Contract contact person (phone)</dd>\n<dt>contract_contact_mail</dt><dd>Contract contact person (mail)</dd>\n<dt>financial_contact_name</dt><dd>Financial contact person (name)</dd>\n<dt>financial_contact_phone</dt><dd>Financial contact person (phone)</dd>\n<dt>financial_contact_mail</dt><dd>Financial contact person (mail)</dd>\n<dt>technical_contact_name</dt><dd>Technical contact Person (name)</dd>\n<dt>technical_contact_phone</dt><dd>Technical contact Person (phone)</dd>\n<dt>technical_contact_mail</dt><dd>Technical contact Person (mail)</dd>\n<dt>deviceOption</dt><dd>Device option</dd>\n<dt>deviceType_label</dt><dd>Device type</dd>\n<dt>macAddress</dt><dd>Mac address</dd>\n<dt>deviceName</dt><dd>Device name</dd>\n<dt>sacGroupAccountId_label</dt><dd>Location account</dd>\n<dt>groupId</dt><dd>Location</dd>\n<dt>vGroupMovingToID</dt><dd>New location</dd>\n<dt>pbxName</dt><dd>PBX</dd>\n<dt>groupCitemId_label</dt><dd>Group</dd>\n<dt>Fixed</dt><dd>Alternate fixed number</dd>\n<dt>DeskNumber</dt><dd>Alternate extension</dd>\n<dt>billing_retention_period</dt><dd>Financial data retention period (months)</dd>\n<dt>managedGroupName</dt><dd>Authorized for</dd>\n<dt>subscriptionType</dt><dd>Subscription type</dd>\n<dt>CurrentNetworkOperator</dt><dd>Current network operator</dd>\n<dt>CurrentServiceProvider</dt><dd>Current service provider</dd>\n<dt>Customer_name_at_current_provider</dt><dd>Customer name at current provider</dd>\n<dt>Current_contract_number</dt><dd>Customer number at current provider</dd>\n<dt>UIccId</dt><dd>Current SIM card number</dd>\n<dt>Initials</dt><dd>Initials</dd>\n<dt>FamilyNamePrefix</dt><dd>Family name prefix</dd>\n<dt>FamilyName</dt><dd>Family name</dd>\n<dt>delivery_TT_id</dt><dd>Delivery Track&trace ID</dd>\n<dt>IsAppleDEP</dt><dd>Apple DEP</dd>\n<dt>IsSamsungKNOX</dt><dd>Samsung KNOX</dd>\n<dt>keepCurrentSim</dt><dd>Keep existing SIM card</dd>\n<dt>Note</dt><dd>Note</dd>\n<dt>Porting_wish_date</dt><dd>Preferred transition date</dd>\n<dt>returnReason</dt><dd>Reason for return</dd>\n<dt>returnRemarks</dt><dd>Remarks</dd>\n<dt>companyName</dt><dd>Company name</dd>\n<dt>companyNamePronounciation</dt><dd>Comapny name pronounciation</dd>\n<dt>businessVoiceMailMessageText</dt><dd>Chosen business voicemail message</dd>\n</dl>\n<div>\n<style type=\"text/css\">  dl {\n    display: flex;\n    flex-flow: row wrap;\n  }\n  dt {\n    flex-basis: 20%;\n    text-align: right;\n  }\n  dd {\n    flex-basis: 70%;\n    flex-grow: 1;\n  }\n</style>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_orders_track_and_trace</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "405b8d62-e501-4d5b-95b9-41704a0dafe1",
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/track-and-trace/service-requests/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"track-and-trace",
										"service-requests",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "49579418",
											"description": "Service request ID"
										}
									]
								},
								"description": "The possible keys of `attributes` map in response object:<div style='max-height: 400px; overflow: auto; width: 100%'>\n<dl>\n<dt><b>Attribute name</b></dt><dd><b>Meaning</b></dd>\n<dt>login</dt><dd>Login</dd>\n<dt>roles</dt><dd>Roles</dd>\n<dt>firstName</dt><dd>First name</dd>\n<dt>lastName</dt><dd>Last name</dd>\n<dt>surnamePrefix</dt><dd>Surname prefix</dd>\n<dt>email</dt><dd>E-mail</dd>\n<dt>dateOfBirth</dt><dd>Date of birth</dd>\n<dt>vip</dt><dd>VIP</dd>\n<dt>employeeNumber</dt><dd>Employee number</dd>\n<dt>gender</dt><dd>Gender</dd>\n<dt>salutation</dt><dd>Salutation</dd>\n<dt>preferredLanguage</dt><dd>Preferred language</dd>\n<dt>comments</dt><dd>Comments</dd>\n<dt>accesspointNameMSISDN</dt><dd>Mobile number</dd>\n<dt>accesspointNameSIM</dt><dd>SIM card number</dd>\n<dt>accesspointNameIMSI</dt><dd>IMSI</dd>\n<dt>IMEI</dt><dd>IMEI</dd>\n<dt>Hanset_IMEI_number</dt><dd>IMEI</dd>\n<dt>accesspointNameFixedNumber</dt><dd>Fixed Number</dd>\n<dt>activeTo</dt><dd>Active to</dd>\n<dt>contractName</dt><dd>Subscription or device name</dd>\n<dt>totalOnetimePrice</dt><dd>One time price</dd>\n<dt>totalRecurrentPrice</dt><dd>Recurring price</dd>\n<dt>deferredPrice</dt><dd>Deferred price</dd>\n<dt>newUiccId</dt><dd>New SIM card number</dd>\n<dt>movedGroupName</dt><dd>Moved account</dd>\n<dt>subscriberAccountId</dt><dd>Old location</dd>\n<dt>destinationAccount</dt><dd>New location</dd>\n<dt>selectedDuoUiccid</dt><dd>Selected Duo SIM card number</dd>\n<dt>projectId</dt><dd>Project ID</dd>\n<dt>new_fixed_number</dt><dd>New fixed number</dd>\n<dt>new_desk_number</dt><dd>New extension</dd>\n<dt>oldUserGroupName</dt><dd>Previous user group</dd>\n<dt>newUserGroupName</dt><dd>New user group</dd>\n<dt>vpnName</dt><dd>VPN name</dd>\n<dt>deskNumber</dt><dd>Extension</dd>\n<dt>accesspointNameDeskNumber</dt><dd>Extension</dd>\n<dt>mobileAddress</dt><dd>Mobile number</dd>\n<dt>enterpriseName</dt><dd>Enterprise name</dd>\n<dt>enterpriseID</dt><dd>Enterprise ID</dd>\n<dt>mobilityGroupName</dt><dd>Fixed-Mobile PBX name</dd>\n<dt>userGroupName</dt><dd>User group</dd>\n<dt>enterpriseUserGroup</dt><dd>User group</dd>\n<dt>initialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>sipAccountName</dt><dd>SIP account name</dd>\n<dt>accessInstanceAttributeinitialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>accesspointNameQueuePhoneNumber</dt><dd>Queue phone number</dd>\n<dt>accesspointNameSipAccountName</dt><dd>SIP account name</dd>\n<dt>subscriptionAmount</dt><dd>New subscription amount</dd>\n<dt>contract_contact_name</dt><dd>Contract contact person (name)</dd>\n<dt>contract_contact_phone</dt><dd>Contract contact person (phone)</dd>\n<dt>contract_contact_mail</dt><dd>Contract contact person (mail)</dd>\n<dt>financial_contact_name</dt><dd>Financial contact person (name)</dd>\n<dt>financial_contact_phone</dt><dd>Financial contact person (phone)</dd>\n<dt>financial_contact_mail</dt><dd>Financial contact person (mail)</dd>\n<dt>technical_contact_name</dt><dd>Technical contact Person (name)</dd>\n<dt>technical_contact_phone</dt><dd>Technical contact Person (phone)</dd>\n<dt>technical_contact_mail</dt><dd>Technical contact Person (mail)</dd>\n<dt>deviceOption</dt><dd>Device option</dd>\n<dt>deviceType_label</dt><dd>Device type</dd>\n<dt>macAddress</dt><dd>Mac address</dd>\n<dt>deviceName</dt><dd>Device name</dd>\n<dt>sacGroupAccountId_label</dt><dd>Location account</dd>\n<dt>groupId</dt><dd>Location</dd>\n<dt>vGroupMovingToID</dt><dd>New location</dd>\n<dt>pbxName</dt><dd>PBX</dd>\n<dt>groupCitemId_label</dt><dd>Group</dd>\n<dt>Fixed</dt><dd>Alternate fixed number</dd>\n<dt>DeskNumber</dt><dd>Alternate extension</dd>\n<dt>billing_retention_period</dt><dd>Financial data retention period (months)</dd>\n<dt>managedGroupName</dt><dd>Authorized for</dd>\n<dt>subscriptionType</dt><dd>Subscription type</dd>\n<dt>CurrentNetworkOperator</dt><dd>Current network operator</dd>\n<dt>CurrentServiceProvider</dt><dd>Current service provider</dd>\n<dt>Customer_name_at_current_provider</dt><dd>Customer name at current provider</dd>\n<dt>Current_contract_number</dt><dd>Customer number at current provider</dd>\n<dt>UIccId</dt><dd>Current SIM card number</dd>\n<dt>Initials</dt><dd>Initials</dd>\n<dt>FamilyNamePrefix</dt><dd>Family name prefix</dd>\n<dt>FamilyName</dt><dd>Family name</dd>\n<dt>delivery_TT_id</dt><dd>Delivery Track&trace ID</dd>\n<dt>IsAppleDEP</dt><dd>Apple DEP</dd>\n<dt>IsSamsungKNOX</dt><dd>Samsung KNOX</dd>\n<dt>keepCurrentSim</dt><dd>Keep existing SIM card</dd>\n<dt>Note</dt><dd>Note</dd>\n<dt>Porting_wish_date</dt><dd>Preferred transition date</dd>\n<dt>returnReason</dt><dd>Reason for return</dd>\n<dt>returnRemarks</dt><dd>Remarks</dd>\n<dt>companyName</dt><dd>Company name</dd>\n<dt>companyNamePronounciation</dt><dd>Comapny name pronounciation</dd>\n<dt>businessVoiceMailMessageText</dt><dd>Chosen business voicemail message</dd>\n</dl>\n<div>\n<style type=\"text/css\">  dl {\n    display: flex;\n    flex-flow: row wrap;\n  }\n  dt {\n    flex-basis: 20%;\n    text-align: right;\n  }\n  dd {\n    flex-basis: 70%;\n    flex-grow: 1;\n  }\n</style>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_orders_track_and_trace</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "751a792b-75d2-4c97-9041-8747a8411c38",
							"name": "Server Error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/track-and-trace/service-requests/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"track-and-trace",
										"service-requests",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "49579418",
											"description": "Service request ID"
										}
									]
								},
								"description": "The possible keys of `attributes` map in response object:<div style='max-height: 400px; overflow: auto; width: 100%'>\n<dl>\n<dt><b>Attribute name</b></dt><dd><b>Meaning</b></dd>\n<dt>login</dt><dd>Login</dd>\n<dt>roles</dt><dd>Roles</dd>\n<dt>firstName</dt><dd>First name</dd>\n<dt>lastName</dt><dd>Last name</dd>\n<dt>surnamePrefix</dt><dd>Surname prefix</dd>\n<dt>email</dt><dd>E-mail</dd>\n<dt>dateOfBirth</dt><dd>Date of birth</dd>\n<dt>vip</dt><dd>VIP</dd>\n<dt>employeeNumber</dt><dd>Employee number</dd>\n<dt>gender</dt><dd>Gender</dd>\n<dt>salutation</dt><dd>Salutation</dd>\n<dt>preferredLanguage</dt><dd>Preferred language</dd>\n<dt>comments</dt><dd>Comments</dd>\n<dt>accesspointNameMSISDN</dt><dd>Mobile number</dd>\n<dt>accesspointNameSIM</dt><dd>SIM card number</dd>\n<dt>accesspointNameIMSI</dt><dd>IMSI</dd>\n<dt>IMEI</dt><dd>IMEI</dd>\n<dt>Hanset_IMEI_number</dt><dd>IMEI</dd>\n<dt>accesspointNameFixedNumber</dt><dd>Fixed Number</dd>\n<dt>activeTo</dt><dd>Active to</dd>\n<dt>contractName</dt><dd>Subscription or device name</dd>\n<dt>totalOnetimePrice</dt><dd>One time price</dd>\n<dt>totalRecurrentPrice</dt><dd>Recurring price</dd>\n<dt>deferredPrice</dt><dd>Deferred price</dd>\n<dt>newUiccId</dt><dd>New SIM card number</dd>\n<dt>movedGroupName</dt><dd>Moved account</dd>\n<dt>subscriberAccountId</dt><dd>Old location</dd>\n<dt>destinationAccount</dt><dd>New location</dd>\n<dt>selectedDuoUiccid</dt><dd>Selected Duo SIM card number</dd>\n<dt>projectId</dt><dd>Project ID</dd>\n<dt>new_fixed_number</dt><dd>New fixed number</dd>\n<dt>new_desk_number</dt><dd>New extension</dd>\n<dt>oldUserGroupName</dt><dd>Previous user group</dd>\n<dt>newUserGroupName</dt><dd>New user group</dd>\n<dt>vpnName</dt><dd>VPN name</dd>\n<dt>deskNumber</dt><dd>Extension</dd>\n<dt>accesspointNameDeskNumber</dt><dd>Extension</dd>\n<dt>mobileAddress</dt><dd>Mobile number</dd>\n<dt>enterpriseName</dt><dd>Enterprise name</dd>\n<dt>enterpriseID</dt><dd>Enterprise ID</dd>\n<dt>mobilityGroupName</dt><dd>Fixed-Mobile PBX name</dd>\n<dt>userGroupName</dt><dd>User group</dd>\n<dt>enterpriseUserGroup</dt><dd>User group</dd>\n<dt>initialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>sipAccountName</dt><dd>SIP account name</dd>\n<dt>accessInstanceAttributeinitialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>accesspointNameQueuePhoneNumber</dt><dd>Queue phone number</dd>\n<dt>accesspointNameSipAccountName</dt><dd>SIP account name</dd>\n<dt>subscriptionAmount</dt><dd>New subscription amount</dd>\n<dt>contract_contact_name</dt><dd>Contract contact person (name)</dd>\n<dt>contract_contact_phone</dt><dd>Contract contact person (phone)</dd>\n<dt>contract_contact_mail</dt><dd>Contract contact person (mail)</dd>\n<dt>financial_contact_name</dt><dd>Financial contact person (name)</dd>\n<dt>financial_contact_phone</dt><dd>Financial contact person (phone)</dd>\n<dt>financial_contact_mail</dt><dd>Financial contact person (mail)</dd>\n<dt>technical_contact_name</dt><dd>Technical contact Person (name)</dd>\n<dt>technical_contact_phone</dt><dd>Technical contact Person (phone)</dd>\n<dt>technical_contact_mail</dt><dd>Technical contact Person (mail)</dd>\n<dt>deviceOption</dt><dd>Device option</dd>\n<dt>deviceType_label</dt><dd>Device type</dd>\n<dt>macAddress</dt><dd>Mac address</dd>\n<dt>deviceName</dt><dd>Device name</dd>\n<dt>sacGroupAccountId_label</dt><dd>Location account</dd>\n<dt>groupId</dt><dd>Location</dd>\n<dt>vGroupMovingToID</dt><dd>New location</dd>\n<dt>pbxName</dt><dd>PBX</dd>\n<dt>groupCitemId_label</dt><dd>Group</dd>\n<dt>Fixed</dt><dd>Alternate fixed number</dd>\n<dt>DeskNumber</dt><dd>Alternate extension</dd>\n<dt>billing_retention_period</dt><dd>Financial data retention period (months)</dd>\n<dt>managedGroupName</dt><dd>Authorized for</dd>\n<dt>subscriptionType</dt><dd>Subscription type</dd>\n<dt>CurrentNetworkOperator</dt><dd>Current network operator</dd>\n<dt>CurrentServiceProvider</dt><dd>Current service provider</dd>\n<dt>Customer_name_at_current_provider</dt><dd>Customer name at current provider</dd>\n<dt>Current_contract_number</dt><dd>Customer number at current provider</dd>\n<dt>UIccId</dt><dd>Current SIM card number</dd>\n<dt>Initials</dt><dd>Initials</dd>\n<dt>FamilyNamePrefix</dt><dd>Family name prefix</dd>\n<dt>FamilyName</dt><dd>Family name</dd>\n<dt>delivery_TT_id</dt><dd>Delivery Track&trace ID</dd>\n<dt>IsAppleDEP</dt><dd>Apple DEP</dd>\n<dt>IsSamsungKNOX</dt><dd>Samsung KNOX</dd>\n<dt>keepCurrentSim</dt><dd>Keep existing SIM card</dd>\n<dt>Note</dt><dd>Note</dd>\n<dt>Porting_wish_date</dt><dd>Preferred transition date</dd>\n<dt>returnReason</dt><dd>Reason for return</dd>\n<dt>returnRemarks</dt><dd>Remarks</dd>\n<dt>companyName</dt><dd>Company name</dd>\n<dt>companyNamePronounciation</dt><dd>Comapny name pronounciation</dd>\n<dt>businessVoiceMailMessageText</dt><dd>Chosen business voicemail message</dd>\n</dl>\n<div>\n<style type=\"text/css\">  dl {\n    display: flex;\n    flex-flow: row wrap;\n  }\n  dt {\n    flex-basis: 20%;\n    text-align: right;\n  }\n  dd {\n    flex-basis: 70%;\n    flex-grow: 1;\n  }\n</style>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_orders_track_and_trace</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "5d73a829-8e4a-497e-bdd8-6e5d5d7659d8",
							"name": "Service Unavailable",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/track-and-trace/service-requests/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"track-and-trace",
										"service-requests",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "49579418",
											"description": "Service request ID"
										}
									]
								},
								"description": "The possible keys of `attributes` map in response object:<div style='max-height: 400px; overflow: auto; width: 100%'>\n<dl>\n<dt><b>Attribute name</b></dt><dd><b>Meaning</b></dd>\n<dt>login</dt><dd>Login</dd>\n<dt>roles</dt><dd>Roles</dd>\n<dt>firstName</dt><dd>First name</dd>\n<dt>lastName</dt><dd>Last name</dd>\n<dt>surnamePrefix</dt><dd>Surname prefix</dd>\n<dt>email</dt><dd>E-mail</dd>\n<dt>dateOfBirth</dt><dd>Date of birth</dd>\n<dt>vip</dt><dd>VIP</dd>\n<dt>employeeNumber</dt><dd>Employee number</dd>\n<dt>gender</dt><dd>Gender</dd>\n<dt>salutation</dt><dd>Salutation</dd>\n<dt>preferredLanguage</dt><dd>Preferred language</dd>\n<dt>comments</dt><dd>Comments</dd>\n<dt>accesspointNameMSISDN</dt><dd>Mobile number</dd>\n<dt>accesspointNameSIM</dt><dd>SIM card number</dd>\n<dt>accesspointNameIMSI</dt><dd>IMSI</dd>\n<dt>IMEI</dt><dd>IMEI</dd>\n<dt>Hanset_IMEI_number</dt><dd>IMEI</dd>\n<dt>accesspointNameFixedNumber</dt><dd>Fixed Number</dd>\n<dt>activeTo</dt><dd>Active to</dd>\n<dt>contractName</dt><dd>Subscription or device name</dd>\n<dt>totalOnetimePrice</dt><dd>One time price</dd>\n<dt>totalRecurrentPrice</dt><dd>Recurring price</dd>\n<dt>deferredPrice</dt><dd>Deferred price</dd>\n<dt>newUiccId</dt><dd>New SIM card number</dd>\n<dt>movedGroupName</dt><dd>Moved account</dd>\n<dt>subscriberAccountId</dt><dd>Old location</dd>\n<dt>destinationAccount</dt><dd>New location</dd>\n<dt>selectedDuoUiccid</dt><dd>Selected Duo SIM card number</dd>\n<dt>projectId</dt><dd>Project ID</dd>\n<dt>new_fixed_number</dt><dd>New fixed number</dd>\n<dt>new_desk_number</dt><dd>New extension</dd>\n<dt>oldUserGroupName</dt><dd>Previous user group</dd>\n<dt>newUserGroupName</dt><dd>New user group</dd>\n<dt>vpnName</dt><dd>VPN name</dd>\n<dt>deskNumber</dt><dd>Extension</dd>\n<dt>accesspointNameDeskNumber</dt><dd>Extension</dd>\n<dt>mobileAddress</dt><dd>Mobile number</dd>\n<dt>enterpriseName</dt><dd>Enterprise name</dd>\n<dt>enterpriseID</dt><dd>Enterprise ID</dd>\n<dt>mobilityGroupName</dt><dd>Fixed-Mobile PBX name</dd>\n<dt>userGroupName</dt><dd>User group</dd>\n<dt>enterpriseUserGroup</dt><dd>User group</dd>\n<dt>initialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>sipAccountName</dt><dd>SIP account name</dd>\n<dt>accessInstanceAttributeinitialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>accesspointNameQueuePhoneNumber</dt><dd>Queue phone number</dd>\n<dt>accesspointNameSipAccountName</dt><dd>SIP account name</dd>\n<dt>subscriptionAmount</dt><dd>New subscription amount</dd>\n<dt>contract_contact_name</dt><dd>Contract contact person (name)</dd>\n<dt>contract_contact_phone</dt><dd>Contract contact person (phone)</dd>\n<dt>contract_contact_mail</dt><dd>Contract contact person (mail)</dd>\n<dt>financial_contact_name</dt><dd>Financial contact person (name)</dd>\n<dt>financial_contact_phone</dt><dd>Financial contact person (phone)</dd>\n<dt>financial_contact_mail</dt><dd>Financial contact person (mail)</dd>\n<dt>technical_contact_name</dt><dd>Technical contact Person (name)</dd>\n<dt>technical_contact_phone</dt><dd>Technical contact Person (phone)</dd>\n<dt>technical_contact_mail</dt><dd>Technical contact Person (mail)</dd>\n<dt>deviceOption</dt><dd>Device option</dd>\n<dt>deviceType_label</dt><dd>Device type</dd>\n<dt>macAddress</dt><dd>Mac address</dd>\n<dt>deviceName</dt><dd>Device name</dd>\n<dt>sacGroupAccountId_label</dt><dd>Location account</dd>\n<dt>groupId</dt><dd>Location</dd>\n<dt>vGroupMovingToID</dt><dd>New location</dd>\n<dt>pbxName</dt><dd>PBX</dd>\n<dt>groupCitemId_label</dt><dd>Group</dd>\n<dt>Fixed</dt><dd>Alternate fixed number</dd>\n<dt>DeskNumber</dt><dd>Alternate extension</dd>\n<dt>billing_retention_period</dt><dd>Financial data retention period (months)</dd>\n<dt>managedGroupName</dt><dd>Authorized for</dd>\n<dt>subscriptionType</dt><dd>Subscription type</dd>\n<dt>CurrentNetworkOperator</dt><dd>Current network operator</dd>\n<dt>CurrentServiceProvider</dt><dd>Current service provider</dd>\n<dt>Customer_name_at_current_provider</dt><dd>Customer name at current provider</dd>\n<dt>Current_contract_number</dt><dd>Customer number at current provider</dd>\n<dt>UIccId</dt><dd>Current SIM card number</dd>\n<dt>Initials</dt><dd>Initials</dd>\n<dt>FamilyNamePrefix</dt><dd>Family name prefix</dd>\n<dt>FamilyName</dt><dd>Family name</dd>\n<dt>delivery_TT_id</dt><dd>Delivery Track&trace ID</dd>\n<dt>IsAppleDEP</dt><dd>Apple DEP</dd>\n<dt>IsSamsungKNOX</dt><dd>Samsung KNOX</dd>\n<dt>keepCurrentSim</dt><dd>Keep existing SIM card</dd>\n<dt>Note</dt><dd>Note</dd>\n<dt>Porting_wish_date</dt><dd>Preferred transition date</dd>\n<dt>returnReason</dt><dd>Reason for return</dd>\n<dt>returnRemarks</dt><dd>Remarks</dd>\n<dt>companyName</dt><dd>Company name</dd>\n<dt>companyNamePronounciation</dt><dd>Comapny name pronounciation</dd>\n<dt>businessVoiceMailMessageText</dt><dd>Chosen business voicemail message</dd>\n</dl>\n<div>\n<style type=\"text/css\">  dl {\n    display: flex;\n    flex-flow: row wrap;\n  }\n  dt {\n    flex-basis: 20%;\n    text-align: right;\n  }\n  dd {\n    flex-basis: 70%;\n    flex-grow: 1;\n  }\n</style>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_orders_track_and_trace</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			],
			"id": "59601b19-5b2c-449a-84ce-b785225556cb",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "3bc6afb4-be77-4e27-9ad3-7e574e2ded22",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "17a42f38-3325-4eb4-a4f4-32e6018293c9",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "13- create Subscriber - Without User",
			"item": [
				{
					"name": "1- Get all hierarchy entity",
					"id": "4c0e6844-71da-4f6a-b6df-549c554d3c7b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/hierarchy/children",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"hierarchy",
								"children"
							],
							"query": [
								{
									"key": "includeGroups",
									"value": "true",
									"disabled": true
								},
								{
									"key": "includeCustomer",
									"value": "true",
									"disabled": true
								}
							]
						},
						"description": "Get details for organisation structure entitity with given `id`.\nDifferent set of attributes is returned for different entity types. Supported item types are:<ul><li>`CUSTOMER`</li><li>`DEBTOR`</li><li>`COST_CENTER`</li><li>`CUSTOM_GROUP`</li><li>`BUSINESS_LOCATION`</li></ul>Details for `SUBSCRIBER` are not supported. `subscribers/{id}` should be used instead.\n<br>Possible exceptions:\n| HTTP code | Error code                         | Description                                                  |\n|-----------|------------------------------------|--------------------------------------------------------------|\n| `400`     | `WRONG_GROUP_TYPE`                 | Item of unsupported type                                     |\n| `404`     | `VIRTUAL_HIERARCHY_ITEM_NOT_FOUND` | Information for item with the given `id` cannot be found     |\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
					},
					"response": [
						{
							"id": "defc8380-4dd5-4c6b-b873-67692f1d53f8",
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hierarchy/children",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"children"
									],
									"query": [
										{
											"key": "includeGroups",
											"value": "true",
											"disabled": true
										},
										{
											"key": "includeCustomer",
											"value": "true",
											"disabled": true
										}
									]
								},
								"description": "Get details for organisation structure entitity with given `id`.\nDifferent set of attributes is returned for different entity types. Supported item types are:<ul><li>`CUSTOMER`</li><li>`DEBTOR`</li><li>`COST_CENTER`</li><li>`CUSTOM_GROUP`</li><li>`BUSINESS_LOCATION`</li></ul>Details for `SUBSCRIBER` are not supported. `subscribers/{id}` should be used instead.\n<br>Possible exceptions:\n| HTTP code | Error code                         | Description                                                  |\n|-----------|------------------------------------|--------------------------------------------------------------|\n| `400`     | `WRONG_GROUP_TYPE`                 | Item of unsupported type                                     |\n| `404`     | `VIRTUAL_HIERARCHY_ITEM_NOT_FOUND` | Information for item with the given `id` cannot be found     |\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "9221117e-1b01-42cd-a184-291bfa551ade",
							"name": "Bad Request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hierarchy/children?includeGroups=true&includeCustomer=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"children"
									],
									"query": [
										{
											"key": "includeGroups",
											"value": "true",
											"disabled": true
										},
										{
											"key": "includeCustomer",
											"value": "true",
											"disabled": true
										}
									]
								},
								"description": "Get details for organisation structure entitity with given `id`.\nDifferent set of attributes is returned for different entity types. Supported item types are:<ul><li>`CUSTOMER`</li><li>`DEBTOR`</li><li>`COST_CENTER`</li><li>`CUSTOM_GROUP`</li><li>`BUSINESS_LOCATION`</li></ul>Details for `SUBSCRIBER` are not supported. `subscribers/{id}` should be used instead.\n<br>Possible exceptions:\n| HTTP code | Error code                         | Description                                                  |\n|-----------|------------------------------------|--------------------------------------------------------------|\n| `400`     | `WRONG_GROUP_TYPE`                 | Item of unsupported type                                     |\n| `404`     | `VIRTUAL_HIERARCHY_ITEM_NOT_FOUND` | Information for item with the given `id` cannot be found     |\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "9ee837f3-f4ba-49e9-9e0d-cac8a55dd00a",
							"name": "Unauthorized",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hierarchy/children?includeGroups=true&includeCustomer=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"children"
									],
									"query": [
										{
											"key": "includeGroups",
											"value": "true",
											"disabled": true
										},
										{
											"key": "includeCustomer",
											"value": "true",
											"disabled": true
										}
									]
								},
								"description": "Get details for organisation structure entitity with given `id`.\nDifferent set of attributes is returned for different entity types. Supported item types are:<ul><li>`CUSTOMER`</li><li>`DEBTOR`</li><li>`COST_CENTER`</li><li>`CUSTOM_GROUP`</li><li>`BUSINESS_LOCATION`</li></ul>Details for `SUBSCRIBER` are not supported. `subscribers/{id}` should be used instead.\n<br>Possible exceptions:\n| HTTP code | Error code                         | Description                                                  |\n|-----------|------------------------------------|--------------------------------------------------------------|\n| `400`     | `WRONG_GROUP_TYPE`                 | Item of unsupported type                                     |\n| `404`     | `VIRTUAL_HIERARCHY_ITEM_NOT_FOUND` | Information for item with the given `id` cannot be found     |\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "b402b1af-98fb-411a-95e8-36e861684450",
							"name": "Forbidden",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hierarchy/children?includeGroups=true&includeCustomer=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"children"
									],
									"query": [
										{
											"key": "includeGroups",
											"value": "true",
											"disabled": true
										},
										{
											"key": "includeCustomer",
											"value": "true",
											"disabled": true
										}
									]
								},
								"description": "Get details for organisation structure entitity with given `id`.\nDifferent set of attributes is returned for different entity types. Supported item types are:<ul><li>`CUSTOMER`</li><li>`DEBTOR`</li><li>`COST_CENTER`</li><li>`CUSTOM_GROUP`</li><li>`BUSINESS_LOCATION`</li></ul>Details for `SUBSCRIBER` are not supported. `subscribers/{id}` should be used instead.\n<br>Possible exceptions:\n| HTTP code | Error code                         | Description                                                  |\n|-----------|------------------------------------|--------------------------------------------------------------|\n| `400`     | `WRONG_GROUP_TYPE`                 | Item of unsupported type                                     |\n| `404`     | `VIRTUAL_HIERARCHY_ITEM_NOT_FOUND` | Information for item with the given `id` cannot be found     |\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "231c2cbb-9e63-468a-9581-3bfc4caa38fe",
							"name": "Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hierarchy/children?includeGroups=true&includeCustomer=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"children"
									],
									"query": [
										{
											"key": "includeGroups",
											"value": "true",
											"disabled": true
										},
										{
											"key": "includeCustomer",
											"value": "true",
											"disabled": true
										}
									]
								},
								"description": "Get details for organisation structure entitity with given `id`.\nDifferent set of attributes is returned for different entity types. Supported item types are:<ul><li>`CUSTOMER`</li><li>`DEBTOR`</li><li>`COST_CENTER`</li><li>`CUSTOM_GROUP`</li><li>`BUSINESS_LOCATION`</li></ul>Details for `SUBSCRIBER` are not supported. `subscribers/{id}` should be used instead.\n<br>Possible exceptions:\n| HTTP code | Error code                         | Description                                                  |\n|-----------|------------------------------------|--------------------------------------------------------------|\n| `400`     | `WRONG_GROUP_TYPE`                 | Item of unsupported type                                     |\n| `404`     | `VIRTUAL_HIERARCHY_ITEM_NOT_FOUND` | Information for item with the given `id` cannot be found     |\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "965ba991-5ba2-45a4-8ace-f7deb4c11d86",
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hierarchy/children?includeGroups=true&includeCustomer=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"children"
									],
									"query": [
										{
											"key": "includeGroups",
											"value": "true",
											"disabled": true
										},
										{
											"key": "includeCustomer",
											"value": "true",
											"disabled": true
										}
									]
								},
								"description": "Get details for organisation structure entitity with given `id`.\nDifferent set of attributes is returned for different entity types. Supported item types are:<ul><li>`CUSTOMER`</li><li>`DEBTOR`</li><li>`COST_CENTER`</li><li>`CUSTOM_GROUP`</li><li>`BUSINESS_LOCATION`</li></ul>Details for `SUBSCRIBER` are not supported. `subscribers/{id}` should be used instead.\n<br>Possible exceptions:\n| HTTP code | Error code                         | Description                                                  |\n|-----------|------------------------------------|--------------------------------------------------------------|\n| `400`     | `WRONG_GROUP_TYPE`                 | Item of unsupported type                                     |\n| `404`     | `VIRTUAL_HIERARCHY_ITEM_NOT_FOUND` | Information for item with the given `id` cannot be found     |\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "30569e19-1703-4862-be26-4242883399a2",
							"name": "Server Error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hierarchy/children?includeGroups=true&includeCustomer=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"children"
									],
									"query": [
										{
											"key": "includeGroups",
											"value": "true",
											"disabled": true
										},
										{
											"key": "includeCustomer",
											"value": "true",
											"disabled": true
										}
									]
								},
								"description": "Get details for organisation structure entitity with given `id`.\nDifferent set of attributes is returned for different entity types. Supported item types are:<ul><li>`CUSTOMER`</li><li>`DEBTOR`</li><li>`COST_CENTER`</li><li>`CUSTOM_GROUP`</li><li>`BUSINESS_LOCATION`</li></ul>Details for `SUBSCRIBER` are not supported. `subscribers/{id}` should be used instead.\n<br>Possible exceptions:\n| HTTP code | Error code                         | Description                                                  |\n|-----------|------------------------------------|--------------------------------------------------------------|\n| `400`     | `WRONG_GROUP_TYPE`                 | Item of unsupported type                                     |\n| `404`     | `VIRTUAL_HIERARCHY_ITEM_NOT_FOUND` | Information for item with the given `id` cannot be found     |\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "dc79b374-97b7-4604-a55e-2e073870bb4d",
							"name": "Service Unavailable",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hierarchy/children?includeGroups=true&includeCustomer=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"children"
									],
									"query": [
										{
											"key": "includeGroups",
											"value": "true",
											"disabled": true
										},
										{
											"key": "includeCustomer",
											"value": "true",
											"disabled": true
										}
									]
								},
								"description": "Get details for organisation structure entitity with given `id`.\nDifferent set of attributes is returned for different entity types. Supported item types are:<ul><li>`CUSTOMER`</li><li>`DEBTOR`</li><li>`COST_CENTER`</li><li>`CUSTOM_GROUP`</li><li>`BUSINESS_LOCATION`</li></ul>Details for `SUBSCRIBER` are not supported. `subscribers/{id}` should be used instead.\n<br>Possible exceptions:\n| HTTP code | Error code                         | Description                                                  |\n|-----------|------------------------------------|--------------------------------------------------------------|\n| `400`     | `WRONG_GROUP_TYPE`                 | Item of unsupported type                                     |\n| `404`     | `VIRTUAL_HIERARCHY_ITEM_NOT_FOUND` | Information for item with the given `id` cannot be found     |\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "2- Get operations availability for chosen item",
					"id": "779a556e-8627-4e08-8f26-ab1b4ee5ee95",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/hierarchy/children/:id/operations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"hierarchy",
								"children",
								":id",
								"operations"
							],
							"variable": [
								{
									"key": "id",
									"value": "14091765",
									"description": "(Required) id"
								}
							]
						},
						"description": "Get available operations for organisational hierarchy item with the given `id`.\nPossible operations are:<ul><li>`create subscriber`</li><li>`create cost center`</li><li>`create virtual group`</li><li>`edit item`</li><li>`move item`</li><li>`remove item`</li></ul>Operations for `SUBSCRIBER` are not supported. `subscribers/{id}/operations` should be used instead.\n<br>Possible exceptions:\n| HTTP code | Error code                         | Description                                                  |\n|-----------|------------------------------------|--------------------------------------------------------------|\n| `400`     | `WRONG_GROUP_TYPE`                 | Item of unsupported type                                     |\n| `404`     | `VIRTUAL_HIERARCHY_ITEM_NOT_FOUND` | Information for item with the given `id` cannot be found     |\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
					},
					"response": [
						{
							"id": "142fbd40-b46c-4aa9-8ed8-8d2611eb82df",
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hierarchy/children/:id/operations",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"children",
										":id",
										"operations"
									],
									"variable": [
										{
											"key": "id",
											"value": "14091765",
											"description": "(Required) id"
										}
									]
								},
								"description": "Get available operations for organisational hierarchy item with the given `id`.\nPossible operations are:<ul><li>`create subscriber`</li><li>`create cost center`</li><li>`create virtual group`</li><li>`edit item`</li><li>`move item`</li><li>`remove item`</li></ul>Operations for `SUBSCRIBER` are not supported. `subscribers/{id}/operations` should be used instead.\n<br>Possible exceptions:\n| HTTP code | Error code                         | Description                                                  |\n|-----------|------------------------------------|--------------------------------------------------------------|\n| `400`     | `WRONG_GROUP_TYPE`                 | Item of unsupported type                                     |\n| `404`     | `VIRTUAL_HIERARCHY_ITEM_NOT_FOUND` | Information for item with the given `id` cannot be found     |\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "f1720c08-7899-41c7-be56-17cbff63cfad",
							"name": "Bad Request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hierarchy/children/:id/operations",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"children",
										":id",
										"operations"
									],
									"variable": [
										{
											"key": "id",
											"value": "14091765",
											"description": "(Required) id"
										}
									]
								},
								"description": "Get available operations for organisational hierarchy item with the given `id`.\nPossible operations are:<ul><li>`create subscriber`</li><li>`create cost center`</li><li>`create virtual group`</li><li>`edit item`</li><li>`move item`</li><li>`remove item`</li></ul>Operations for `SUBSCRIBER` are not supported. `subscribers/{id}/operations` should be used instead.\n<br>Possible exceptions:\n| HTTP code | Error code                         | Description                                                  |\n|-----------|------------------------------------|--------------------------------------------------------------|\n| `400`     | `WRONG_GROUP_TYPE`                 | Item of unsupported type                                     |\n| `404`     | `VIRTUAL_HIERARCHY_ITEM_NOT_FOUND` | Information for item with the given `id` cannot be found     |\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "fb3bbb69-435f-47ce-8bb5-b4aa59e32eb0",
							"name": "Unauthorized",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hierarchy/children/:id/operations",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"children",
										":id",
										"operations"
									],
									"variable": [
										{
											"key": "id",
											"value": "14091765",
											"description": "(Required) id"
										}
									]
								},
								"description": "Get available operations for organisational hierarchy item with the given `id`.\nPossible operations are:<ul><li>`create subscriber`</li><li>`create cost center`</li><li>`create virtual group`</li><li>`edit item`</li><li>`move item`</li><li>`remove item`</li></ul>Operations for `SUBSCRIBER` are not supported. `subscribers/{id}/operations` should be used instead.\n<br>Possible exceptions:\n| HTTP code | Error code                         | Description                                                  |\n|-----------|------------------------------------|--------------------------------------------------------------|\n| `400`     | `WRONG_GROUP_TYPE`                 | Item of unsupported type                                     |\n| `404`     | `VIRTUAL_HIERARCHY_ITEM_NOT_FOUND` | Information for item with the given `id` cannot be found     |\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "158d7c9c-389e-4cc9-9475-ef7000346763",
							"name": "Forbidden",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hierarchy/children/:id/operations",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"children",
										":id",
										"operations"
									],
									"variable": [
										{
											"key": "id",
											"value": "14091765",
											"description": "(Required) id"
										}
									]
								},
								"description": "Get available operations for organisational hierarchy item with the given `id`.\nPossible operations are:<ul><li>`create subscriber`</li><li>`create cost center`</li><li>`create virtual group`</li><li>`edit item`</li><li>`move item`</li><li>`remove item`</li></ul>Operations for `SUBSCRIBER` are not supported. `subscribers/{id}/operations` should be used instead.\n<br>Possible exceptions:\n| HTTP code | Error code                         | Description                                                  |\n|-----------|------------------------------------|--------------------------------------------------------------|\n| `400`     | `WRONG_GROUP_TYPE`                 | Item of unsupported type                                     |\n| `404`     | `VIRTUAL_HIERARCHY_ITEM_NOT_FOUND` | Information for item with the given `id` cannot be found     |\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "63de48cb-b968-4977-898f-09d57e3f4940",
							"name": "Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hierarchy/children/:id/operations",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"children",
										":id",
										"operations"
									],
									"variable": [
										{
											"key": "id",
											"value": "14091765",
											"description": "(Required) id"
										}
									]
								},
								"description": "Get available operations for organisational hierarchy item with the given `id`.\nPossible operations are:<ul><li>`create subscriber`</li><li>`create cost center`</li><li>`create virtual group`</li><li>`edit item`</li><li>`move item`</li><li>`remove item`</li></ul>Operations for `SUBSCRIBER` are not supported. `subscribers/{id}/operations` should be used instead.\n<br>Possible exceptions:\n| HTTP code | Error code                         | Description                                                  |\n|-----------|------------------------------------|--------------------------------------------------------------|\n| `400`     | `WRONG_GROUP_TYPE`                 | Item of unsupported type                                     |\n| `404`     | `VIRTUAL_HIERARCHY_ITEM_NOT_FOUND` | Information for item with the given `id` cannot be found     |\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "12608f1d-d723-485c-a6dc-c799f4f6e229",
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hierarchy/children/:id/operations",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"children",
										":id",
										"operations"
									],
									"variable": [
										{
											"key": "id",
											"value": "14091765",
											"description": "(Required) id"
										}
									]
								},
								"description": "Get available operations for organisational hierarchy item with the given `id`.\nPossible operations are:<ul><li>`create subscriber`</li><li>`create cost center`</li><li>`create virtual group`</li><li>`edit item`</li><li>`move item`</li><li>`remove item`</li></ul>Operations for `SUBSCRIBER` are not supported. `subscribers/{id}/operations` should be used instead.\n<br>Possible exceptions:\n| HTTP code | Error code                         | Description                                                  |\n|-----------|------------------------------------|--------------------------------------------------------------|\n| `400`     | `WRONG_GROUP_TYPE`                 | Item of unsupported type                                     |\n| `404`     | `VIRTUAL_HIERARCHY_ITEM_NOT_FOUND` | Information for item with the given `id` cannot be found     |\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "3a675380-0f16-4846-a960-0acda8cba444",
							"name": "Server Error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hierarchy/children/:id/operations",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"children",
										":id",
										"operations"
									],
									"variable": [
										{
											"key": "id",
											"value": "14091765",
											"description": "(Required) id"
										}
									]
								},
								"description": "Get available operations for organisational hierarchy item with the given `id`.\nPossible operations are:<ul><li>`create subscriber`</li><li>`create cost center`</li><li>`create virtual group`</li><li>`edit item`</li><li>`move item`</li><li>`remove item`</li></ul>Operations for `SUBSCRIBER` are not supported. `subscribers/{id}/operations` should be used instead.\n<br>Possible exceptions:\n| HTTP code | Error code                         | Description                                                  |\n|-----------|------------------------------------|--------------------------------------------------------------|\n| `400`     | `WRONG_GROUP_TYPE`                 | Item of unsupported type                                     |\n| `404`     | `VIRTUAL_HIERARCHY_ITEM_NOT_FOUND` | Information for item with the given `id` cannot be found     |\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "96bde859-15f8-4093-8c02-efa19a77a7a3",
							"name": "Service Unavailable",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hierarchy/children/:id/operations",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"children",
										":id",
										"operations"
									],
									"variable": [
										{
											"key": "id",
											"value": "14091765",
											"description": "(Required) id"
										}
									]
								},
								"description": "Get available operations for organisational hierarchy item with the given `id`.\nPossible operations are:<ul><li>`create subscriber`</li><li>`create cost center`</li><li>`create virtual group`</li><li>`edit item`</li><li>`move item`</li><li>`remove item`</li></ul>Operations for `SUBSCRIBER` are not supported. `subscribers/{id}/operations` should be used instead.\n<br>Possible exceptions:\n| HTTP code | Error code                         | Description                                                  |\n|-----------|------------------------------------|--------------------------------------------------------------|\n| `400`     | `WRONG_GROUP_TYPE`                 | Item of unsupported type                                     |\n| `404`     | `VIRTUAL_HIERARCHY_ITEM_NOT_FOUND` | Information for item with the given `id` cannot be found     |\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "3- Create subscriber (without user)",
					"id": "53324fa7-60a9-4565-91f0-6e723686139f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"groupId\": 14091765,\n    \"referenceNumber\": \"quis anim\",\n    \"subscriber\": {\n        \"surname\": \"Ut ipsum Duis occaecat\",\n        \"comments\": \"Excepte\",\n        \"email\": \"nirupam.anand@kpn.com\",\n        \"employeeNumber\": \"laborum sint id non in\",\n        \"firstName\": \"proident do\",\n        \"fixedNumber\": \"31617185666\",\n        \"gender\": \"OTHER\",\n        \"mobileNumber\": \"31617185666\",\n        \"preferredLanguage\": \"EN\",\n        \"surnamePrefix\": \"aute qui\",\n        \"vip\": true\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/hierarchy/subscribers",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"hierarchy",
								"subscribers"
							]
						},
						"description": "If you want to create both subscriber and user at the same time, you should fill userAdditionalInfo.\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
					},
					"response": [
						{
							"id": "0795ddd6-5e5a-4f49-8f4c-99092817c976",
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"groupId\": 14091765,\n    \"referenceNumber\": \"quis anim\",\n    \"subscriber\": {\n        \"surname\": \"Ut ipsum Duis occaecat\",\n        \"comments\": \"Excepte\",\n        \"email\": \"nirupam.anand@kpn.com\",\n        \"employeeNumber\": \"laborum sint id non in\",\n        \"firstName\": \"proident do\",\n        \"fixedNumber\": \"31617185666\",\n        \"gender\": \"OTHER\",\n        \"mobileNumber\": \"31617185666\",\n        \"preferredLanguage\": \"EN\",\n        \"surnamePrefix\": \"aute qui\",\n        \"vip\": true\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/hierarchy/subscribers",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"subscribers"
									]
								},
								"description": "If you want to create both subscriber and user at the same time, you should fill userAdditionalInfo.\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "7a4274af-dcdd-4f65-b5c9-b7390072087e",
							"name": "Bad Request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"groupId\": 14091765,\n    \"referenceNumber\": \"quis anim\",\n    \"subscriber\": {\n        \"surname\": \"Ut ipsum Duis occaecat\",\n        \"comments\": \"Excepte\",\n        \"email\": \"nirupam.anand@kpn.com\",\n        \"employeeNumber\": \"laborum sint id non in\",\n        \"firstName\": \"proident do\",\n        \"fixedNumber\": \"31617185666\",\n        \"gender\": \"OTHER\",\n        \"mobileNumber\": \"31617185666\",\n        \"preferredLanguage\": \"EN\",\n        \"surnamePrefix\": \"aute qui\",\n        \"vip\": true\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/hierarchy/subscribers",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"subscribers"
									]
								},
								"description": "If you want to create both subscriber and user at the same time, you should fill userAdditionalInfo.\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "a11a1f42-d6df-4b81-8f96-b63a0e97086c",
							"name": "Unauthorized",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"groupId\": 14091765,\n    \"referenceNumber\": \"quis anim\",\n    \"subscriber\": {\n        \"surname\": \"Ut ipsum Duis occaecat\",\n        \"comments\": \"Excepte\",\n        \"email\": \"nirupam.anand@kpn.com\",\n        \"employeeNumber\": \"laborum sint id non in\",\n        \"firstName\": \"proident do\",\n        \"fixedNumber\": \"31617185666\",\n        \"gender\": \"OTHER\",\n        \"mobileNumber\": \"31617185666\",\n        \"preferredLanguage\": \"EN\",\n        \"surnamePrefix\": \"aute qui\",\n        \"vip\": true\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/hierarchy/subscribers",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"subscribers"
									]
								},
								"description": "If you want to create both subscriber and user at the same time, you should fill userAdditionalInfo.\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "10f9eb3a-a4ea-4ea0-985f-05ecb07b41e5",
							"name": "Forbidden",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"groupId\": 14091765,\n    \"referenceNumber\": \"quis anim\",\n    \"subscriber\": {\n        \"surname\": \"Ut ipsum Duis occaecat\",\n        \"comments\": \"Excepte\",\n        \"email\": \"nirupam.anand@kpn.com\",\n        \"employeeNumber\": \"laborum sint id non in\",\n        \"firstName\": \"proident do\",\n        \"fixedNumber\": \"31617185666\",\n        \"gender\": \"OTHER\",\n        \"mobileNumber\": \"31617185666\",\n        \"preferredLanguage\": \"EN\",\n        \"surnamePrefix\": \"aute qui\",\n        \"vip\": true\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/hierarchy/subscribers",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"subscribers"
									]
								},
								"description": "If you want to create both subscriber and user at the same time, you should fill userAdditionalInfo.\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "f0b81aa1-3054-41e3-acc0-0c1e832b8a65",
							"name": "Not Found",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"groupId\": 14091765,\n    \"referenceNumber\": \"quis anim\",\n    \"subscriber\": {\n        \"surname\": \"Ut ipsum Duis occaecat\",\n        \"comments\": \"Excepte\",\n        \"email\": \"nirupam.anand@kpn.com\",\n        \"employeeNumber\": \"laborum sint id non in\",\n        \"firstName\": \"proident do\",\n        \"fixedNumber\": \"31617185666\",\n        \"gender\": \"OTHER\",\n        \"mobileNumber\": \"31617185666\",\n        \"preferredLanguage\": \"EN\",\n        \"surnamePrefix\": \"aute qui\",\n        \"vip\": true\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/hierarchy/subscribers",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"subscribers"
									]
								},
								"description": "If you want to create both subscriber and user at the same time, you should fill userAdditionalInfo.\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "e04f7c0e-cda1-44e4-b24d-eaebe7aeee8e",
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"groupId\": 14091765,\n    \"referenceNumber\": \"quis anim\",\n    \"subscriber\": {\n        \"surname\": \"Ut ipsum Duis occaecat\",\n        \"comments\": \"Excepte\",\n        \"email\": \"nirupam.anand@kpn.com\",\n        \"employeeNumber\": \"laborum sint id non in\",\n        \"firstName\": \"proident do\",\n        \"fixedNumber\": \"31617185666\",\n        \"gender\": \"OTHER\",\n        \"mobileNumber\": \"31617185666\",\n        \"preferredLanguage\": \"EN\",\n        \"surnamePrefix\": \"aute qui\",\n        \"vip\": true\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/hierarchy/subscribers",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"subscribers"
									]
								},
								"description": "If you want to create both subscriber and user at the same time, you should fill userAdditionalInfo.\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "14e61201-a3b0-4899-995f-fe6c64ce8510",
							"name": "Server Error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"groupId\": 14091765,\n    \"referenceNumber\": \"quis anim\",\n    \"subscriber\": {\n        \"surname\": \"Ut ipsum Duis occaecat\",\n        \"comments\": \"Excepte\",\n        \"email\": \"nirupam.anand@kpn.com\",\n        \"employeeNumber\": \"laborum sint id non in\",\n        \"firstName\": \"proident do\",\n        \"fixedNumber\": \"31617185666\",\n        \"gender\": \"OTHER\",\n        \"mobileNumber\": \"31617185666\",\n        \"preferredLanguage\": \"EN\",\n        \"surnamePrefix\": \"aute qui\",\n        \"vip\": true\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/hierarchy/subscribers",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"subscribers"
									]
								},
								"description": "If you want to create both subscriber and user at the same time, you should fill userAdditionalInfo.\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "7f178510-96a4-4eec-bea6-31ddf65a39c5",
							"name": "Service Unavailable",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"groupId\": 14091765,\n    \"referenceNumber\": \"quis anim\",\n    \"subscriber\": {\n        \"surname\": \"Ut ipsum Duis occaecat\",\n        \"comments\": \"Excepte\",\n        \"email\": \"nirupam.anand@kpn.com\",\n        \"employeeNumber\": \"laborum sint id non in\",\n        \"firstName\": \"proident do\",\n        \"fixedNumber\": \"31617185666\",\n        \"gender\": \"OTHER\",\n        \"mobileNumber\": \"31617185666\",\n        \"preferredLanguage\": \"EN\",\n        \"surnamePrefix\": \"aute qui\",\n        \"vip\": true\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/hierarchy/subscribers",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"subscribers"
									]
								},
								"description": "If you want to create both subscriber and user at the same time, you should fill userAdditionalInfo.\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "4- Get service requests details",
					"id": "ee1b8720-e1d1-4b4d-8385-4db5f27a135d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/track-and-trace/service-requests/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"track-and-trace",
								"service-requests",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "49579418",
									"description": "Service request ID"
								}
							]
						},
						"description": "The possible keys of `attributes` map in response object:<div style='max-height: 400px; overflow: auto; width: 100%'>\n<dl>\n<dt><b>Attribute name</b></dt><dd><b>Meaning</b></dd>\n<dt>login</dt><dd>Login</dd>\n<dt>roles</dt><dd>Roles</dd>\n<dt>firstName</dt><dd>First name</dd>\n<dt>lastName</dt><dd>Last name</dd>\n<dt>surnamePrefix</dt><dd>Surname prefix</dd>\n<dt>email</dt><dd>E-mail</dd>\n<dt>dateOfBirth</dt><dd>Date of birth</dd>\n<dt>vip</dt><dd>VIP</dd>\n<dt>employeeNumber</dt><dd>Employee number</dd>\n<dt>gender</dt><dd>Gender</dd>\n<dt>salutation</dt><dd>Salutation</dd>\n<dt>preferredLanguage</dt><dd>Preferred language</dd>\n<dt>comments</dt><dd>Comments</dd>\n<dt>accesspointNameMSISDN</dt><dd>Mobile number</dd>\n<dt>accesspointNameSIM</dt><dd>SIM card number</dd>\n<dt>accesspointNameIMSI</dt><dd>IMSI</dd>\n<dt>IMEI</dt><dd>IMEI</dd>\n<dt>Hanset_IMEI_number</dt><dd>IMEI</dd>\n<dt>accesspointNameFixedNumber</dt><dd>Fixed Number</dd>\n<dt>activeTo</dt><dd>Active to</dd>\n<dt>contractName</dt><dd>Subscription or device name</dd>\n<dt>totalOnetimePrice</dt><dd>One time price</dd>\n<dt>totalRecurrentPrice</dt><dd>Recurring price</dd>\n<dt>deferredPrice</dt><dd>Deferred price</dd>\n<dt>newUiccId</dt><dd>New SIM card number</dd>\n<dt>movedGroupName</dt><dd>Moved account</dd>\n<dt>subscriberAccountId</dt><dd>Old location</dd>\n<dt>destinationAccount</dt><dd>New location</dd>\n<dt>selectedDuoUiccid</dt><dd>Selected Duo SIM card number</dd>\n<dt>projectId</dt><dd>Project ID</dd>\n<dt>new_fixed_number</dt><dd>New fixed number</dd>\n<dt>new_desk_number</dt><dd>New extension</dd>\n<dt>oldUserGroupName</dt><dd>Previous user group</dd>\n<dt>newUserGroupName</dt><dd>New user group</dd>\n<dt>vpnName</dt><dd>VPN name</dd>\n<dt>deskNumber</dt><dd>Extension</dd>\n<dt>accesspointNameDeskNumber</dt><dd>Extension</dd>\n<dt>mobileAddress</dt><dd>Mobile number</dd>\n<dt>enterpriseName</dt><dd>Enterprise name</dd>\n<dt>enterpriseID</dt><dd>Enterprise ID</dd>\n<dt>mobilityGroupName</dt><dd>Fixed-Mobile PBX name</dd>\n<dt>userGroupName</dt><dd>User group</dd>\n<dt>enterpriseUserGroup</dt><dd>User group</dd>\n<dt>initialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>sipAccountName</dt><dd>SIP account name</dd>\n<dt>accessInstanceAttributeinitialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>accesspointNameQueuePhoneNumber</dt><dd>Queue phone number</dd>\n<dt>accesspointNameSipAccountName</dt><dd>SIP account name</dd>\n<dt>subscriptionAmount</dt><dd>New subscription amount</dd>\n<dt>contract_contact_name</dt><dd>Contract contact person (name)</dd>\n<dt>contract_contact_phone</dt><dd>Contract contact person (phone)</dd>\n<dt>contract_contact_mail</dt><dd>Contract contact person (mail)</dd>\n<dt>financial_contact_name</dt><dd>Financial contact person (name)</dd>\n<dt>financial_contact_phone</dt><dd>Financial contact person (phone)</dd>\n<dt>financial_contact_mail</dt><dd>Financial contact person (mail)</dd>\n<dt>technical_contact_name</dt><dd>Technical contact Person (name)</dd>\n<dt>technical_contact_phone</dt><dd>Technical contact Person (phone)</dd>\n<dt>technical_contact_mail</dt><dd>Technical contact Person (mail)</dd>\n<dt>deviceOption</dt><dd>Device option</dd>\n<dt>deviceType_label</dt><dd>Device type</dd>\n<dt>macAddress</dt><dd>Mac address</dd>\n<dt>deviceName</dt><dd>Device name</dd>\n<dt>sacGroupAccountId_label</dt><dd>Location account</dd>\n<dt>groupId</dt><dd>Location</dd>\n<dt>vGroupMovingToID</dt><dd>New location</dd>\n<dt>pbxName</dt><dd>PBX</dd>\n<dt>groupCitemId_label</dt><dd>Group</dd>\n<dt>Fixed</dt><dd>Alternate fixed number</dd>\n<dt>DeskNumber</dt><dd>Alternate extension</dd>\n<dt>billing_retention_period</dt><dd>Financial data retention period (months)</dd>\n<dt>managedGroupName</dt><dd>Authorized for</dd>\n<dt>subscriptionType</dt><dd>Subscription type</dd>\n<dt>CurrentNetworkOperator</dt><dd>Current network operator</dd>\n<dt>CurrentServiceProvider</dt><dd>Current service provider</dd>\n<dt>Customer_name_at_current_provider</dt><dd>Customer name at current provider</dd>\n<dt>Current_contract_number</dt><dd>Customer number at current provider</dd>\n<dt>UIccId</dt><dd>Current SIM card number</dd>\n<dt>Initials</dt><dd>Initials</dd>\n<dt>FamilyNamePrefix</dt><dd>Family name prefix</dd>\n<dt>FamilyName</dt><dd>Family name</dd>\n<dt>delivery_TT_id</dt><dd>Delivery Track&trace ID</dd>\n<dt>IsAppleDEP</dt><dd>Apple DEP</dd>\n<dt>IsSamsungKNOX</dt><dd>Samsung KNOX</dd>\n<dt>keepCurrentSim</dt><dd>Keep existing SIM card</dd>\n<dt>Note</dt><dd>Note</dd>\n<dt>Porting_wish_date</dt><dd>Preferred transition date</dd>\n<dt>returnReason</dt><dd>Reason for return</dd>\n<dt>returnRemarks</dt><dd>Remarks</dd>\n<dt>companyName</dt><dd>Company name</dd>\n<dt>companyNamePronounciation</dt><dd>Comapny name pronounciation</dd>\n<dt>businessVoiceMailMessageText</dt><dd>Chosen business voicemail message</dd>\n</dl>\n<div>\n<style type=\"text/css\">  dl {\n    display: flex;\n    flex-flow: row wrap;\n  }\n  dt {\n    flex-basis: 20%;\n    text-align: right;\n  }\n  dd {\n    flex-basis: 70%;\n    flex-grow: 1;\n  }\n</style>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_orders_track_and_trace</li><li>privileges_orders_authorization</li></ul>"
					},
					"response": [
						{
							"id": "8531c6f1-d9dc-44a6-920c-dafa24d75994",
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/track-and-trace/service-requests/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"track-and-trace",
										"service-requests",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "49579418",
											"description": "Service request ID"
										}
									]
								},
								"description": "The possible keys of `attributes` map in response object:<div style='max-height: 400px; overflow: auto; width: 100%'>\n<dl>\n<dt><b>Attribute name</b></dt><dd><b>Meaning</b></dd>\n<dt>login</dt><dd>Login</dd>\n<dt>roles</dt><dd>Roles</dd>\n<dt>firstName</dt><dd>First name</dd>\n<dt>lastName</dt><dd>Last name</dd>\n<dt>surnamePrefix</dt><dd>Surname prefix</dd>\n<dt>email</dt><dd>E-mail</dd>\n<dt>dateOfBirth</dt><dd>Date of birth</dd>\n<dt>vip</dt><dd>VIP</dd>\n<dt>employeeNumber</dt><dd>Employee number</dd>\n<dt>gender</dt><dd>Gender</dd>\n<dt>salutation</dt><dd>Salutation</dd>\n<dt>preferredLanguage</dt><dd>Preferred language</dd>\n<dt>comments</dt><dd>Comments</dd>\n<dt>accesspointNameMSISDN</dt><dd>Mobile number</dd>\n<dt>accesspointNameSIM</dt><dd>SIM card number</dd>\n<dt>accesspointNameIMSI</dt><dd>IMSI</dd>\n<dt>IMEI</dt><dd>IMEI</dd>\n<dt>Hanset_IMEI_number</dt><dd>IMEI</dd>\n<dt>accesspointNameFixedNumber</dt><dd>Fixed Number</dd>\n<dt>activeTo</dt><dd>Active to</dd>\n<dt>contractName</dt><dd>Subscription or device name</dd>\n<dt>totalOnetimePrice</dt><dd>One time price</dd>\n<dt>totalRecurrentPrice</dt><dd>Recurring price</dd>\n<dt>deferredPrice</dt><dd>Deferred price</dd>\n<dt>newUiccId</dt><dd>New SIM card number</dd>\n<dt>movedGroupName</dt><dd>Moved account</dd>\n<dt>subscriberAccountId</dt><dd>Old location</dd>\n<dt>destinationAccount</dt><dd>New location</dd>\n<dt>selectedDuoUiccid</dt><dd>Selected Duo SIM card number</dd>\n<dt>projectId</dt><dd>Project ID</dd>\n<dt>new_fixed_number</dt><dd>New fixed number</dd>\n<dt>new_desk_number</dt><dd>New extension</dd>\n<dt>oldUserGroupName</dt><dd>Previous user group</dd>\n<dt>newUserGroupName</dt><dd>New user group</dd>\n<dt>vpnName</dt><dd>VPN name</dd>\n<dt>deskNumber</dt><dd>Extension</dd>\n<dt>accesspointNameDeskNumber</dt><dd>Extension</dd>\n<dt>mobileAddress</dt><dd>Mobile number</dd>\n<dt>enterpriseName</dt><dd>Enterprise name</dd>\n<dt>enterpriseID</dt><dd>Enterprise ID</dd>\n<dt>mobilityGroupName</dt><dd>Fixed-Mobile PBX name</dd>\n<dt>userGroupName</dt><dd>User group</dd>\n<dt>enterpriseUserGroup</dt><dd>User group</dd>\n<dt>initialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>sipAccountName</dt><dd>SIP account name</dd>\n<dt>accessInstanceAttributeinitialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>accesspointNameQueuePhoneNumber</dt><dd>Queue phone number</dd>\n<dt>accesspointNameSipAccountName</dt><dd>SIP account name</dd>\n<dt>subscriptionAmount</dt><dd>New subscription amount</dd>\n<dt>contract_contact_name</dt><dd>Contract contact person (name)</dd>\n<dt>contract_contact_phone</dt><dd>Contract contact person (phone)</dd>\n<dt>contract_contact_mail</dt><dd>Contract contact person (mail)</dd>\n<dt>financial_contact_name</dt><dd>Financial contact person (name)</dd>\n<dt>financial_contact_phone</dt><dd>Financial contact person (phone)</dd>\n<dt>financial_contact_mail</dt><dd>Financial contact person (mail)</dd>\n<dt>technical_contact_name</dt><dd>Technical contact Person (name)</dd>\n<dt>technical_contact_phone</dt><dd>Technical contact Person (phone)</dd>\n<dt>technical_contact_mail</dt><dd>Technical contact Person (mail)</dd>\n<dt>deviceOption</dt><dd>Device option</dd>\n<dt>deviceType_label</dt><dd>Device type</dd>\n<dt>macAddress</dt><dd>Mac address</dd>\n<dt>deviceName</dt><dd>Device name</dd>\n<dt>sacGroupAccountId_label</dt><dd>Location account</dd>\n<dt>groupId</dt><dd>Location</dd>\n<dt>vGroupMovingToID</dt><dd>New location</dd>\n<dt>pbxName</dt><dd>PBX</dd>\n<dt>groupCitemId_label</dt><dd>Group</dd>\n<dt>Fixed</dt><dd>Alternate fixed number</dd>\n<dt>DeskNumber</dt><dd>Alternate extension</dd>\n<dt>billing_retention_period</dt><dd>Financial data retention period (months)</dd>\n<dt>managedGroupName</dt><dd>Authorized for</dd>\n<dt>subscriptionType</dt><dd>Subscription type</dd>\n<dt>CurrentNetworkOperator</dt><dd>Current network operator</dd>\n<dt>CurrentServiceProvider</dt><dd>Current service provider</dd>\n<dt>Customer_name_at_current_provider</dt><dd>Customer name at current provider</dd>\n<dt>Current_contract_number</dt><dd>Customer number at current provider</dd>\n<dt>UIccId</dt><dd>Current SIM card number</dd>\n<dt>Initials</dt><dd>Initials</dd>\n<dt>FamilyNamePrefix</dt><dd>Family name prefix</dd>\n<dt>FamilyName</dt><dd>Family name</dd>\n<dt>delivery_TT_id</dt><dd>Delivery Track&trace ID</dd>\n<dt>IsAppleDEP</dt><dd>Apple DEP</dd>\n<dt>IsSamsungKNOX</dt><dd>Samsung KNOX</dd>\n<dt>keepCurrentSim</dt><dd>Keep existing SIM card</dd>\n<dt>Note</dt><dd>Note</dd>\n<dt>Porting_wish_date</dt><dd>Preferred transition date</dd>\n<dt>returnReason</dt><dd>Reason for return</dd>\n<dt>returnRemarks</dt><dd>Remarks</dd>\n<dt>companyName</dt><dd>Company name</dd>\n<dt>companyNamePronounciation</dt><dd>Comapny name pronounciation</dd>\n<dt>businessVoiceMailMessageText</dt><dd>Chosen business voicemail message</dd>\n</dl>\n<div>\n<style type=\"text/css\">  dl {\n    display: flex;\n    flex-flow: row wrap;\n  }\n  dt {\n    flex-basis: 20%;\n    text-align: right;\n  }\n  dd {\n    flex-basis: 70%;\n    flex-grow: 1;\n  }\n</style>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_orders_track_and_trace</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "52d134fa-c1cd-4de1-87f3-c5d8202e5880",
							"name": "Bad Request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/track-and-trace/service-requests/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"track-and-trace",
										"service-requests",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "49579418",
											"description": "Service request ID"
										}
									]
								},
								"description": "The possible keys of `attributes` map in response object:<div style='max-height: 400px; overflow: auto; width: 100%'>\n<dl>\n<dt><b>Attribute name</b></dt><dd><b>Meaning</b></dd>\n<dt>login</dt><dd>Login</dd>\n<dt>roles</dt><dd>Roles</dd>\n<dt>firstName</dt><dd>First name</dd>\n<dt>lastName</dt><dd>Last name</dd>\n<dt>surnamePrefix</dt><dd>Surname prefix</dd>\n<dt>email</dt><dd>E-mail</dd>\n<dt>dateOfBirth</dt><dd>Date of birth</dd>\n<dt>vip</dt><dd>VIP</dd>\n<dt>employeeNumber</dt><dd>Employee number</dd>\n<dt>gender</dt><dd>Gender</dd>\n<dt>salutation</dt><dd>Salutation</dd>\n<dt>preferredLanguage</dt><dd>Preferred language</dd>\n<dt>comments</dt><dd>Comments</dd>\n<dt>accesspointNameMSISDN</dt><dd>Mobile number</dd>\n<dt>accesspointNameSIM</dt><dd>SIM card number</dd>\n<dt>accesspointNameIMSI</dt><dd>IMSI</dd>\n<dt>IMEI</dt><dd>IMEI</dd>\n<dt>Hanset_IMEI_number</dt><dd>IMEI</dd>\n<dt>accesspointNameFixedNumber</dt><dd>Fixed Number</dd>\n<dt>activeTo</dt><dd>Active to</dd>\n<dt>contractName</dt><dd>Subscription or device name</dd>\n<dt>totalOnetimePrice</dt><dd>One time price</dd>\n<dt>totalRecurrentPrice</dt><dd>Recurring price</dd>\n<dt>deferredPrice</dt><dd>Deferred price</dd>\n<dt>newUiccId</dt><dd>New SIM card number</dd>\n<dt>movedGroupName</dt><dd>Moved account</dd>\n<dt>subscriberAccountId</dt><dd>Old location</dd>\n<dt>destinationAccount</dt><dd>New location</dd>\n<dt>selectedDuoUiccid</dt><dd>Selected Duo SIM card number</dd>\n<dt>projectId</dt><dd>Project ID</dd>\n<dt>new_fixed_number</dt><dd>New fixed number</dd>\n<dt>new_desk_number</dt><dd>New extension</dd>\n<dt>oldUserGroupName</dt><dd>Previous user group</dd>\n<dt>newUserGroupName</dt><dd>New user group</dd>\n<dt>vpnName</dt><dd>VPN name</dd>\n<dt>deskNumber</dt><dd>Extension</dd>\n<dt>accesspointNameDeskNumber</dt><dd>Extension</dd>\n<dt>mobileAddress</dt><dd>Mobile number</dd>\n<dt>enterpriseName</dt><dd>Enterprise name</dd>\n<dt>enterpriseID</dt><dd>Enterprise ID</dd>\n<dt>mobilityGroupName</dt><dd>Fixed-Mobile PBX name</dd>\n<dt>userGroupName</dt><dd>User group</dd>\n<dt>enterpriseUserGroup</dt><dd>User group</dd>\n<dt>initialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>sipAccountName</dt><dd>SIP account name</dd>\n<dt>accessInstanceAttributeinitialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>accesspointNameQueuePhoneNumber</dt><dd>Queue phone number</dd>\n<dt>accesspointNameSipAccountName</dt><dd>SIP account name</dd>\n<dt>subscriptionAmount</dt><dd>New subscription amount</dd>\n<dt>contract_contact_name</dt><dd>Contract contact person (name)</dd>\n<dt>contract_contact_phone</dt><dd>Contract contact person (phone)</dd>\n<dt>contract_contact_mail</dt><dd>Contract contact person (mail)</dd>\n<dt>financial_contact_name</dt><dd>Financial contact person (name)</dd>\n<dt>financial_contact_phone</dt><dd>Financial contact person (phone)</dd>\n<dt>financial_contact_mail</dt><dd>Financial contact person (mail)</dd>\n<dt>technical_contact_name</dt><dd>Technical contact Person (name)</dd>\n<dt>technical_contact_phone</dt><dd>Technical contact Person (phone)</dd>\n<dt>technical_contact_mail</dt><dd>Technical contact Person (mail)</dd>\n<dt>deviceOption</dt><dd>Device option</dd>\n<dt>deviceType_label</dt><dd>Device type</dd>\n<dt>macAddress</dt><dd>Mac address</dd>\n<dt>deviceName</dt><dd>Device name</dd>\n<dt>sacGroupAccountId_label</dt><dd>Location account</dd>\n<dt>groupId</dt><dd>Location</dd>\n<dt>vGroupMovingToID</dt><dd>New location</dd>\n<dt>pbxName</dt><dd>PBX</dd>\n<dt>groupCitemId_label</dt><dd>Group</dd>\n<dt>Fixed</dt><dd>Alternate fixed number</dd>\n<dt>DeskNumber</dt><dd>Alternate extension</dd>\n<dt>billing_retention_period</dt><dd>Financial data retention period (months)</dd>\n<dt>managedGroupName</dt><dd>Authorized for</dd>\n<dt>subscriptionType</dt><dd>Subscription type</dd>\n<dt>CurrentNetworkOperator</dt><dd>Current network operator</dd>\n<dt>CurrentServiceProvider</dt><dd>Current service provider</dd>\n<dt>Customer_name_at_current_provider</dt><dd>Customer name at current provider</dd>\n<dt>Current_contract_number</dt><dd>Customer number at current provider</dd>\n<dt>UIccId</dt><dd>Current SIM card number</dd>\n<dt>Initials</dt><dd>Initials</dd>\n<dt>FamilyNamePrefix</dt><dd>Family name prefix</dd>\n<dt>FamilyName</dt><dd>Family name</dd>\n<dt>delivery_TT_id</dt><dd>Delivery Track&trace ID</dd>\n<dt>IsAppleDEP</dt><dd>Apple DEP</dd>\n<dt>IsSamsungKNOX</dt><dd>Samsung KNOX</dd>\n<dt>keepCurrentSim</dt><dd>Keep existing SIM card</dd>\n<dt>Note</dt><dd>Note</dd>\n<dt>Porting_wish_date</dt><dd>Preferred transition date</dd>\n<dt>returnReason</dt><dd>Reason for return</dd>\n<dt>returnRemarks</dt><dd>Remarks</dd>\n<dt>companyName</dt><dd>Company name</dd>\n<dt>companyNamePronounciation</dt><dd>Comapny name pronounciation</dd>\n<dt>businessVoiceMailMessageText</dt><dd>Chosen business voicemail message</dd>\n</dl>\n<div>\n<style type=\"text/css\">  dl {\n    display: flex;\n    flex-flow: row wrap;\n  }\n  dt {\n    flex-basis: 20%;\n    text-align: right;\n  }\n  dd {\n    flex-basis: 70%;\n    flex-grow: 1;\n  }\n</style>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_orders_track_and_trace</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "40787d2f-7733-4544-b59b-0c81a93acf69",
							"name": "Unauthorized",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/track-and-trace/service-requests/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"track-and-trace",
										"service-requests",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "49579418",
											"description": "Service request ID"
										}
									]
								},
								"description": "The possible keys of `attributes` map in response object:<div style='max-height: 400px; overflow: auto; width: 100%'>\n<dl>\n<dt><b>Attribute name</b></dt><dd><b>Meaning</b></dd>\n<dt>login</dt><dd>Login</dd>\n<dt>roles</dt><dd>Roles</dd>\n<dt>firstName</dt><dd>First name</dd>\n<dt>lastName</dt><dd>Last name</dd>\n<dt>surnamePrefix</dt><dd>Surname prefix</dd>\n<dt>email</dt><dd>E-mail</dd>\n<dt>dateOfBirth</dt><dd>Date of birth</dd>\n<dt>vip</dt><dd>VIP</dd>\n<dt>employeeNumber</dt><dd>Employee number</dd>\n<dt>gender</dt><dd>Gender</dd>\n<dt>salutation</dt><dd>Salutation</dd>\n<dt>preferredLanguage</dt><dd>Preferred language</dd>\n<dt>comments</dt><dd>Comments</dd>\n<dt>accesspointNameMSISDN</dt><dd>Mobile number</dd>\n<dt>accesspointNameSIM</dt><dd>SIM card number</dd>\n<dt>accesspointNameIMSI</dt><dd>IMSI</dd>\n<dt>IMEI</dt><dd>IMEI</dd>\n<dt>Hanset_IMEI_number</dt><dd>IMEI</dd>\n<dt>accesspointNameFixedNumber</dt><dd>Fixed Number</dd>\n<dt>activeTo</dt><dd>Active to</dd>\n<dt>contractName</dt><dd>Subscription or device name</dd>\n<dt>totalOnetimePrice</dt><dd>One time price</dd>\n<dt>totalRecurrentPrice</dt><dd>Recurring price</dd>\n<dt>deferredPrice</dt><dd>Deferred price</dd>\n<dt>newUiccId</dt><dd>New SIM card number</dd>\n<dt>movedGroupName</dt><dd>Moved account</dd>\n<dt>subscriberAccountId</dt><dd>Old location</dd>\n<dt>destinationAccount</dt><dd>New location</dd>\n<dt>selectedDuoUiccid</dt><dd>Selected Duo SIM card number</dd>\n<dt>projectId</dt><dd>Project ID</dd>\n<dt>new_fixed_number</dt><dd>New fixed number</dd>\n<dt>new_desk_number</dt><dd>New extension</dd>\n<dt>oldUserGroupName</dt><dd>Previous user group</dd>\n<dt>newUserGroupName</dt><dd>New user group</dd>\n<dt>vpnName</dt><dd>VPN name</dd>\n<dt>deskNumber</dt><dd>Extension</dd>\n<dt>accesspointNameDeskNumber</dt><dd>Extension</dd>\n<dt>mobileAddress</dt><dd>Mobile number</dd>\n<dt>enterpriseName</dt><dd>Enterprise name</dd>\n<dt>enterpriseID</dt><dd>Enterprise ID</dd>\n<dt>mobilityGroupName</dt><dd>Fixed-Mobile PBX name</dd>\n<dt>userGroupName</dt><dd>User group</dd>\n<dt>enterpriseUserGroup</dt><dd>User group</dd>\n<dt>initialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>sipAccountName</dt><dd>SIP account name</dd>\n<dt>accessInstanceAttributeinitialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>accesspointNameQueuePhoneNumber</dt><dd>Queue phone number</dd>\n<dt>accesspointNameSipAccountName</dt><dd>SIP account name</dd>\n<dt>subscriptionAmount</dt><dd>New subscription amount</dd>\n<dt>contract_contact_name</dt><dd>Contract contact person (name)</dd>\n<dt>contract_contact_phone</dt><dd>Contract contact person (phone)</dd>\n<dt>contract_contact_mail</dt><dd>Contract contact person (mail)</dd>\n<dt>financial_contact_name</dt><dd>Financial contact person (name)</dd>\n<dt>financial_contact_phone</dt><dd>Financial contact person (phone)</dd>\n<dt>financial_contact_mail</dt><dd>Financial contact person (mail)</dd>\n<dt>technical_contact_name</dt><dd>Technical contact Person (name)</dd>\n<dt>technical_contact_phone</dt><dd>Technical contact Person (phone)</dd>\n<dt>technical_contact_mail</dt><dd>Technical contact Person (mail)</dd>\n<dt>deviceOption</dt><dd>Device option</dd>\n<dt>deviceType_label</dt><dd>Device type</dd>\n<dt>macAddress</dt><dd>Mac address</dd>\n<dt>deviceName</dt><dd>Device name</dd>\n<dt>sacGroupAccountId_label</dt><dd>Location account</dd>\n<dt>groupId</dt><dd>Location</dd>\n<dt>vGroupMovingToID</dt><dd>New location</dd>\n<dt>pbxName</dt><dd>PBX</dd>\n<dt>groupCitemId_label</dt><dd>Group</dd>\n<dt>Fixed</dt><dd>Alternate fixed number</dd>\n<dt>DeskNumber</dt><dd>Alternate extension</dd>\n<dt>billing_retention_period</dt><dd>Financial data retention period (months)</dd>\n<dt>managedGroupName</dt><dd>Authorized for</dd>\n<dt>subscriptionType</dt><dd>Subscription type</dd>\n<dt>CurrentNetworkOperator</dt><dd>Current network operator</dd>\n<dt>CurrentServiceProvider</dt><dd>Current service provider</dd>\n<dt>Customer_name_at_current_provider</dt><dd>Customer name at current provider</dd>\n<dt>Current_contract_number</dt><dd>Customer number at current provider</dd>\n<dt>UIccId</dt><dd>Current SIM card number</dd>\n<dt>Initials</dt><dd>Initials</dd>\n<dt>FamilyNamePrefix</dt><dd>Family name prefix</dd>\n<dt>FamilyName</dt><dd>Family name</dd>\n<dt>delivery_TT_id</dt><dd>Delivery Track&trace ID</dd>\n<dt>IsAppleDEP</dt><dd>Apple DEP</dd>\n<dt>IsSamsungKNOX</dt><dd>Samsung KNOX</dd>\n<dt>keepCurrentSim</dt><dd>Keep existing SIM card</dd>\n<dt>Note</dt><dd>Note</dd>\n<dt>Porting_wish_date</dt><dd>Preferred transition date</dd>\n<dt>returnReason</dt><dd>Reason for return</dd>\n<dt>returnRemarks</dt><dd>Remarks</dd>\n<dt>companyName</dt><dd>Company name</dd>\n<dt>companyNamePronounciation</dt><dd>Comapny name pronounciation</dd>\n<dt>businessVoiceMailMessageText</dt><dd>Chosen business voicemail message</dd>\n</dl>\n<div>\n<style type=\"text/css\">  dl {\n    display: flex;\n    flex-flow: row wrap;\n  }\n  dt {\n    flex-basis: 20%;\n    text-align: right;\n  }\n  dd {\n    flex-basis: 70%;\n    flex-grow: 1;\n  }\n</style>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_orders_track_and_trace</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "f7e3d386-b873-4f73-9a3b-a72206590c0c",
							"name": "Forbidden",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/track-and-trace/service-requests/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"track-and-trace",
										"service-requests",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "49579418",
											"description": "Service request ID"
										}
									]
								},
								"description": "The possible keys of `attributes` map in response object:<div style='max-height: 400px; overflow: auto; width: 100%'>\n<dl>\n<dt><b>Attribute name</b></dt><dd><b>Meaning</b></dd>\n<dt>login</dt><dd>Login</dd>\n<dt>roles</dt><dd>Roles</dd>\n<dt>firstName</dt><dd>First name</dd>\n<dt>lastName</dt><dd>Last name</dd>\n<dt>surnamePrefix</dt><dd>Surname prefix</dd>\n<dt>email</dt><dd>E-mail</dd>\n<dt>dateOfBirth</dt><dd>Date of birth</dd>\n<dt>vip</dt><dd>VIP</dd>\n<dt>employeeNumber</dt><dd>Employee number</dd>\n<dt>gender</dt><dd>Gender</dd>\n<dt>salutation</dt><dd>Salutation</dd>\n<dt>preferredLanguage</dt><dd>Preferred language</dd>\n<dt>comments</dt><dd>Comments</dd>\n<dt>accesspointNameMSISDN</dt><dd>Mobile number</dd>\n<dt>accesspointNameSIM</dt><dd>SIM card number</dd>\n<dt>accesspointNameIMSI</dt><dd>IMSI</dd>\n<dt>IMEI</dt><dd>IMEI</dd>\n<dt>Hanset_IMEI_number</dt><dd>IMEI</dd>\n<dt>accesspointNameFixedNumber</dt><dd>Fixed Number</dd>\n<dt>activeTo</dt><dd>Active to</dd>\n<dt>contractName</dt><dd>Subscription or device name</dd>\n<dt>totalOnetimePrice</dt><dd>One time price</dd>\n<dt>totalRecurrentPrice</dt><dd>Recurring price</dd>\n<dt>deferredPrice</dt><dd>Deferred price</dd>\n<dt>newUiccId</dt><dd>New SIM card number</dd>\n<dt>movedGroupName</dt><dd>Moved account</dd>\n<dt>subscriberAccountId</dt><dd>Old location</dd>\n<dt>destinationAccount</dt><dd>New location</dd>\n<dt>selectedDuoUiccid</dt><dd>Selected Duo SIM card number</dd>\n<dt>projectId</dt><dd>Project ID</dd>\n<dt>new_fixed_number</dt><dd>New fixed number</dd>\n<dt>new_desk_number</dt><dd>New extension</dd>\n<dt>oldUserGroupName</dt><dd>Previous user group</dd>\n<dt>newUserGroupName</dt><dd>New user group</dd>\n<dt>vpnName</dt><dd>VPN name</dd>\n<dt>deskNumber</dt><dd>Extension</dd>\n<dt>accesspointNameDeskNumber</dt><dd>Extension</dd>\n<dt>mobileAddress</dt><dd>Mobile number</dd>\n<dt>enterpriseName</dt><dd>Enterprise name</dd>\n<dt>enterpriseID</dt><dd>Enterprise ID</dd>\n<dt>mobilityGroupName</dt><dd>Fixed-Mobile PBX name</dd>\n<dt>userGroupName</dt><dd>User group</dd>\n<dt>enterpriseUserGroup</dt><dd>User group</dd>\n<dt>initialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>sipAccountName</dt><dd>SIP account name</dd>\n<dt>accessInstanceAttributeinitialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>accesspointNameQueuePhoneNumber</dt><dd>Queue phone number</dd>\n<dt>accesspointNameSipAccountName</dt><dd>SIP account name</dd>\n<dt>subscriptionAmount</dt><dd>New subscription amount</dd>\n<dt>contract_contact_name</dt><dd>Contract contact person (name)</dd>\n<dt>contract_contact_phone</dt><dd>Contract contact person (phone)</dd>\n<dt>contract_contact_mail</dt><dd>Contract contact person (mail)</dd>\n<dt>financial_contact_name</dt><dd>Financial contact person (name)</dd>\n<dt>financial_contact_phone</dt><dd>Financial contact person (phone)</dd>\n<dt>financial_contact_mail</dt><dd>Financial contact person (mail)</dd>\n<dt>technical_contact_name</dt><dd>Technical contact Person (name)</dd>\n<dt>technical_contact_phone</dt><dd>Technical contact Person (phone)</dd>\n<dt>technical_contact_mail</dt><dd>Technical contact Person (mail)</dd>\n<dt>deviceOption</dt><dd>Device option</dd>\n<dt>deviceType_label</dt><dd>Device type</dd>\n<dt>macAddress</dt><dd>Mac address</dd>\n<dt>deviceName</dt><dd>Device name</dd>\n<dt>sacGroupAccountId_label</dt><dd>Location account</dd>\n<dt>groupId</dt><dd>Location</dd>\n<dt>vGroupMovingToID</dt><dd>New location</dd>\n<dt>pbxName</dt><dd>PBX</dd>\n<dt>groupCitemId_label</dt><dd>Group</dd>\n<dt>Fixed</dt><dd>Alternate fixed number</dd>\n<dt>DeskNumber</dt><dd>Alternate extension</dd>\n<dt>billing_retention_period</dt><dd>Financial data retention period (months)</dd>\n<dt>managedGroupName</dt><dd>Authorized for</dd>\n<dt>subscriptionType</dt><dd>Subscription type</dd>\n<dt>CurrentNetworkOperator</dt><dd>Current network operator</dd>\n<dt>CurrentServiceProvider</dt><dd>Current service provider</dd>\n<dt>Customer_name_at_current_provider</dt><dd>Customer name at current provider</dd>\n<dt>Current_contract_number</dt><dd>Customer number at current provider</dd>\n<dt>UIccId</dt><dd>Current SIM card number</dd>\n<dt>Initials</dt><dd>Initials</dd>\n<dt>FamilyNamePrefix</dt><dd>Family name prefix</dd>\n<dt>FamilyName</dt><dd>Family name</dd>\n<dt>delivery_TT_id</dt><dd>Delivery Track&trace ID</dd>\n<dt>IsAppleDEP</dt><dd>Apple DEP</dd>\n<dt>IsSamsungKNOX</dt><dd>Samsung KNOX</dd>\n<dt>keepCurrentSim</dt><dd>Keep existing SIM card</dd>\n<dt>Note</dt><dd>Note</dd>\n<dt>Porting_wish_date</dt><dd>Preferred transition date</dd>\n<dt>returnReason</dt><dd>Reason for return</dd>\n<dt>returnRemarks</dt><dd>Remarks</dd>\n<dt>companyName</dt><dd>Company name</dd>\n<dt>companyNamePronounciation</dt><dd>Comapny name pronounciation</dd>\n<dt>businessVoiceMailMessageText</dt><dd>Chosen business voicemail message</dd>\n</dl>\n<div>\n<style type=\"text/css\">  dl {\n    display: flex;\n    flex-flow: row wrap;\n  }\n  dt {\n    flex-basis: 20%;\n    text-align: right;\n  }\n  dd {\n    flex-basis: 70%;\n    flex-grow: 1;\n  }\n</style>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_orders_track_and_trace</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "08eb8833-ca30-490a-ad17-e025c7df8e0f",
							"name": "Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/track-and-trace/service-requests/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"track-and-trace",
										"service-requests",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "49579418",
											"description": "Service request ID"
										}
									]
								},
								"description": "The possible keys of `attributes` map in response object:<div style='max-height: 400px; overflow: auto; width: 100%'>\n<dl>\n<dt><b>Attribute name</b></dt><dd><b>Meaning</b></dd>\n<dt>login</dt><dd>Login</dd>\n<dt>roles</dt><dd>Roles</dd>\n<dt>firstName</dt><dd>First name</dd>\n<dt>lastName</dt><dd>Last name</dd>\n<dt>surnamePrefix</dt><dd>Surname prefix</dd>\n<dt>email</dt><dd>E-mail</dd>\n<dt>dateOfBirth</dt><dd>Date of birth</dd>\n<dt>vip</dt><dd>VIP</dd>\n<dt>employeeNumber</dt><dd>Employee number</dd>\n<dt>gender</dt><dd>Gender</dd>\n<dt>salutation</dt><dd>Salutation</dd>\n<dt>preferredLanguage</dt><dd>Preferred language</dd>\n<dt>comments</dt><dd>Comments</dd>\n<dt>accesspointNameMSISDN</dt><dd>Mobile number</dd>\n<dt>accesspointNameSIM</dt><dd>SIM card number</dd>\n<dt>accesspointNameIMSI</dt><dd>IMSI</dd>\n<dt>IMEI</dt><dd>IMEI</dd>\n<dt>Hanset_IMEI_number</dt><dd>IMEI</dd>\n<dt>accesspointNameFixedNumber</dt><dd>Fixed Number</dd>\n<dt>activeTo</dt><dd>Active to</dd>\n<dt>contractName</dt><dd>Subscription or device name</dd>\n<dt>totalOnetimePrice</dt><dd>One time price</dd>\n<dt>totalRecurrentPrice</dt><dd>Recurring price</dd>\n<dt>deferredPrice</dt><dd>Deferred price</dd>\n<dt>newUiccId</dt><dd>New SIM card number</dd>\n<dt>movedGroupName</dt><dd>Moved account</dd>\n<dt>subscriberAccountId</dt><dd>Old location</dd>\n<dt>destinationAccount</dt><dd>New location</dd>\n<dt>selectedDuoUiccid</dt><dd>Selected Duo SIM card number</dd>\n<dt>projectId</dt><dd>Project ID</dd>\n<dt>new_fixed_number</dt><dd>New fixed number</dd>\n<dt>new_desk_number</dt><dd>New extension</dd>\n<dt>oldUserGroupName</dt><dd>Previous user group</dd>\n<dt>newUserGroupName</dt><dd>New user group</dd>\n<dt>vpnName</dt><dd>VPN name</dd>\n<dt>deskNumber</dt><dd>Extension</dd>\n<dt>accesspointNameDeskNumber</dt><dd>Extension</dd>\n<dt>mobileAddress</dt><dd>Mobile number</dd>\n<dt>enterpriseName</dt><dd>Enterprise name</dd>\n<dt>enterpriseID</dt><dd>Enterprise ID</dd>\n<dt>mobilityGroupName</dt><dd>Fixed-Mobile PBX name</dd>\n<dt>userGroupName</dt><dd>User group</dd>\n<dt>enterpriseUserGroup</dt><dd>User group</dd>\n<dt>initialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>sipAccountName</dt><dd>SIP account name</dd>\n<dt>accessInstanceAttributeinitialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>accesspointNameQueuePhoneNumber</dt><dd>Queue phone number</dd>\n<dt>accesspointNameSipAccountName</dt><dd>SIP account name</dd>\n<dt>subscriptionAmount</dt><dd>New subscription amount</dd>\n<dt>contract_contact_name</dt><dd>Contract contact person (name)</dd>\n<dt>contract_contact_phone</dt><dd>Contract contact person (phone)</dd>\n<dt>contract_contact_mail</dt><dd>Contract contact person (mail)</dd>\n<dt>financial_contact_name</dt><dd>Financial contact person (name)</dd>\n<dt>financial_contact_phone</dt><dd>Financial contact person (phone)</dd>\n<dt>financial_contact_mail</dt><dd>Financial contact person (mail)</dd>\n<dt>technical_contact_name</dt><dd>Technical contact Person (name)</dd>\n<dt>technical_contact_phone</dt><dd>Technical contact Person (phone)</dd>\n<dt>technical_contact_mail</dt><dd>Technical contact Person (mail)</dd>\n<dt>deviceOption</dt><dd>Device option</dd>\n<dt>deviceType_label</dt><dd>Device type</dd>\n<dt>macAddress</dt><dd>Mac address</dd>\n<dt>deviceName</dt><dd>Device name</dd>\n<dt>sacGroupAccountId_label</dt><dd>Location account</dd>\n<dt>groupId</dt><dd>Location</dd>\n<dt>vGroupMovingToID</dt><dd>New location</dd>\n<dt>pbxName</dt><dd>PBX</dd>\n<dt>groupCitemId_label</dt><dd>Group</dd>\n<dt>Fixed</dt><dd>Alternate fixed number</dd>\n<dt>DeskNumber</dt><dd>Alternate extension</dd>\n<dt>billing_retention_period</dt><dd>Financial data retention period (months)</dd>\n<dt>managedGroupName</dt><dd>Authorized for</dd>\n<dt>subscriptionType</dt><dd>Subscription type</dd>\n<dt>CurrentNetworkOperator</dt><dd>Current network operator</dd>\n<dt>CurrentServiceProvider</dt><dd>Current service provider</dd>\n<dt>Customer_name_at_current_provider</dt><dd>Customer name at current provider</dd>\n<dt>Current_contract_number</dt><dd>Customer number at current provider</dd>\n<dt>UIccId</dt><dd>Current SIM card number</dd>\n<dt>Initials</dt><dd>Initials</dd>\n<dt>FamilyNamePrefix</dt><dd>Family name prefix</dd>\n<dt>FamilyName</dt><dd>Family name</dd>\n<dt>delivery_TT_id</dt><dd>Delivery Track&trace ID</dd>\n<dt>IsAppleDEP</dt><dd>Apple DEP</dd>\n<dt>IsSamsungKNOX</dt><dd>Samsung KNOX</dd>\n<dt>keepCurrentSim</dt><dd>Keep existing SIM card</dd>\n<dt>Note</dt><dd>Note</dd>\n<dt>Porting_wish_date</dt><dd>Preferred transition date</dd>\n<dt>returnReason</dt><dd>Reason for return</dd>\n<dt>returnRemarks</dt><dd>Remarks</dd>\n<dt>companyName</dt><dd>Company name</dd>\n<dt>companyNamePronounciation</dt><dd>Comapny name pronounciation</dd>\n<dt>businessVoiceMailMessageText</dt><dd>Chosen business voicemail message</dd>\n</dl>\n<div>\n<style type=\"text/css\">  dl {\n    display: flex;\n    flex-flow: row wrap;\n  }\n  dt {\n    flex-basis: 20%;\n    text-align: right;\n  }\n  dd {\n    flex-basis: 70%;\n    flex-grow: 1;\n  }\n</style>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_orders_track_and_trace</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "cf078a57-3257-4aab-a215-7ae74e655ef4",
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/track-and-trace/service-requests/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"track-and-trace",
										"service-requests",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "49579418",
											"description": "Service request ID"
										}
									]
								},
								"description": "The possible keys of `attributes` map in response object:<div style='max-height: 400px; overflow: auto; width: 100%'>\n<dl>\n<dt><b>Attribute name</b></dt><dd><b>Meaning</b></dd>\n<dt>login</dt><dd>Login</dd>\n<dt>roles</dt><dd>Roles</dd>\n<dt>firstName</dt><dd>First name</dd>\n<dt>lastName</dt><dd>Last name</dd>\n<dt>surnamePrefix</dt><dd>Surname prefix</dd>\n<dt>email</dt><dd>E-mail</dd>\n<dt>dateOfBirth</dt><dd>Date of birth</dd>\n<dt>vip</dt><dd>VIP</dd>\n<dt>employeeNumber</dt><dd>Employee number</dd>\n<dt>gender</dt><dd>Gender</dd>\n<dt>salutation</dt><dd>Salutation</dd>\n<dt>preferredLanguage</dt><dd>Preferred language</dd>\n<dt>comments</dt><dd>Comments</dd>\n<dt>accesspointNameMSISDN</dt><dd>Mobile number</dd>\n<dt>accesspointNameSIM</dt><dd>SIM card number</dd>\n<dt>accesspointNameIMSI</dt><dd>IMSI</dd>\n<dt>IMEI</dt><dd>IMEI</dd>\n<dt>Hanset_IMEI_number</dt><dd>IMEI</dd>\n<dt>accesspointNameFixedNumber</dt><dd>Fixed Number</dd>\n<dt>activeTo</dt><dd>Active to</dd>\n<dt>contractName</dt><dd>Subscription or device name</dd>\n<dt>totalOnetimePrice</dt><dd>One time price</dd>\n<dt>totalRecurrentPrice</dt><dd>Recurring price</dd>\n<dt>deferredPrice</dt><dd>Deferred price</dd>\n<dt>newUiccId</dt><dd>New SIM card number</dd>\n<dt>movedGroupName</dt><dd>Moved account</dd>\n<dt>subscriberAccountId</dt><dd>Old location</dd>\n<dt>destinationAccount</dt><dd>New location</dd>\n<dt>selectedDuoUiccid</dt><dd>Selected Duo SIM card number</dd>\n<dt>projectId</dt><dd>Project ID</dd>\n<dt>new_fixed_number</dt><dd>New fixed number</dd>\n<dt>new_desk_number</dt><dd>New extension</dd>\n<dt>oldUserGroupName</dt><dd>Previous user group</dd>\n<dt>newUserGroupName</dt><dd>New user group</dd>\n<dt>vpnName</dt><dd>VPN name</dd>\n<dt>deskNumber</dt><dd>Extension</dd>\n<dt>accesspointNameDeskNumber</dt><dd>Extension</dd>\n<dt>mobileAddress</dt><dd>Mobile number</dd>\n<dt>enterpriseName</dt><dd>Enterprise name</dd>\n<dt>enterpriseID</dt><dd>Enterprise ID</dd>\n<dt>mobilityGroupName</dt><dd>Fixed-Mobile PBX name</dd>\n<dt>userGroupName</dt><dd>User group</dd>\n<dt>enterpriseUserGroup</dt><dd>User group</dd>\n<dt>initialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>sipAccountName</dt><dd>SIP account name</dd>\n<dt>accessInstanceAttributeinitialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>accesspointNameQueuePhoneNumber</dt><dd>Queue phone number</dd>\n<dt>accesspointNameSipAccountName</dt><dd>SIP account name</dd>\n<dt>subscriptionAmount</dt><dd>New subscription amount</dd>\n<dt>contract_contact_name</dt><dd>Contract contact person (name)</dd>\n<dt>contract_contact_phone</dt><dd>Contract contact person (phone)</dd>\n<dt>contract_contact_mail</dt><dd>Contract contact person (mail)</dd>\n<dt>financial_contact_name</dt><dd>Financial contact person (name)</dd>\n<dt>financial_contact_phone</dt><dd>Financial contact person (phone)</dd>\n<dt>financial_contact_mail</dt><dd>Financial contact person (mail)</dd>\n<dt>technical_contact_name</dt><dd>Technical contact Person (name)</dd>\n<dt>technical_contact_phone</dt><dd>Technical contact Person (phone)</dd>\n<dt>technical_contact_mail</dt><dd>Technical contact Person (mail)</dd>\n<dt>deviceOption</dt><dd>Device option</dd>\n<dt>deviceType_label</dt><dd>Device type</dd>\n<dt>macAddress</dt><dd>Mac address</dd>\n<dt>deviceName</dt><dd>Device name</dd>\n<dt>sacGroupAccountId_label</dt><dd>Location account</dd>\n<dt>groupId</dt><dd>Location</dd>\n<dt>vGroupMovingToID</dt><dd>New location</dd>\n<dt>pbxName</dt><dd>PBX</dd>\n<dt>groupCitemId_label</dt><dd>Group</dd>\n<dt>Fixed</dt><dd>Alternate fixed number</dd>\n<dt>DeskNumber</dt><dd>Alternate extension</dd>\n<dt>billing_retention_period</dt><dd>Financial data retention period (months)</dd>\n<dt>managedGroupName</dt><dd>Authorized for</dd>\n<dt>subscriptionType</dt><dd>Subscription type</dd>\n<dt>CurrentNetworkOperator</dt><dd>Current network operator</dd>\n<dt>CurrentServiceProvider</dt><dd>Current service provider</dd>\n<dt>Customer_name_at_current_provider</dt><dd>Customer name at current provider</dd>\n<dt>Current_contract_number</dt><dd>Customer number at current provider</dd>\n<dt>UIccId</dt><dd>Current SIM card number</dd>\n<dt>Initials</dt><dd>Initials</dd>\n<dt>FamilyNamePrefix</dt><dd>Family name prefix</dd>\n<dt>FamilyName</dt><dd>Family name</dd>\n<dt>delivery_TT_id</dt><dd>Delivery Track&trace ID</dd>\n<dt>IsAppleDEP</dt><dd>Apple DEP</dd>\n<dt>IsSamsungKNOX</dt><dd>Samsung KNOX</dd>\n<dt>keepCurrentSim</dt><dd>Keep existing SIM card</dd>\n<dt>Note</dt><dd>Note</dd>\n<dt>Porting_wish_date</dt><dd>Preferred transition date</dd>\n<dt>returnReason</dt><dd>Reason for return</dd>\n<dt>returnRemarks</dt><dd>Remarks</dd>\n<dt>companyName</dt><dd>Company name</dd>\n<dt>companyNamePronounciation</dt><dd>Comapny name pronounciation</dd>\n<dt>businessVoiceMailMessageText</dt><dd>Chosen business voicemail message</dd>\n</dl>\n<div>\n<style type=\"text/css\">  dl {\n    display: flex;\n    flex-flow: row wrap;\n  }\n  dt {\n    flex-basis: 20%;\n    text-align: right;\n  }\n  dd {\n    flex-basis: 70%;\n    flex-grow: 1;\n  }\n</style>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_orders_track_and_trace</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "2df5c263-848a-4186-9efd-4c0c38080c38",
							"name": "Server Error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/track-and-trace/service-requests/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"track-and-trace",
										"service-requests",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "49579418",
											"description": "Service request ID"
										}
									]
								},
								"description": "The possible keys of `attributes` map in response object:<div style='max-height: 400px; overflow: auto; width: 100%'>\n<dl>\n<dt><b>Attribute name</b></dt><dd><b>Meaning</b></dd>\n<dt>login</dt><dd>Login</dd>\n<dt>roles</dt><dd>Roles</dd>\n<dt>firstName</dt><dd>First name</dd>\n<dt>lastName</dt><dd>Last name</dd>\n<dt>surnamePrefix</dt><dd>Surname prefix</dd>\n<dt>email</dt><dd>E-mail</dd>\n<dt>dateOfBirth</dt><dd>Date of birth</dd>\n<dt>vip</dt><dd>VIP</dd>\n<dt>employeeNumber</dt><dd>Employee number</dd>\n<dt>gender</dt><dd>Gender</dd>\n<dt>salutation</dt><dd>Salutation</dd>\n<dt>preferredLanguage</dt><dd>Preferred language</dd>\n<dt>comments</dt><dd>Comments</dd>\n<dt>accesspointNameMSISDN</dt><dd>Mobile number</dd>\n<dt>accesspointNameSIM</dt><dd>SIM card number</dd>\n<dt>accesspointNameIMSI</dt><dd>IMSI</dd>\n<dt>IMEI</dt><dd>IMEI</dd>\n<dt>Hanset_IMEI_number</dt><dd>IMEI</dd>\n<dt>accesspointNameFixedNumber</dt><dd>Fixed Number</dd>\n<dt>activeTo</dt><dd>Active to</dd>\n<dt>contractName</dt><dd>Subscription or device name</dd>\n<dt>totalOnetimePrice</dt><dd>One time price</dd>\n<dt>totalRecurrentPrice</dt><dd>Recurring price</dd>\n<dt>deferredPrice</dt><dd>Deferred price</dd>\n<dt>newUiccId</dt><dd>New SIM card number</dd>\n<dt>movedGroupName</dt><dd>Moved account</dd>\n<dt>subscriberAccountId</dt><dd>Old location</dd>\n<dt>destinationAccount</dt><dd>New location</dd>\n<dt>selectedDuoUiccid</dt><dd>Selected Duo SIM card number</dd>\n<dt>projectId</dt><dd>Project ID</dd>\n<dt>new_fixed_number</dt><dd>New fixed number</dd>\n<dt>new_desk_number</dt><dd>New extension</dd>\n<dt>oldUserGroupName</dt><dd>Previous user group</dd>\n<dt>newUserGroupName</dt><dd>New user group</dd>\n<dt>vpnName</dt><dd>VPN name</dd>\n<dt>deskNumber</dt><dd>Extension</dd>\n<dt>accesspointNameDeskNumber</dt><dd>Extension</dd>\n<dt>mobileAddress</dt><dd>Mobile number</dd>\n<dt>enterpriseName</dt><dd>Enterprise name</dd>\n<dt>enterpriseID</dt><dd>Enterprise ID</dd>\n<dt>mobilityGroupName</dt><dd>Fixed-Mobile PBX name</dd>\n<dt>userGroupName</dt><dd>User group</dd>\n<dt>enterpriseUserGroup</dt><dd>User group</dd>\n<dt>initialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>sipAccountName</dt><dd>SIP account name</dd>\n<dt>accessInstanceAttributeinitialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>accesspointNameQueuePhoneNumber</dt><dd>Queue phone number</dd>\n<dt>accesspointNameSipAccountName</dt><dd>SIP account name</dd>\n<dt>subscriptionAmount</dt><dd>New subscription amount</dd>\n<dt>contract_contact_name</dt><dd>Contract contact person (name)</dd>\n<dt>contract_contact_phone</dt><dd>Contract contact person (phone)</dd>\n<dt>contract_contact_mail</dt><dd>Contract contact person (mail)</dd>\n<dt>financial_contact_name</dt><dd>Financial contact person (name)</dd>\n<dt>financial_contact_phone</dt><dd>Financial contact person (phone)</dd>\n<dt>financial_contact_mail</dt><dd>Financial contact person (mail)</dd>\n<dt>technical_contact_name</dt><dd>Technical contact Person (name)</dd>\n<dt>technical_contact_phone</dt><dd>Technical contact Person (phone)</dd>\n<dt>technical_contact_mail</dt><dd>Technical contact Person (mail)</dd>\n<dt>deviceOption</dt><dd>Device option</dd>\n<dt>deviceType_label</dt><dd>Device type</dd>\n<dt>macAddress</dt><dd>Mac address</dd>\n<dt>deviceName</dt><dd>Device name</dd>\n<dt>sacGroupAccountId_label</dt><dd>Location account</dd>\n<dt>groupId</dt><dd>Location</dd>\n<dt>vGroupMovingToID</dt><dd>New location</dd>\n<dt>pbxName</dt><dd>PBX</dd>\n<dt>groupCitemId_label</dt><dd>Group</dd>\n<dt>Fixed</dt><dd>Alternate fixed number</dd>\n<dt>DeskNumber</dt><dd>Alternate extension</dd>\n<dt>billing_retention_period</dt><dd>Financial data retention period (months)</dd>\n<dt>managedGroupName</dt><dd>Authorized for</dd>\n<dt>subscriptionType</dt><dd>Subscription type</dd>\n<dt>CurrentNetworkOperator</dt><dd>Current network operator</dd>\n<dt>CurrentServiceProvider</dt><dd>Current service provider</dd>\n<dt>Customer_name_at_current_provider</dt><dd>Customer name at current provider</dd>\n<dt>Current_contract_number</dt><dd>Customer number at current provider</dd>\n<dt>UIccId</dt><dd>Current SIM card number</dd>\n<dt>Initials</dt><dd>Initials</dd>\n<dt>FamilyNamePrefix</dt><dd>Family name prefix</dd>\n<dt>FamilyName</dt><dd>Family name</dd>\n<dt>delivery_TT_id</dt><dd>Delivery Track&trace ID</dd>\n<dt>IsAppleDEP</dt><dd>Apple DEP</dd>\n<dt>IsSamsungKNOX</dt><dd>Samsung KNOX</dd>\n<dt>keepCurrentSim</dt><dd>Keep existing SIM card</dd>\n<dt>Note</dt><dd>Note</dd>\n<dt>Porting_wish_date</dt><dd>Preferred transition date</dd>\n<dt>returnReason</dt><dd>Reason for return</dd>\n<dt>returnRemarks</dt><dd>Remarks</dd>\n<dt>companyName</dt><dd>Company name</dd>\n<dt>companyNamePronounciation</dt><dd>Comapny name pronounciation</dd>\n<dt>businessVoiceMailMessageText</dt><dd>Chosen business voicemail message</dd>\n</dl>\n<div>\n<style type=\"text/css\">  dl {\n    display: flex;\n    flex-flow: row wrap;\n  }\n  dt {\n    flex-basis: 20%;\n    text-align: right;\n  }\n  dd {\n    flex-basis: 70%;\n    flex-grow: 1;\n  }\n</style>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_orders_track_and_trace</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "7d2f6896-7213-40d6-b59e-e15b03747581",
							"name": "Service Unavailable",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/track-and-trace/service-requests/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"track-and-trace",
										"service-requests",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "49579418",
											"description": "Service request ID"
										}
									]
								},
								"description": "The possible keys of `attributes` map in response object:<div style='max-height: 400px; overflow: auto; width: 100%'>\n<dl>\n<dt><b>Attribute name</b></dt><dd><b>Meaning</b></dd>\n<dt>login</dt><dd>Login</dd>\n<dt>roles</dt><dd>Roles</dd>\n<dt>firstName</dt><dd>First name</dd>\n<dt>lastName</dt><dd>Last name</dd>\n<dt>surnamePrefix</dt><dd>Surname prefix</dd>\n<dt>email</dt><dd>E-mail</dd>\n<dt>dateOfBirth</dt><dd>Date of birth</dd>\n<dt>vip</dt><dd>VIP</dd>\n<dt>employeeNumber</dt><dd>Employee number</dd>\n<dt>gender</dt><dd>Gender</dd>\n<dt>salutation</dt><dd>Salutation</dd>\n<dt>preferredLanguage</dt><dd>Preferred language</dd>\n<dt>comments</dt><dd>Comments</dd>\n<dt>accesspointNameMSISDN</dt><dd>Mobile number</dd>\n<dt>accesspointNameSIM</dt><dd>SIM card number</dd>\n<dt>accesspointNameIMSI</dt><dd>IMSI</dd>\n<dt>IMEI</dt><dd>IMEI</dd>\n<dt>Hanset_IMEI_number</dt><dd>IMEI</dd>\n<dt>accesspointNameFixedNumber</dt><dd>Fixed Number</dd>\n<dt>activeTo</dt><dd>Active to</dd>\n<dt>contractName</dt><dd>Subscription or device name</dd>\n<dt>totalOnetimePrice</dt><dd>One time price</dd>\n<dt>totalRecurrentPrice</dt><dd>Recurring price</dd>\n<dt>deferredPrice</dt><dd>Deferred price</dd>\n<dt>newUiccId</dt><dd>New SIM card number</dd>\n<dt>movedGroupName</dt><dd>Moved account</dd>\n<dt>subscriberAccountId</dt><dd>Old location</dd>\n<dt>destinationAccount</dt><dd>New location</dd>\n<dt>selectedDuoUiccid</dt><dd>Selected Duo SIM card number</dd>\n<dt>projectId</dt><dd>Project ID</dd>\n<dt>new_fixed_number</dt><dd>New fixed number</dd>\n<dt>new_desk_number</dt><dd>New extension</dd>\n<dt>oldUserGroupName</dt><dd>Previous user group</dd>\n<dt>newUserGroupName</dt><dd>New user group</dd>\n<dt>vpnName</dt><dd>VPN name</dd>\n<dt>deskNumber</dt><dd>Extension</dd>\n<dt>accesspointNameDeskNumber</dt><dd>Extension</dd>\n<dt>mobileAddress</dt><dd>Mobile number</dd>\n<dt>enterpriseName</dt><dd>Enterprise name</dd>\n<dt>enterpriseID</dt><dd>Enterprise ID</dd>\n<dt>mobilityGroupName</dt><dd>Fixed-Mobile PBX name</dd>\n<dt>userGroupName</dt><dd>User group</dd>\n<dt>enterpriseUserGroup</dt><dd>User group</dd>\n<dt>initialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>sipAccountName</dt><dd>SIP account name</dd>\n<dt>accessInstanceAttributeinitialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>accesspointNameQueuePhoneNumber</dt><dd>Queue phone number</dd>\n<dt>accesspointNameSipAccountName</dt><dd>SIP account name</dd>\n<dt>subscriptionAmount</dt><dd>New subscription amount</dd>\n<dt>contract_contact_name</dt><dd>Contract contact person (name)</dd>\n<dt>contract_contact_phone</dt><dd>Contract contact person (phone)</dd>\n<dt>contract_contact_mail</dt><dd>Contract contact person (mail)</dd>\n<dt>financial_contact_name</dt><dd>Financial contact person (name)</dd>\n<dt>financial_contact_phone</dt><dd>Financial contact person (phone)</dd>\n<dt>financial_contact_mail</dt><dd>Financial contact person (mail)</dd>\n<dt>technical_contact_name</dt><dd>Technical contact Person (name)</dd>\n<dt>technical_contact_phone</dt><dd>Technical contact Person (phone)</dd>\n<dt>technical_contact_mail</dt><dd>Technical contact Person (mail)</dd>\n<dt>deviceOption</dt><dd>Device option</dd>\n<dt>deviceType_label</dt><dd>Device type</dd>\n<dt>macAddress</dt><dd>Mac address</dd>\n<dt>deviceName</dt><dd>Device name</dd>\n<dt>sacGroupAccountId_label</dt><dd>Location account</dd>\n<dt>groupId</dt><dd>Location</dd>\n<dt>vGroupMovingToID</dt><dd>New location</dd>\n<dt>pbxName</dt><dd>PBX</dd>\n<dt>groupCitemId_label</dt><dd>Group</dd>\n<dt>Fixed</dt><dd>Alternate fixed number</dd>\n<dt>DeskNumber</dt><dd>Alternate extension</dd>\n<dt>billing_retention_period</dt><dd>Financial data retention period (months)</dd>\n<dt>managedGroupName</dt><dd>Authorized for</dd>\n<dt>subscriptionType</dt><dd>Subscription type</dd>\n<dt>CurrentNetworkOperator</dt><dd>Current network operator</dd>\n<dt>CurrentServiceProvider</dt><dd>Current service provider</dd>\n<dt>Customer_name_at_current_provider</dt><dd>Customer name at current provider</dd>\n<dt>Current_contract_number</dt><dd>Customer number at current provider</dd>\n<dt>UIccId</dt><dd>Current SIM card number</dd>\n<dt>Initials</dt><dd>Initials</dd>\n<dt>FamilyNamePrefix</dt><dd>Family name prefix</dd>\n<dt>FamilyName</dt><dd>Family name</dd>\n<dt>delivery_TT_id</dt><dd>Delivery Track&trace ID</dd>\n<dt>IsAppleDEP</dt><dd>Apple DEP</dd>\n<dt>IsSamsungKNOX</dt><dd>Samsung KNOX</dd>\n<dt>keepCurrentSim</dt><dd>Keep existing SIM card</dd>\n<dt>Note</dt><dd>Note</dd>\n<dt>Porting_wish_date</dt><dd>Preferred transition date</dd>\n<dt>returnReason</dt><dd>Reason for return</dd>\n<dt>returnRemarks</dt><dd>Remarks</dd>\n<dt>companyName</dt><dd>Company name</dd>\n<dt>companyNamePronounciation</dt><dd>Comapny name pronounciation</dd>\n<dt>businessVoiceMailMessageText</dt><dd>Chosen business voicemail message</dd>\n</dl>\n<div>\n<style type=\"text/css\">  dl {\n    display: flex;\n    flex-flow: row wrap;\n  }\n  dt {\n    flex-basis: 20%;\n    text-align: right;\n  }\n  dd {\n    flex-basis: 70%;\n    flex-grow: 1;\n  }\n</style>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_orders_track_and_trace</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			],
			"id": "7db673e9-0a74-4865-a7e5-08e7076faf99",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "5ca51f7c-72aa-4fbe-b94d-70f55185f07e",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "5d875da4-b5aa-4fcb-b3ea-fbf9e4be005f",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "13- create Subscriber - With User",
			"item": [
				{
					"name": "1- Get all hierarchy entity",
					"id": "051b6f90-462b-4eb6-821a-fb73f9387fde",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/hierarchy/children",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"hierarchy",
								"children"
							],
							"query": [
								{
									"key": "includeGroups",
									"value": "true",
									"disabled": true
								},
								{
									"key": "includeCustomer",
									"value": "true",
									"disabled": true
								}
							]
						},
						"description": "Get details for organisation structure entitity with given `id`.\nDifferent set of attributes is returned for different entity types. Supported item types are:<ul><li>`CUSTOMER`</li><li>`DEBTOR`</li><li>`COST_CENTER`</li><li>`CUSTOM_GROUP`</li><li>`BUSINESS_LOCATION`</li></ul>Details for `SUBSCRIBER` are not supported. `subscribers/{id}` should be used instead.\n<br>Possible exceptions:\n| HTTP code | Error code                         | Description                                                  |\n|-----------|------------------------------------|--------------------------------------------------------------|\n| `400`     | `WRONG_GROUP_TYPE`                 | Item of unsupported type                                     |\n| `404`     | `VIRTUAL_HIERARCHY_ITEM_NOT_FOUND` | Information for item with the given `id` cannot be found     |\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
					},
					"response": [
						{
							"id": "d6c21e0b-ec5f-41dd-923b-8397a3a453d7",
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hierarchy/children",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"children"
									],
									"query": [
										{
											"key": "includeGroups",
											"value": "true",
											"disabled": true
										},
										{
											"key": "includeCustomer",
											"value": "true",
											"disabled": true
										}
									]
								},
								"description": "Get details for organisation structure entitity with given `id`.\nDifferent set of attributes is returned for different entity types. Supported item types are:<ul><li>`CUSTOMER`</li><li>`DEBTOR`</li><li>`COST_CENTER`</li><li>`CUSTOM_GROUP`</li><li>`BUSINESS_LOCATION`</li></ul>Details for `SUBSCRIBER` are not supported. `subscribers/{id}` should be used instead.\n<br>Possible exceptions:\n| HTTP code | Error code                         | Description                                                  |\n|-----------|------------------------------------|--------------------------------------------------------------|\n| `400`     | `WRONG_GROUP_TYPE`                 | Item of unsupported type                                     |\n| `404`     | `VIRTUAL_HIERARCHY_ITEM_NOT_FOUND` | Information for item with the given `id` cannot be found     |\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "6fbba2f7-977c-466c-95c9-c49cd1a3b093",
							"name": "Bad Request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hierarchy/children?includeGroups=true&includeCustomer=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"children"
									],
									"query": [
										{
											"key": "includeGroups",
											"value": "true",
											"disabled": true
										},
										{
											"key": "includeCustomer",
											"value": "true",
											"disabled": true
										}
									]
								},
								"description": "Get details for organisation structure entitity with given `id`.\nDifferent set of attributes is returned for different entity types. Supported item types are:<ul><li>`CUSTOMER`</li><li>`DEBTOR`</li><li>`COST_CENTER`</li><li>`CUSTOM_GROUP`</li><li>`BUSINESS_LOCATION`</li></ul>Details for `SUBSCRIBER` are not supported. `subscribers/{id}` should be used instead.\n<br>Possible exceptions:\n| HTTP code | Error code                         | Description                                                  |\n|-----------|------------------------------------|--------------------------------------------------------------|\n| `400`     | `WRONG_GROUP_TYPE`                 | Item of unsupported type                                     |\n| `404`     | `VIRTUAL_HIERARCHY_ITEM_NOT_FOUND` | Information for item with the given `id` cannot be found     |\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "cea6e5f5-7673-46f5-9472-03003ee62069",
							"name": "Unauthorized",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hierarchy/children?includeGroups=true&includeCustomer=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"children"
									],
									"query": [
										{
											"key": "includeGroups",
											"value": "true",
											"disabled": true
										},
										{
											"key": "includeCustomer",
											"value": "true",
											"disabled": true
										}
									]
								},
								"description": "Get details for organisation structure entitity with given `id`.\nDifferent set of attributes is returned for different entity types. Supported item types are:<ul><li>`CUSTOMER`</li><li>`DEBTOR`</li><li>`COST_CENTER`</li><li>`CUSTOM_GROUP`</li><li>`BUSINESS_LOCATION`</li></ul>Details for `SUBSCRIBER` are not supported. `subscribers/{id}` should be used instead.\n<br>Possible exceptions:\n| HTTP code | Error code                         | Description                                                  |\n|-----------|------------------------------------|--------------------------------------------------------------|\n| `400`     | `WRONG_GROUP_TYPE`                 | Item of unsupported type                                     |\n| `404`     | `VIRTUAL_HIERARCHY_ITEM_NOT_FOUND` | Information for item with the given `id` cannot be found     |\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "0e546949-dfb4-448d-9bc1-339c47834771",
							"name": "Forbidden",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hierarchy/children?includeGroups=true&includeCustomer=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"children"
									],
									"query": [
										{
											"key": "includeGroups",
											"value": "true",
											"disabled": true
										},
										{
											"key": "includeCustomer",
											"value": "true",
											"disabled": true
										}
									]
								},
								"description": "Get details for organisation structure entitity with given `id`.\nDifferent set of attributes is returned for different entity types. Supported item types are:<ul><li>`CUSTOMER`</li><li>`DEBTOR`</li><li>`COST_CENTER`</li><li>`CUSTOM_GROUP`</li><li>`BUSINESS_LOCATION`</li></ul>Details for `SUBSCRIBER` are not supported. `subscribers/{id}` should be used instead.\n<br>Possible exceptions:\n| HTTP code | Error code                         | Description                                                  |\n|-----------|------------------------------------|--------------------------------------------------------------|\n| `400`     | `WRONG_GROUP_TYPE`                 | Item of unsupported type                                     |\n| `404`     | `VIRTUAL_HIERARCHY_ITEM_NOT_FOUND` | Information for item with the given `id` cannot be found     |\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "0d261991-96d6-4a28-94df-b9d6363650de",
							"name": "Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hierarchy/children?includeGroups=true&includeCustomer=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"children"
									],
									"query": [
										{
											"key": "includeGroups",
											"value": "true",
											"disabled": true
										},
										{
											"key": "includeCustomer",
											"value": "true",
											"disabled": true
										}
									]
								},
								"description": "Get details for organisation structure entitity with given `id`.\nDifferent set of attributes is returned for different entity types. Supported item types are:<ul><li>`CUSTOMER`</li><li>`DEBTOR`</li><li>`COST_CENTER`</li><li>`CUSTOM_GROUP`</li><li>`BUSINESS_LOCATION`</li></ul>Details for `SUBSCRIBER` are not supported. `subscribers/{id}` should be used instead.\n<br>Possible exceptions:\n| HTTP code | Error code                         | Description                                                  |\n|-----------|------------------------------------|--------------------------------------------------------------|\n| `400`     | `WRONG_GROUP_TYPE`                 | Item of unsupported type                                     |\n| `404`     | `VIRTUAL_HIERARCHY_ITEM_NOT_FOUND` | Information for item with the given `id` cannot be found     |\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "a4d96267-f000-49da-b78b-ed34675dc72b",
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hierarchy/children?includeGroups=true&includeCustomer=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"children"
									],
									"query": [
										{
											"key": "includeGroups",
											"value": "true",
											"disabled": true
										},
										{
											"key": "includeCustomer",
											"value": "true",
											"disabled": true
										}
									]
								},
								"description": "Get details for organisation structure entitity with given `id`.\nDifferent set of attributes is returned for different entity types. Supported item types are:<ul><li>`CUSTOMER`</li><li>`DEBTOR`</li><li>`COST_CENTER`</li><li>`CUSTOM_GROUP`</li><li>`BUSINESS_LOCATION`</li></ul>Details for `SUBSCRIBER` are not supported. `subscribers/{id}` should be used instead.\n<br>Possible exceptions:\n| HTTP code | Error code                         | Description                                                  |\n|-----------|------------------------------------|--------------------------------------------------------------|\n| `400`     | `WRONG_GROUP_TYPE`                 | Item of unsupported type                                     |\n| `404`     | `VIRTUAL_HIERARCHY_ITEM_NOT_FOUND` | Information for item with the given `id` cannot be found     |\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "13587b6b-6cc4-47bf-9b44-10397fa87323",
							"name": "Server Error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hierarchy/children?includeGroups=true&includeCustomer=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"children"
									],
									"query": [
										{
											"key": "includeGroups",
											"value": "true",
											"disabled": true
										},
										{
											"key": "includeCustomer",
											"value": "true",
											"disabled": true
										}
									]
								},
								"description": "Get details for organisation structure entitity with given `id`.\nDifferent set of attributes is returned for different entity types. Supported item types are:<ul><li>`CUSTOMER`</li><li>`DEBTOR`</li><li>`COST_CENTER`</li><li>`CUSTOM_GROUP`</li><li>`BUSINESS_LOCATION`</li></ul>Details for `SUBSCRIBER` are not supported. `subscribers/{id}` should be used instead.\n<br>Possible exceptions:\n| HTTP code | Error code                         | Description                                                  |\n|-----------|------------------------------------|--------------------------------------------------------------|\n| `400`     | `WRONG_GROUP_TYPE`                 | Item of unsupported type                                     |\n| `404`     | `VIRTUAL_HIERARCHY_ITEM_NOT_FOUND` | Information for item with the given `id` cannot be found     |\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "5bbef710-1a93-473d-afd5-0f0d9f91ea82",
							"name": "Service Unavailable",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hierarchy/children?includeGroups=true&includeCustomer=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"children"
									],
									"query": [
										{
											"key": "includeGroups",
											"value": "true",
											"disabled": true
										},
										{
											"key": "includeCustomer",
											"value": "true",
											"disabled": true
										}
									]
								},
								"description": "Get details for organisation structure entitity with given `id`.\nDifferent set of attributes is returned for different entity types. Supported item types are:<ul><li>`CUSTOMER`</li><li>`DEBTOR`</li><li>`COST_CENTER`</li><li>`CUSTOM_GROUP`</li><li>`BUSINESS_LOCATION`</li></ul>Details for `SUBSCRIBER` are not supported. `subscribers/{id}` should be used instead.\n<br>Possible exceptions:\n| HTTP code | Error code                         | Description                                                  |\n|-----------|------------------------------------|--------------------------------------------------------------|\n| `400`     | `WRONG_GROUP_TYPE`                 | Item of unsupported type                                     |\n| `404`     | `VIRTUAL_HIERARCHY_ITEM_NOT_FOUND` | Information for item with the given `id` cannot be found     |\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_view</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "2- Get operations availability for chosen item",
					"id": "329a4caf-c135-4686-a789-b050b430e969",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/hierarchy/children/:id/operations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"hierarchy",
								"children",
								":id",
								"operations"
							],
							"variable": [
								{
									"key": "id",
									"value": "14091765",
									"description": "(Required) id"
								}
							]
						},
						"description": "Get available operations for organisational hierarchy item with the given `id`.\nPossible operations are:<ul><li>`create subscriber`</li><li>`create cost center`</li><li>`create virtual group`</li><li>`edit item`</li><li>`move item`</li><li>`remove item`</li></ul>Operations for `SUBSCRIBER` are not supported. `subscribers/{id}/operations` should be used instead.\n<br>Possible exceptions:\n| HTTP code | Error code                         | Description                                                  |\n|-----------|------------------------------------|--------------------------------------------------------------|\n| `400`     | `WRONG_GROUP_TYPE`                 | Item of unsupported type                                     |\n| `404`     | `VIRTUAL_HIERARCHY_ITEM_NOT_FOUND` | Information for item with the given `id` cannot be found     |\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
					},
					"response": [
						{
							"id": "697d458a-11f3-44aa-a664-b4feb643cc4b",
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hierarchy/children/:id/operations",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"children",
										":id",
										"operations"
									],
									"variable": [
										{
											"key": "id",
											"value": "14091765",
											"description": "(Required) id"
										}
									]
								},
								"description": "Get available operations for organisational hierarchy item with the given `id`.\nPossible operations are:<ul><li>`create subscriber`</li><li>`create cost center`</li><li>`create virtual group`</li><li>`edit item`</li><li>`move item`</li><li>`remove item`</li></ul>Operations for `SUBSCRIBER` are not supported. `subscribers/{id}/operations` should be used instead.\n<br>Possible exceptions:\n| HTTP code | Error code                         | Description                                                  |\n|-----------|------------------------------------|--------------------------------------------------------------|\n| `400`     | `WRONG_GROUP_TYPE`                 | Item of unsupported type                                     |\n| `404`     | `VIRTUAL_HIERARCHY_ITEM_NOT_FOUND` | Information for item with the given `id` cannot be found     |\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "7cc88ef6-5ee9-45dc-8745-c38f6e2253a7",
							"name": "Bad Request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hierarchy/children/:id/operations",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"children",
										":id",
										"operations"
									],
									"variable": [
										{
											"key": "id",
											"value": "14091765",
											"description": "(Required) id"
										}
									]
								},
								"description": "Get available operations for organisational hierarchy item with the given `id`.\nPossible operations are:<ul><li>`create subscriber`</li><li>`create cost center`</li><li>`create virtual group`</li><li>`edit item`</li><li>`move item`</li><li>`remove item`</li></ul>Operations for `SUBSCRIBER` are not supported. `subscribers/{id}/operations` should be used instead.\n<br>Possible exceptions:\n| HTTP code | Error code                         | Description                                                  |\n|-----------|------------------------------------|--------------------------------------------------------------|\n| `400`     | `WRONG_GROUP_TYPE`                 | Item of unsupported type                                     |\n| `404`     | `VIRTUAL_HIERARCHY_ITEM_NOT_FOUND` | Information for item with the given `id` cannot be found     |\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "796bf290-eb45-4a11-b0ee-994e42995746",
							"name": "Unauthorized",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hierarchy/children/:id/operations",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"children",
										":id",
										"operations"
									],
									"variable": [
										{
											"key": "id",
											"value": "14091765",
											"description": "(Required) id"
										}
									]
								},
								"description": "Get available operations for organisational hierarchy item with the given `id`.\nPossible operations are:<ul><li>`create subscriber`</li><li>`create cost center`</li><li>`create virtual group`</li><li>`edit item`</li><li>`move item`</li><li>`remove item`</li></ul>Operations for `SUBSCRIBER` are not supported. `subscribers/{id}/operations` should be used instead.\n<br>Possible exceptions:\n| HTTP code | Error code                         | Description                                                  |\n|-----------|------------------------------------|--------------------------------------------------------------|\n| `400`     | `WRONG_GROUP_TYPE`                 | Item of unsupported type                                     |\n| `404`     | `VIRTUAL_HIERARCHY_ITEM_NOT_FOUND` | Information for item with the given `id` cannot be found     |\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "8925dc39-d954-4606-98cc-3dade1cbc2a4",
							"name": "Forbidden",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hierarchy/children/:id/operations",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"children",
										":id",
										"operations"
									],
									"variable": [
										{
											"key": "id",
											"value": "14091765",
											"description": "(Required) id"
										}
									]
								},
								"description": "Get available operations for organisational hierarchy item with the given `id`.\nPossible operations are:<ul><li>`create subscriber`</li><li>`create cost center`</li><li>`create virtual group`</li><li>`edit item`</li><li>`move item`</li><li>`remove item`</li></ul>Operations for `SUBSCRIBER` are not supported. `subscribers/{id}/operations` should be used instead.\n<br>Possible exceptions:\n| HTTP code | Error code                         | Description                                                  |\n|-----------|------------------------------------|--------------------------------------------------------------|\n| `400`     | `WRONG_GROUP_TYPE`                 | Item of unsupported type                                     |\n| `404`     | `VIRTUAL_HIERARCHY_ITEM_NOT_FOUND` | Information for item with the given `id` cannot be found     |\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "57f2f927-5b01-432d-9e67-a51fd787d2c3",
							"name": "Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hierarchy/children/:id/operations",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"children",
										":id",
										"operations"
									],
									"variable": [
										{
											"key": "id",
											"value": "14091765",
											"description": "(Required) id"
										}
									]
								},
								"description": "Get available operations for organisational hierarchy item with the given `id`.\nPossible operations are:<ul><li>`create subscriber`</li><li>`create cost center`</li><li>`create virtual group`</li><li>`edit item`</li><li>`move item`</li><li>`remove item`</li></ul>Operations for `SUBSCRIBER` are not supported. `subscribers/{id}/operations` should be used instead.\n<br>Possible exceptions:\n| HTTP code | Error code                         | Description                                                  |\n|-----------|------------------------------------|--------------------------------------------------------------|\n| `400`     | `WRONG_GROUP_TYPE`                 | Item of unsupported type                                     |\n| `404`     | `VIRTUAL_HIERARCHY_ITEM_NOT_FOUND` | Information for item with the given `id` cannot be found     |\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "1ad0c4e2-4108-4078-b584-5e0c6cb9bbf7",
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hierarchy/children/:id/operations",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"children",
										":id",
										"operations"
									],
									"variable": [
										{
											"key": "id",
											"value": "14091765",
											"description": "(Required) id"
										}
									]
								},
								"description": "Get available operations for organisational hierarchy item with the given `id`.\nPossible operations are:<ul><li>`create subscriber`</li><li>`create cost center`</li><li>`create virtual group`</li><li>`edit item`</li><li>`move item`</li><li>`remove item`</li></ul>Operations for `SUBSCRIBER` are not supported. `subscribers/{id}/operations` should be used instead.\n<br>Possible exceptions:\n| HTTP code | Error code                         | Description                                                  |\n|-----------|------------------------------------|--------------------------------------------------------------|\n| `400`     | `WRONG_GROUP_TYPE`                 | Item of unsupported type                                     |\n| `404`     | `VIRTUAL_HIERARCHY_ITEM_NOT_FOUND` | Information for item with the given `id` cannot be found     |\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "371ed295-10ae-470e-8ca9-4a3aa18f6278",
							"name": "Server Error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hierarchy/children/:id/operations",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"children",
										":id",
										"operations"
									],
									"variable": [
										{
											"key": "id",
											"value": "14091765",
											"description": "(Required) id"
										}
									]
								},
								"description": "Get available operations for organisational hierarchy item with the given `id`.\nPossible operations are:<ul><li>`create subscriber`</li><li>`create cost center`</li><li>`create virtual group`</li><li>`edit item`</li><li>`move item`</li><li>`remove item`</li></ul>Operations for `SUBSCRIBER` are not supported. `subscribers/{id}/operations` should be used instead.\n<br>Possible exceptions:\n| HTTP code | Error code                         | Description                                                  |\n|-----------|------------------------------------|--------------------------------------------------------------|\n| `400`     | `WRONG_GROUP_TYPE`                 | Item of unsupported type                                     |\n| `404`     | `VIRTUAL_HIERARCHY_ITEM_NOT_FOUND` | Information for item with the given `id` cannot be found     |\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "6d4ac8bf-e64b-40a6-9577-210a9a46afe6",
							"name": "Service Unavailable",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hierarchy/children/:id/operations",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"children",
										":id",
										"operations"
									],
									"variable": [
										{
											"key": "id",
											"value": "14091765",
											"description": "(Required) id"
										}
									]
								},
								"description": "Get available operations for organisational hierarchy item with the given `id`.\nPossible operations are:<ul><li>`create subscriber`</li><li>`create cost center`</li><li>`create virtual group`</li><li>`edit item`</li><li>`move item`</li><li>`remove item`</li></ul>Operations for `SUBSCRIBER` are not supported. `subscribers/{id}/operations` should be used instead.\n<br>Possible exceptions:\n| HTTP code | Error code                         | Description                                                  |\n|-----------|------------------------------------|--------------------------------------------------------------|\n| `400`     | `WRONG_GROUP_TYPE`                 | Item of unsupported type                                     |\n| `404`     | `VIRTUAL_HIERARCHY_ITEM_NOT_FOUND` | Information for item with the given `id` cannot be found     |\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "3- Get all roles",
					"id": "fdce1613-cd3b-41ce-8225-a8064093aa11",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/hierarchy/subscribers/roles",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"hierarchy",
								"subscribers",
								"roles"
							]
						}
					},
					"response": [
						{
							"id": "3219a491-e433-4c99-bca9-b950e97aabaa",
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hierarchy/subscribers/roles",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"subscribers",
										"roles"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "774e5c27-b9e5-4bf7-b237-191c845837bc",
							"name": "Bad Request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hierarchy/subscribers/roles",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"subscribers",
										"roles"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "782e0181-f121-4144-aa2f-b4aab14efcad",
							"name": "Unauthorized",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hierarchy/subscribers/roles",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"subscribers",
										"roles"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "9f3f109a-36fe-4893-b241-8de52e793d15",
							"name": "Forbidden",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hierarchy/subscribers/roles",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"subscribers",
										"roles"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "250a52f5-ece8-4243-9e42-19e694525494",
							"name": "Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hierarchy/subscribers/roles",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"subscribers",
										"roles"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "7c520a8a-298b-4d1c-9a79-325a3b93dac1",
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hierarchy/subscribers/roles",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"subscribers",
										"roles"
									]
								}
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "00bc6d23-3601-4dd6-9f27-a037f3c6e0ad",
							"name": "Server Error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hierarchy/subscribers/roles",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"subscribers",
										"roles"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "5cdc2339-13d7-4ba4-8412-d21d48f86f66",
							"name": "Service Unavailable",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hierarchy/subscribers/roles",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"subscribers",
										"roles"
									]
								}
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "4- Get all grip entities not linked to subscriber",
					"id": "0d4e989b-cf39-4d4a-a48d-faf924dd44c9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/hierarchy/grip-entities",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"hierarchy",
								"grip-entities"
							]
						}
					},
					"response": [
						{
							"id": "d876e80c-16c0-42c8-bdd5-c84ee47cda75",
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hierarchy/grip-entities",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"grip-entities"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "db5556ed-07dd-402f-819d-7f4444dbd622",
							"name": "Bad Request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hierarchy/grip-entities",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"grip-entities"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "f4045ada-a2ab-44fc-b3c4-0308efabc221",
							"name": "Unauthorized",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hierarchy/grip-entities",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"grip-entities"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "ad8431b2-a5a2-4344-a948-46645c485d1e",
							"name": "Forbidden",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hierarchy/grip-entities",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"grip-entities"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "3d5e6df5-0c7b-4e52-83d5-5a0f8cdd23dc",
							"name": "Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hierarchy/grip-entities",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"grip-entities"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "d654a831-1b2c-4917-8e06-39ff6aede0e7",
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hierarchy/grip-entities",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"grip-entities"
									]
								}
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "dafd855b-9cce-4e80-9096-399ba8ac2834",
							"name": "Server Error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hierarchy/grip-entities",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"grip-entities"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "ee1ac0de-b6f0-4927-ab3a-32942d0df649",
							"name": "Service Unavailable",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hierarchy/grip-entities",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"grip-entities"
									]
								}
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "5- Get immediate children of given parent hierarchy entity",
					"id": "3094f33d-98a8-4a0d-937b-0643115ca9fc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/hierarchy/children",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"hierarchy",
								"children"
							]
						}
					},
					"response": [
						{
							"id": "2a86f55e-fcc8-4fa4-abee-2538381f6e45",
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hierarchy/children",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"children"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "c12eb8d2-4ff4-484c-8c47-f5a8fc600db0",
							"name": "Bad Request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hierarchy/children",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"children"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "ce8527fc-d11b-4457-bd8b-a332373436ee",
							"name": "Unauthorized",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hierarchy/children",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"children"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "abfc2da5-1724-47b7-8721-99cca0efdfb3",
							"name": "Forbidden",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hierarchy/children",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"children"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "ab5664fd-ec17-4181-8650-999149ace3a4",
							"name": "Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hierarchy/children",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"children"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "40c75372-a26d-41ec-b3c7-95b1d5896db5",
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hierarchy/children",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"children"
									]
								}
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "0934efff-6a9d-497a-9804-896f67b55e74",
							"name": "Server Error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hierarchy/children",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"children"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "91415f67-ae25-4875-ac82-4eccdfa6f098",
							"name": "Service Unavailable",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hierarchy/children",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"children"
									]
								}
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "6- Create subscriber (with user)",
					"id": "f13815f4-9433-4d5a-b520-15d28ee8f25f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"groupId\": 14091765,\n    \"referenceNumber\": \"quis anim\",\n    \"subscriber\": {\n        \"surname\": \"Ut ipsum Duis occaecat\",\n        \"comments\": \"Excepte\",\n        \"email\": \"nirupam.anand@kpn.com\",\n        \"employeeNumber\": \"laborum sint id non in\",\n        \"firstName\": \"proident do\",\n        \"fixedNumber\": \"31617185666\",\n        \"gender\": \"MALE\",\n        \"mobileNumber\": \"31617185666\",\n        \"preferredLanguage\": \"EN\",\n        \"surnamePrefix\": \"aute qui\",\n        \"vip\": true\n    },\n    \"userAdditionalInfo\": {\n        \"gripEntityId\": 18171,\n        \"managedEntities\": [14091398],\n        \"roles\": [1519]\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/hierarchy/subscribers",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"hierarchy",
								"subscribers"
							]
						},
						"description": "If you want to create both subscriber and user at the same time, you should fill userAdditionalInfo.\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
					},
					"response": [
						{
							"id": "1f0fd366-a830-4ab7-a8ac-52ecae91cc09",
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"groupId\": 14091765,\n    \"referenceNumber\": \"quis anim\",\n    \"subscriber\": {\n        \"surname\": \"Ut ipsum Duis occaecat\",\n        \"comments\": \"Excepte\",\n        \"email\": \"nirupam.anand@kpn.com\",\n        \"employeeNumber\": \"laborum sint id non in\",\n        \"firstName\": \"proident do\",\n        \"fixedNumber\": \"31617185666\",\n        \"gender\": \"MALE\",\n        \"mobileNumber\": \"31617185666\",\n        \"preferredLanguage\": \"EN\",\n        \"surnamePrefix\": \"aute qui\",\n        \"vip\": true\n    },\n    \"userAdditionalInfo\": {\n        \"gripEntityId\": 18171,\n        \"managedEntities\": [14091398],\n        \"roles\": [1519]\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/hierarchy/subscribers",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"subscribers"
									]
								},
								"description": "If you want to create both subscriber and user at the same time, you should fill userAdditionalInfo.\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "eb1aa984-e95a-4f34-9e23-2ec37f72d1c2",
							"name": "Bad Request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"groupId\": 14091765,\n    \"referenceNumber\": \"quis anim\",\n    \"subscriber\": {\n        \"surname\": \"Ut ipsum Duis occaecat\",\n        \"comments\": \"Excepte\",\n        \"email\": \"nirupam.anand@kpn.com\",\n        \"employeeNumber\": \"laborum sint id non in\",\n        \"firstName\": \"proident do\",\n        \"fixedNumber\": \"31617185666\",\n        \"gender\": \"MALE\",\n        \"mobileNumber\": \"31617185666\",\n        \"preferredLanguage\": \"EN\",\n        \"surnamePrefix\": \"aute qui\",\n        \"vip\": true\n    },\n    \"userAdditionalInfo\": {\n        \"gripEntityId\": 18171,\n        \"managedEntities\": [14091398],\n        \"roles\": [1519]\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/hierarchy/subscribers",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"subscribers"
									]
								},
								"description": "If you want to create both subscriber and user at the same time, you should fill userAdditionalInfo.\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "fadb7188-ce77-4e75-a662-c05ac5a2a1be",
							"name": "Unauthorized",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"groupId\": 14091765,\n    \"referenceNumber\": \"quis anim\",\n    \"subscriber\": {\n        \"surname\": \"Ut ipsum Duis occaecat\",\n        \"comments\": \"Excepte\",\n        \"email\": \"nirupam.anand@kpn.com\",\n        \"employeeNumber\": \"laborum sint id non in\",\n        \"firstName\": \"proident do\",\n        \"fixedNumber\": \"31617185666\",\n        \"gender\": \"MALE\",\n        \"mobileNumber\": \"31617185666\",\n        \"preferredLanguage\": \"EN\",\n        \"surnamePrefix\": \"aute qui\",\n        \"vip\": true\n    },\n    \"userAdditionalInfo\": {\n        \"gripEntityId\": 18171,\n        \"managedEntities\": [14091398],\n        \"roles\": [1519]\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/hierarchy/subscribers",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"subscribers"
									]
								},
								"description": "If you want to create both subscriber and user at the same time, you should fill userAdditionalInfo.\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "a0354ebc-a3bb-4377-a626-d20ba4c67e41",
							"name": "Forbidden",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"groupId\": 14091765,\n    \"referenceNumber\": \"quis anim\",\n    \"subscriber\": {\n        \"surname\": \"Ut ipsum Duis occaecat\",\n        \"comments\": \"Excepte\",\n        \"email\": \"nirupam.anand@kpn.com\",\n        \"employeeNumber\": \"laborum sint id non in\",\n        \"firstName\": \"proident do\",\n        \"fixedNumber\": \"31617185666\",\n        \"gender\": \"MALE\",\n        \"mobileNumber\": \"31617185666\",\n        \"preferredLanguage\": \"EN\",\n        \"surnamePrefix\": \"aute qui\",\n        \"vip\": true\n    },\n    \"userAdditionalInfo\": {\n        \"gripEntityId\": 18171,\n        \"managedEntities\": [14091398],\n        \"roles\": [1519]\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/hierarchy/subscribers",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"subscribers"
									]
								},
								"description": "If you want to create both subscriber and user at the same time, you should fill userAdditionalInfo.\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "7f3a079d-7e56-4e83-98e8-476b6c23e621",
							"name": "Not Found",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"groupId\": 14091765,\n    \"referenceNumber\": \"quis anim\",\n    \"subscriber\": {\n        \"surname\": \"Ut ipsum Duis occaecat\",\n        \"comments\": \"Excepte\",\n        \"email\": \"nirupam.anand@kpn.com\",\n        \"employeeNumber\": \"laborum sint id non in\",\n        \"firstName\": \"proident do\",\n        \"fixedNumber\": \"31617185666\",\n        \"gender\": \"MALE\",\n        \"mobileNumber\": \"31617185666\",\n        \"preferredLanguage\": \"EN\",\n        \"surnamePrefix\": \"aute qui\",\n        \"vip\": true\n    },\n    \"userAdditionalInfo\": {\n        \"gripEntityId\": 18171,\n        \"managedEntities\": [14091398],\n        \"roles\": [1519]\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/hierarchy/subscribers",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"subscribers"
									]
								},
								"description": "If you want to create both subscriber and user at the same time, you should fill userAdditionalInfo.\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "02764a3e-a134-4444-b4dc-1d59497d1810",
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"groupId\": 14091765,\n    \"referenceNumber\": \"quis anim\",\n    \"subscriber\": {\n        \"surname\": \"Ut ipsum Duis occaecat\",\n        \"comments\": \"Excepte\",\n        \"email\": \"nirupam.anand@kpn.com\",\n        \"employeeNumber\": \"laborum sint id non in\",\n        \"firstName\": \"proident do\",\n        \"fixedNumber\": \"31617185666\",\n        \"gender\": \"MALE\",\n        \"mobileNumber\": \"31617185666\",\n        \"preferredLanguage\": \"EN\",\n        \"surnamePrefix\": \"aute qui\",\n        \"vip\": true\n    },\n    \"userAdditionalInfo\": {\n        \"gripEntityId\": 18171,\n        \"managedEntities\": [14091398],\n        \"roles\": [1519]\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/hierarchy/subscribers",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"subscribers"
									]
								},
								"description": "If you want to create both subscriber and user at the same time, you should fill userAdditionalInfo.\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "45245307-6963-42b9-bce1-28371ba6471d",
							"name": "Server Error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"groupId\": 14091765,\n    \"referenceNumber\": \"quis anim\",\n    \"subscriber\": {\n        \"surname\": \"Ut ipsum Duis occaecat\",\n        \"comments\": \"Excepte\",\n        \"email\": \"nirupam.anand@kpn.com\",\n        \"employeeNumber\": \"laborum sint id non in\",\n        \"firstName\": \"proident do\",\n        \"fixedNumber\": \"31617185666\",\n        \"gender\": \"MALE\",\n        \"mobileNumber\": \"31617185666\",\n        \"preferredLanguage\": \"EN\",\n        \"surnamePrefix\": \"aute qui\",\n        \"vip\": true\n    },\n    \"userAdditionalInfo\": {\n        \"gripEntityId\": 18171,\n        \"managedEntities\": [14091398],\n        \"roles\": [1519]\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/hierarchy/subscribers",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"subscribers"
									]
								},
								"description": "If you want to create both subscriber and user at the same time, you should fill userAdditionalInfo.\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "10054a7f-627e-4d17-b9e3-09524207abf5",
							"name": "Service Unavailable",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"groupId\": 14091765,\n    \"referenceNumber\": \"quis anim\",\n    \"subscriber\": {\n        \"surname\": \"Ut ipsum Duis occaecat\",\n        \"comments\": \"Excepte\",\n        \"email\": \"nirupam.anand@kpn.com\",\n        \"employeeNumber\": \"laborum sint id non in\",\n        \"firstName\": \"proident do\",\n        \"fixedNumber\": \"31617185666\",\n        \"gender\": \"MALE\",\n        \"mobileNumber\": \"31617185666\",\n        \"preferredLanguage\": \"EN\",\n        \"surnamePrefix\": \"aute qui\",\n        \"vip\": true\n    },\n    \"userAdditionalInfo\": {\n        \"gripEntityId\": 18171,\n        \"managedEntities\": [14091398],\n        \"roles\": [1519]\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/hierarchy/subscribers",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hierarchy",
										"subscribers"
									]
								},
								"description": "If you want to create both subscriber and user at the same time, you should fill userAdditionalInfo.\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_un-authorized_orders_creation</li><li>privileges_orders_authorization</li><li>privileges_virtual_hierarchy_management</li><li>privileges_bulk_upload_data_of_end_user</li></ul>"
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "7- Get service requests details Copy",
					"id": "100bb3e8-f0c9-4d81-b72e-33ccf4427938",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/track-and-trace/service-requests/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"track-and-trace",
								"service-requests",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "49579458",
									"description": "Service request ID"
								}
							]
						},
						"description": "The possible keys of `attributes` map in response object:<div style='max-height: 400px; overflow: auto; width: 100%'>\n<dl>\n<dt><b>Attribute name</b></dt><dd><b>Meaning</b></dd>\n<dt>login</dt><dd>Login</dd>\n<dt>roles</dt><dd>Roles</dd>\n<dt>firstName</dt><dd>First name</dd>\n<dt>lastName</dt><dd>Last name</dd>\n<dt>surnamePrefix</dt><dd>Surname prefix</dd>\n<dt>email</dt><dd>E-mail</dd>\n<dt>dateOfBirth</dt><dd>Date of birth</dd>\n<dt>vip</dt><dd>VIP</dd>\n<dt>employeeNumber</dt><dd>Employee number</dd>\n<dt>gender</dt><dd>Gender</dd>\n<dt>salutation</dt><dd>Salutation</dd>\n<dt>preferredLanguage</dt><dd>Preferred language</dd>\n<dt>comments</dt><dd>Comments</dd>\n<dt>accesspointNameMSISDN</dt><dd>Mobile number</dd>\n<dt>accesspointNameSIM</dt><dd>SIM card number</dd>\n<dt>accesspointNameIMSI</dt><dd>IMSI</dd>\n<dt>IMEI</dt><dd>IMEI</dd>\n<dt>Hanset_IMEI_number</dt><dd>IMEI</dd>\n<dt>accesspointNameFixedNumber</dt><dd>Fixed Number</dd>\n<dt>activeTo</dt><dd>Active to</dd>\n<dt>contractName</dt><dd>Subscription or device name</dd>\n<dt>totalOnetimePrice</dt><dd>One time price</dd>\n<dt>totalRecurrentPrice</dt><dd>Recurring price</dd>\n<dt>deferredPrice</dt><dd>Deferred price</dd>\n<dt>newUiccId</dt><dd>New SIM card number</dd>\n<dt>movedGroupName</dt><dd>Moved account</dd>\n<dt>subscriberAccountId</dt><dd>Old location</dd>\n<dt>destinationAccount</dt><dd>New location</dd>\n<dt>selectedDuoUiccid</dt><dd>Selected Duo SIM card number</dd>\n<dt>projectId</dt><dd>Project ID</dd>\n<dt>new_fixed_number</dt><dd>New fixed number</dd>\n<dt>new_desk_number</dt><dd>New extension</dd>\n<dt>oldUserGroupName</dt><dd>Previous user group</dd>\n<dt>newUserGroupName</dt><dd>New user group</dd>\n<dt>vpnName</dt><dd>VPN name</dd>\n<dt>deskNumber</dt><dd>Extension</dd>\n<dt>accesspointNameDeskNumber</dt><dd>Extension</dd>\n<dt>mobileAddress</dt><dd>Mobile number</dd>\n<dt>enterpriseName</dt><dd>Enterprise name</dd>\n<dt>enterpriseID</dt><dd>Enterprise ID</dd>\n<dt>mobilityGroupName</dt><dd>Fixed-Mobile PBX name</dd>\n<dt>userGroupName</dt><dd>User group</dd>\n<dt>enterpriseUserGroup</dt><dd>User group</dd>\n<dt>initialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>sipAccountName</dt><dd>SIP account name</dd>\n<dt>accessInstanceAttributeinitialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>accesspointNameQueuePhoneNumber</dt><dd>Queue phone number</dd>\n<dt>accesspointNameSipAccountName</dt><dd>SIP account name</dd>\n<dt>subscriptionAmount</dt><dd>New subscription amount</dd>\n<dt>contract_contact_name</dt><dd>Contract contact person (name)</dd>\n<dt>contract_contact_phone</dt><dd>Contract contact person (phone)</dd>\n<dt>contract_contact_mail</dt><dd>Contract contact person (mail)</dd>\n<dt>financial_contact_name</dt><dd>Financial contact person (name)</dd>\n<dt>financial_contact_phone</dt><dd>Financial contact person (phone)</dd>\n<dt>financial_contact_mail</dt><dd>Financial contact person (mail)</dd>\n<dt>technical_contact_name</dt><dd>Technical contact Person (name)</dd>\n<dt>technical_contact_phone</dt><dd>Technical contact Person (phone)</dd>\n<dt>technical_contact_mail</dt><dd>Technical contact Person (mail)</dd>\n<dt>deviceOption</dt><dd>Device option</dd>\n<dt>deviceType_label</dt><dd>Device type</dd>\n<dt>macAddress</dt><dd>Mac address</dd>\n<dt>deviceName</dt><dd>Device name</dd>\n<dt>sacGroupAccountId_label</dt><dd>Location account</dd>\n<dt>groupId</dt><dd>Location</dd>\n<dt>vGroupMovingToID</dt><dd>New location</dd>\n<dt>pbxName</dt><dd>PBX</dd>\n<dt>groupCitemId_label</dt><dd>Group</dd>\n<dt>Fixed</dt><dd>Alternate fixed number</dd>\n<dt>DeskNumber</dt><dd>Alternate extension</dd>\n<dt>billing_retention_period</dt><dd>Financial data retention period (months)</dd>\n<dt>managedGroupName</dt><dd>Authorized for</dd>\n<dt>subscriptionType</dt><dd>Subscription type</dd>\n<dt>CurrentNetworkOperator</dt><dd>Current network operator</dd>\n<dt>CurrentServiceProvider</dt><dd>Current service provider</dd>\n<dt>Customer_name_at_current_provider</dt><dd>Customer name at current provider</dd>\n<dt>Current_contract_number</dt><dd>Customer number at current provider</dd>\n<dt>UIccId</dt><dd>Current SIM card number</dd>\n<dt>Initials</dt><dd>Initials</dd>\n<dt>FamilyNamePrefix</dt><dd>Family name prefix</dd>\n<dt>FamilyName</dt><dd>Family name</dd>\n<dt>delivery_TT_id</dt><dd>Delivery Track&trace ID</dd>\n<dt>IsAppleDEP</dt><dd>Apple DEP</dd>\n<dt>IsSamsungKNOX</dt><dd>Samsung KNOX</dd>\n<dt>keepCurrentSim</dt><dd>Keep existing SIM card</dd>\n<dt>Note</dt><dd>Note</dd>\n<dt>Porting_wish_date</dt><dd>Preferred transition date</dd>\n<dt>returnReason</dt><dd>Reason for return</dd>\n<dt>returnRemarks</dt><dd>Remarks</dd>\n<dt>companyName</dt><dd>Company name</dd>\n<dt>companyNamePronounciation</dt><dd>Comapny name pronounciation</dd>\n<dt>businessVoiceMailMessageText</dt><dd>Chosen business voicemail message</dd>\n</dl>\n<div>\n<style type=\"text/css\">  dl {\n    display: flex;\n    flex-flow: row wrap;\n  }\n  dt {\n    flex-basis: 20%;\n    text-align: right;\n  }\n  dd {\n    flex-basis: 70%;\n    flex-grow: 1;\n  }\n</style>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_orders_track_and_trace</li><li>privileges_orders_authorization</li></ul>"
					},
					"response": [
						{
							"id": "acd48291-2932-4937-9e3e-43f6b21badea",
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/track-and-trace/service-requests/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"track-and-trace",
										"service-requests",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "49579458",
											"description": "Service request ID"
										}
									]
								},
								"description": "The possible keys of `attributes` map in response object:<div style='max-height: 400px; overflow: auto; width: 100%'>\n<dl>\n<dt><b>Attribute name</b></dt><dd><b>Meaning</b></dd>\n<dt>login</dt><dd>Login</dd>\n<dt>roles</dt><dd>Roles</dd>\n<dt>firstName</dt><dd>First name</dd>\n<dt>lastName</dt><dd>Last name</dd>\n<dt>surnamePrefix</dt><dd>Surname prefix</dd>\n<dt>email</dt><dd>E-mail</dd>\n<dt>dateOfBirth</dt><dd>Date of birth</dd>\n<dt>vip</dt><dd>VIP</dd>\n<dt>employeeNumber</dt><dd>Employee number</dd>\n<dt>gender</dt><dd>Gender</dd>\n<dt>salutation</dt><dd>Salutation</dd>\n<dt>preferredLanguage</dt><dd>Preferred language</dd>\n<dt>comments</dt><dd>Comments</dd>\n<dt>accesspointNameMSISDN</dt><dd>Mobile number</dd>\n<dt>accesspointNameSIM</dt><dd>SIM card number</dd>\n<dt>accesspointNameIMSI</dt><dd>IMSI</dd>\n<dt>IMEI</dt><dd>IMEI</dd>\n<dt>Hanset_IMEI_number</dt><dd>IMEI</dd>\n<dt>accesspointNameFixedNumber</dt><dd>Fixed Number</dd>\n<dt>activeTo</dt><dd>Active to</dd>\n<dt>contractName</dt><dd>Subscription or device name</dd>\n<dt>totalOnetimePrice</dt><dd>One time price</dd>\n<dt>totalRecurrentPrice</dt><dd>Recurring price</dd>\n<dt>deferredPrice</dt><dd>Deferred price</dd>\n<dt>newUiccId</dt><dd>New SIM card number</dd>\n<dt>movedGroupName</dt><dd>Moved account</dd>\n<dt>subscriberAccountId</dt><dd>Old location</dd>\n<dt>destinationAccount</dt><dd>New location</dd>\n<dt>selectedDuoUiccid</dt><dd>Selected Duo SIM card number</dd>\n<dt>projectId</dt><dd>Project ID</dd>\n<dt>new_fixed_number</dt><dd>New fixed number</dd>\n<dt>new_desk_number</dt><dd>New extension</dd>\n<dt>oldUserGroupName</dt><dd>Previous user group</dd>\n<dt>newUserGroupName</dt><dd>New user group</dd>\n<dt>vpnName</dt><dd>VPN name</dd>\n<dt>deskNumber</dt><dd>Extension</dd>\n<dt>accesspointNameDeskNumber</dt><dd>Extension</dd>\n<dt>mobileAddress</dt><dd>Mobile number</dd>\n<dt>enterpriseName</dt><dd>Enterprise name</dd>\n<dt>enterpriseID</dt><dd>Enterprise ID</dd>\n<dt>mobilityGroupName</dt><dd>Fixed-Mobile PBX name</dd>\n<dt>userGroupName</dt><dd>User group</dd>\n<dt>enterpriseUserGroup</dt><dd>User group</dd>\n<dt>initialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>sipAccountName</dt><dd>SIP account name</dd>\n<dt>accessInstanceAttributeinitialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>accesspointNameQueuePhoneNumber</dt><dd>Queue phone number</dd>\n<dt>accesspointNameSipAccountName</dt><dd>SIP account name</dd>\n<dt>subscriptionAmount</dt><dd>New subscription amount</dd>\n<dt>contract_contact_name</dt><dd>Contract contact person (name)</dd>\n<dt>contract_contact_phone</dt><dd>Contract contact person (phone)</dd>\n<dt>contract_contact_mail</dt><dd>Contract contact person (mail)</dd>\n<dt>financial_contact_name</dt><dd>Financial contact person (name)</dd>\n<dt>financial_contact_phone</dt><dd>Financial contact person (phone)</dd>\n<dt>financial_contact_mail</dt><dd>Financial contact person (mail)</dd>\n<dt>technical_contact_name</dt><dd>Technical contact Person (name)</dd>\n<dt>technical_contact_phone</dt><dd>Technical contact Person (phone)</dd>\n<dt>technical_contact_mail</dt><dd>Technical contact Person (mail)</dd>\n<dt>deviceOption</dt><dd>Device option</dd>\n<dt>deviceType_label</dt><dd>Device type</dd>\n<dt>macAddress</dt><dd>Mac address</dd>\n<dt>deviceName</dt><dd>Device name</dd>\n<dt>sacGroupAccountId_label</dt><dd>Location account</dd>\n<dt>groupId</dt><dd>Location</dd>\n<dt>vGroupMovingToID</dt><dd>New location</dd>\n<dt>pbxName</dt><dd>PBX</dd>\n<dt>groupCitemId_label</dt><dd>Group</dd>\n<dt>Fixed</dt><dd>Alternate fixed number</dd>\n<dt>DeskNumber</dt><dd>Alternate extension</dd>\n<dt>billing_retention_period</dt><dd>Financial data retention period (months)</dd>\n<dt>managedGroupName</dt><dd>Authorized for</dd>\n<dt>subscriptionType</dt><dd>Subscription type</dd>\n<dt>CurrentNetworkOperator</dt><dd>Current network operator</dd>\n<dt>CurrentServiceProvider</dt><dd>Current service provider</dd>\n<dt>Customer_name_at_current_provider</dt><dd>Customer name at current provider</dd>\n<dt>Current_contract_number</dt><dd>Customer number at current provider</dd>\n<dt>UIccId</dt><dd>Current SIM card number</dd>\n<dt>Initials</dt><dd>Initials</dd>\n<dt>FamilyNamePrefix</dt><dd>Family name prefix</dd>\n<dt>FamilyName</dt><dd>Family name</dd>\n<dt>delivery_TT_id</dt><dd>Delivery Track&trace ID</dd>\n<dt>IsAppleDEP</dt><dd>Apple DEP</dd>\n<dt>IsSamsungKNOX</dt><dd>Samsung KNOX</dd>\n<dt>keepCurrentSim</dt><dd>Keep existing SIM card</dd>\n<dt>Note</dt><dd>Note</dd>\n<dt>Porting_wish_date</dt><dd>Preferred transition date</dd>\n<dt>returnReason</dt><dd>Reason for return</dd>\n<dt>returnRemarks</dt><dd>Remarks</dd>\n<dt>companyName</dt><dd>Company name</dd>\n<dt>companyNamePronounciation</dt><dd>Comapny name pronounciation</dd>\n<dt>businessVoiceMailMessageText</dt><dd>Chosen business voicemail message</dd>\n</dl>\n<div>\n<style type=\"text/css\">  dl {\n    display: flex;\n    flex-flow: row wrap;\n  }\n  dt {\n    flex-basis: 20%;\n    text-align: right;\n  }\n  dd {\n    flex-basis: 70%;\n    flex-grow: 1;\n  }\n</style>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_orders_track_and_trace</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "0bd0bf88-2b79-4021-9853-c2c40cd26f6a",
							"name": "Bad Request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/track-and-trace/service-requests/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"track-and-trace",
										"service-requests",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "49579458",
											"description": "Service request ID"
										}
									]
								},
								"description": "The possible keys of `attributes` map in response object:<div style='max-height: 400px; overflow: auto; width: 100%'>\n<dl>\n<dt><b>Attribute name</b></dt><dd><b>Meaning</b></dd>\n<dt>login</dt><dd>Login</dd>\n<dt>roles</dt><dd>Roles</dd>\n<dt>firstName</dt><dd>First name</dd>\n<dt>lastName</dt><dd>Last name</dd>\n<dt>surnamePrefix</dt><dd>Surname prefix</dd>\n<dt>email</dt><dd>E-mail</dd>\n<dt>dateOfBirth</dt><dd>Date of birth</dd>\n<dt>vip</dt><dd>VIP</dd>\n<dt>employeeNumber</dt><dd>Employee number</dd>\n<dt>gender</dt><dd>Gender</dd>\n<dt>salutation</dt><dd>Salutation</dd>\n<dt>preferredLanguage</dt><dd>Preferred language</dd>\n<dt>comments</dt><dd>Comments</dd>\n<dt>accesspointNameMSISDN</dt><dd>Mobile number</dd>\n<dt>accesspointNameSIM</dt><dd>SIM card number</dd>\n<dt>accesspointNameIMSI</dt><dd>IMSI</dd>\n<dt>IMEI</dt><dd>IMEI</dd>\n<dt>Hanset_IMEI_number</dt><dd>IMEI</dd>\n<dt>accesspointNameFixedNumber</dt><dd>Fixed Number</dd>\n<dt>activeTo</dt><dd>Active to</dd>\n<dt>contractName</dt><dd>Subscription or device name</dd>\n<dt>totalOnetimePrice</dt><dd>One time price</dd>\n<dt>totalRecurrentPrice</dt><dd>Recurring price</dd>\n<dt>deferredPrice</dt><dd>Deferred price</dd>\n<dt>newUiccId</dt><dd>New SIM card number</dd>\n<dt>movedGroupName</dt><dd>Moved account</dd>\n<dt>subscriberAccountId</dt><dd>Old location</dd>\n<dt>destinationAccount</dt><dd>New location</dd>\n<dt>selectedDuoUiccid</dt><dd>Selected Duo SIM card number</dd>\n<dt>projectId</dt><dd>Project ID</dd>\n<dt>new_fixed_number</dt><dd>New fixed number</dd>\n<dt>new_desk_number</dt><dd>New extension</dd>\n<dt>oldUserGroupName</dt><dd>Previous user group</dd>\n<dt>newUserGroupName</dt><dd>New user group</dd>\n<dt>vpnName</dt><dd>VPN name</dd>\n<dt>deskNumber</dt><dd>Extension</dd>\n<dt>accesspointNameDeskNumber</dt><dd>Extension</dd>\n<dt>mobileAddress</dt><dd>Mobile number</dd>\n<dt>enterpriseName</dt><dd>Enterprise name</dd>\n<dt>enterpriseID</dt><dd>Enterprise ID</dd>\n<dt>mobilityGroupName</dt><dd>Fixed-Mobile PBX name</dd>\n<dt>userGroupName</dt><dd>User group</dd>\n<dt>enterpriseUserGroup</dt><dd>User group</dd>\n<dt>initialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>sipAccountName</dt><dd>SIP account name</dd>\n<dt>accessInstanceAttributeinitialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>accesspointNameQueuePhoneNumber</dt><dd>Queue phone number</dd>\n<dt>accesspointNameSipAccountName</dt><dd>SIP account name</dd>\n<dt>subscriptionAmount</dt><dd>New subscription amount</dd>\n<dt>contract_contact_name</dt><dd>Contract contact person (name)</dd>\n<dt>contract_contact_phone</dt><dd>Contract contact person (phone)</dd>\n<dt>contract_contact_mail</dt><dd>Contract contact person (mail)</dd>\n<dt>financial_contact_name</dt><dd>Financial contact person (name)</dd>\n<dt>financial_contact_phone</dt><dd>Financial contact person (phone)</dd>\n<dt>financial_contact_mail</dt><dd>Financial contact person (mail)</dd>\n<dt>technical_contact_name</dt><dd>Technical contact Person (name)</dd>\n<dt>technical_contact_phone</dt><dd>Technical contact Person (phone)</dd>\n<dt>technical_contact_mail</dt><dd>Technical contact Person (mail)</dd>\n<dt>deviceOption</dt><dd>Device option</dd>\n<dt>deviceType_label</dt><dd>Device type</dd>\n<dt>macAddress</dt><dd>Mac address</dd>\n<dt>deviceName</dt><dd>Device name</dd>\n<dt>sacGroupAccountId_label</dt><dd>Location account</dd>\n<dt>groupId</dt><dd>Location</dd>\n<dt>vGroupMovingToID</dt><dd>New location</dd>\n<dt>pbxName</dt><dd>PBX</dd>\n<dt>groupCitemId_label</dt><dd>Group</dd>\n<dt>Fixed</dt><dd>Alternate fixed number</dd>\n<dt>DeskNumber</dt><dd>Alternate extension</dd>\n<dt>billing_retention_period</dt><dd>Financial data retention period (months)</dd>\n<dt>managedGroupName</dt><dd>Authorized for</dd>\n<dt>subscriptionType</dt><dd>Subscription type</dd>\n<dt>CurrentNetworkOperator</dt><dd>Current network operator</dd>\n<dt>CurrentServiceProvider</dt><dd>Current service provider</dd>\n<dt>Customer_name_at_current_provider</dt><dd>Customer name at current provider</dd>\n<dt>Current_contract_number</dt><dd>Customer number at current provider</dd>\n<dt>UIccId</dt><dd>Current SIM card number</dd>\n<dt>Initials</dt><dd>Initials</dd>\n<dt>FamilyNamePrefix</dt><dd>Family name prefix</dd>\n<dt>FamilyName</dt><dd>Family name</dd>\n<dt>delivery_TT_id</dt><dd>Delivery Track&trace ID</dd>\n<dt>IsAppleDEP</dt><dd>Apple DEP</dd>\n<dt>IsSamsungKNOX</dt><dd>Samsung KNOX</dd>\n<dt>keepCurrentSim</dt><dd>Keep existing SIM card</dd>\n<dt>Note</dt><dd>Note</dd>\n<dt>Porting_wish_date</dt><dd>Preferred transition date</dd>\n<dt>returnReason</dt><dd>Reason for return</dd>\n<dt>returnRemarks</dt><dd>Remarks</dd>\n<dt>companyName</dt><dd>Company name</dd>\n<dt>companyNamePronounciation</dt><dd>Comapny name pronounciation</dd>\n<dt>businessVoiceMailMessageText</dt><dd>Chosen business voicemail message</dd>\n</dl>\n<div>\n<style type=\"text/css\">  dl {\n    display: flex;\n    flex-flow: row wrap;\n  }\n  dt {\n    flex-basis: 20%;\n    text-align: right;\n  }\n  dd {\n    flex-basis: 70%;\n    flex-grow: 1;\n  }\n</style>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_orders_track_and_trace</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "5d93321c-fc71-4d49-9704-022cd4c589f0",
							"name": "Unauthorized",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/track-and-trace/service-requests/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"track-and-trace",
										"service-requests",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "49579458",
											"description": "Service request ID"
										}
									]
								},
								"description": "The possible keys of `attributes` map in response object:<div style='max-height: 400px; overflow: auto; width: 100%'>\n<dl>\n<dt><b>Attribute name</b></dt><dd><b>Meaning</b></dd>\n<dt>login</dt><dd>Login</dd>\n<dt>roles</dt><dd>Roles</dd>\n<dt>firstName</dt><dd>First name</dd>\n<dt>lastName</dt><dd>Last name</dd>\n<dt>surnamePrefix</dt><dd>Surname prefix</dd>\n<dt>email</dt><dd>E-mail</dd>\n<dt>dateOfBirth</dt><dd>Date of birth</dd>\n<dt>vip</dt><dd>VIP</dd>\n<dt>employeeNumber</dt><dd>Employee number</dd>\n<dt>gender</dt><dd>Gender</dd>\n<dt>salutation</dt><dd>Salutation</dd>\n<dt>preferredLanguage</dt><dd>Preferred language</dd>\n<dt>comments</dt><dd>Comments</dd>\n<dt>accesspointNameMSISDN</dt><dd>Mobile number</dd>\n<dt>accesspointNameSIM</dt><dd>SIM card number</dd>\n<dt>accesspointNameIMSI</dt><dd>IMSI</dd>\n<dt>IMEI</dt><dd>IMEI</dd>\n<dt>Hanset_IMEI_number</dt><dd>IMEI</dd>\n<dt>accesspointNameFixedNumber</dt><dd>Fixed Number</dd>\n<dt>activeTo</dt><dd>Active to</dd>\n<dt>contractName</dt><dd>Subscription or device name</dd>\n<dt>totalOnetimePrice</dt><dd>One time price</dd>\n<dt>totalRecurrentPrice</dt><dd>Recurring price</dd>\n<dt>deferredPrice</dt><dd>Deferred price</dd>\n<dt>newUiccId</dt><dd>New SIM card number</dd>\n<dt>movedGroupName</dt><dd>Moved account</dd>\n<dt>subscriberAccountId</dt><dd>Old location</dd>\n<dt>destinationAccount</dt><dd>New location</dd>\n<dt>selectedDuoUiccid</dt><dd>Selected Duo SIM card number</dd>\n<dt>projectId</dt><dd>Project ID</dd>\n<dt>new_fixed_number</dt><dd>New fixed number</dd>\n<dt>new_desk_number</dt><dd>New extension</dd>\n<dt>oldUserGroupName</dt><dd>Previous user group</dd>\n<dt>newUserGroupName</dt><dd>New user group</dd>\n<dt>vpnName</dt><dd>VPN name</dd>\n<dt>deskNumber</dt><dd>Extension</dd>\n<dt>accesspointNameDeskNumber</dt><dd>Extension</dd>\n<dt>mobileAddress</dt><dd>Mobile number</dd>\n<dt>enterpriseName</dt><dd>Enterprise name</dd>\n<dt>enterpriseID</dt><dd>Enterprise ID</dd>\n<dt>mobilityGroupName</dt><dd>Fixed-Mobile PBX name</dd>\n<dt>userGroupName</dt><dd>User group</dd>\n<dt>enterpriseUserGroup</dt><dd>User group</dd>\n<dt>initialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>sipAccountName</dt><dd>SIP account name</dd>\n<dt>accessInstanceAttributeinitialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>accesspointNameQueuePhoneNumber</dt><dd>Queue phone number</dd>\n<dt>accesspointNameSipAccountName</dt><dd>SIP account name</dd>\n<dt>subscriptionAmount</dt><dd>New subscription amount</dd>\n<dt>contract_contact_name</dt><dd>Contract contact person (name)</dd>\n<dt>contract_contact_phone</dt><dd>Contract contact person (phone)</dd>\n<dt>contract_contact_mail</dt><dd>Contract contact person (mail)</dd>\n<dt>financial_contact_name</dt><dd>Financial contact person (name)</dd>\n<dt>financial_contact_phone</dt><dd>Financial contact person (phone)</dd>\n<dt>financial_contact_mail</dt><dd>Financial contact person (mail)</dd>\n<dt>technical_contact_name</dt><dd>Technical contact Person (name)</dd>\n<dt>technical_contact_phone</dt><dd>Technical contact Person (phone)</dd>\n<dt>technical_contact_mail</dt><dd>Technical contact Person (mail)</dd>\n<dt>deviceOption</dt><dd>Device option</dd>\n<dt>deviceType_label</dt><dd>Device type</dd>\n<dt>macAddress</dt><dd>Mac address</dd>\n<dt>deviceName</dt><dd>Device name</dd>\n<dt>sacGroupAccountId_label</dt><dd>Location account</dd>\n<dt>groupId</dt><dd>Location</dd>\n<dt>vGroupMovingToID</dt><dd>New location</dd>\n<dt>pbxName</dt><dd>PBX</dd>\n<dt>groupCitemId_label</dt><dd>Group</dd>\n<dt>Fixed</dt><dd>Alternate fixed number</dd>\n<dt>DeskNumber</dt><dd>Alternate extension</dd>\n<dt>billing_retention_period</dt><dd>Financial data retention period (months)</dd>\n<dt>managedGroupName</dt><dd>Authorized for</dd>\n<dt>subscriptionType</dt><dd>Subscription type</dd>\n<dt>CurrentNetworkOperator</dt><dd>Current network operator</dd>\n<dt>CurrentServiceProvider</dt><dd>Current service provider</dd>\n<dt>Customer_name_at_current_provider</dt><dd>Customer name at current provider</dd>\n<dt>Current_contract_number</dt><dd>Customer number at current provider</dd>\n<dt>UIccId</dt><dd>Current SIM card number</dd>\n<dt>Initials</dt><dd>Initials</dd>\n<dt>FamilyNamePrefix</dt><dd>Family name prefix</dd>\n<dt>FamilyName</dt><dd>Family name</dd>\n<dt>delivery_TT_id</dt><dd>Delivery Track&trace ID</dd>\n<dt>IsAppleDEP</dt><dd>Apple DEP</dd>\n<dt>IsSamsungKNOX</dt><dd>Samsung KNOX</dd>\n<dt>keepCurrentSim</dt><dd>Keep existing SIM card</dd>\n<dt>Note</dt><dd>Note</dd>\n<dt>Porting_wish_date</dt><dd>Preferred transition date</dd>\n<dt>returnReason</dt><dd>Reason for return</dd>\n<dt>returnRemarks</dt><dd>Remarks</dd>\n<dt>companyName</dt><dd>Company name</dd>\n<dt>companyNamePronounciation</dt><dd>Comapny name pronounciation</dd>\n<dt>businessVoiceMailMessageText</dt><dd>Chosen business voicemail message</dd>\n</dl>\n<div>\n<style type=\"text/css\">  dl {\n    display: flex;\n    flex-flow: row wrap;\n  }\n  dt {\n    flex-basis: 20%;\n    text-align: right;\n  }\n  dd {\n    flex-basis: 70%;\n    flex-grow: 1;\n  }\n</style>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_orders_track_and_trace</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "4cece9e2-168b-409e-8198-b1bec5f4be15",
							"name": "Forbidden",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/track-and-trace/service-requests/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"track-and-trace",
										"service-requests",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "49579458",
											"description": "Service request ID"
										}
									]
								},
								"description": "The possible keys of `attributes` map in response object:<div style='max-height: 400px; overflow: auto; width: 100%'>\n<dl>\n<dt><b>Attribute name</b></dt><dd><b>Meaning</b></dd>\n<dt>login</dt><dd>Login</dd>\n<dt>roles</dt><dd>Roles</dd>\n<dt>firstName</dt><dd>First name</dd>\n<dt>lastName</dt><dd>Last name</dd>\n<dt>surnamePrefix</dt><dd>Surname prefix</dd>\n<dt>email</dt><dd>E-mail</dd>\n<dt>dateOfBirth</dt><dd>Date of birth</dd>\n<dt>vip</dt><dd>VIP</dd>\n<dt>employeeNumber</dt><dd>Employee number</dd>\n<dt>gender</dt><dd>Gender</dd>\n<dt>salutation</dt><dd>Salutation</dd>\n<dt>preferredLanguage</dt><dd>Preferred language</dd>\n<dt>comments</dt><dd>Comments</dd>\n<dt>accesspointNameMSISDN</dt><dd>Mobile number</dd>\n<dt>accesspointNameSIM</dt><dd>SIM card number</dd>\n<dt>accesspointNameIMSI</dt><dd>IMSI</dd>\n<dt>IMEI</dt><dd>IMEI</dd>\n<dt>Hanset_IMEI_number</dt><dd>IMEI</dd>\n<dt>accesspointNameFixedNumber</dt><dd>Fixed Number</dd>\n<dt>activeTo</dt><dd>Active to</dd>\n<dt>contractName</dt><dd>Subscription or device name</dd>\n<dt>totalOnetimePrice</dt><dd>One time price</dd>\n<dt>totalRecurrentPrice</dt><dd>Recurring price</dd>\n<dt>deferredPrice</dt><dd>Deferred price</dd>\n<dt>newUiccId</dt><dd>New SIM card number</dd>\n<dt>movedGroupName</dt><dd>Moved account</dd>\n<dt>subscriberAccountId</dt><dd>Old location</dd>\n<dt>destinationAccount</dt><dd>New location</dd>\n<dt>selectedDuoUiccid</dt><dd>Selected Duo SIM card number</dd>\n<dt>projectId</dt><dd>Project ID</dd>\n<dt>new_fixed_number</dt><dd>New fixed number</dd>\n<dt>new_desk_number</dt><dd>New extension</dd>\n<dt>oldUserGroupName</dt><dd>Previous user group</dd>\n<dt>newUserGroupName</dt><dd>New user group</dd>\n<dt>vpnName</dt><dd>VPN name</dd>\n<dt>deskNumber</dt><dd>Extension</dd>\n<dt>accesspointNameDeskNumber</dt><dd>Extension</dd>\n<dt>mobileAddress</dt><dd>Mobile number</dd>\n<dt>enterpriseName</dt><dd>Enterprise name</dd>\n<dt>enterpriseID</dt><dd>Enterprise ID</dd>\n<dt>mobilityGroupName</dt><dd>Fixed-Mobile PBX name</dd>\n<dt>userGroupName</dt><dd>User group</dd>\n<dt>enterpriseUserGroup</dt><dd>User group</dd>\n<dt>initialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>sipAccountName</dt><dd>SIP account name</dd>\n<dt>accessInstanceAttributeinitialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>accesspointNameQueuePhoneNumber</dt><dd>Queue phone number</dd>\n<dt>accesspointNameSipAccountName</dt><dd>SIP account name</dd>\n<dt>subscriptionAmount</dt><dd>New subscription amount</dd>\n<dt>contract_contact_name</dt><dd>Contract contact person (name)</dd>\n<dt>contract_contact_phone</dt><dd>Contract contact person (phone)</dd>\n<dt>contract_contact_mail</dt><dd>Contract contact person (mail)</dd>\n<dt>financial_contact_name</dt><dd>Financial contact person (name)</dd>\n<dt>financial_contact_phone</dt><dd>Financial contact person (phone)</dd>\n<dt>financial_contact_mail</dt><dd>Financial contact person (mail)</dd>\n<dt>technical_contact_name</dt><dd>Technical contact Person (name)</dd>\n<dt>technical_contact_phone</dt><dd>Technical contact Person (phone)</dd>\n<dt>technical_contact_mail</dt><dd>Technical contact Person (mail)</dd>\n<dt>deviceOption</dt><dd>Device option</dd>\n<dt>deviceType_label</dt><dd>Device type</dd>\n<dt>macAddress</dt><dd>Mac address</dd>\n<dt>deviceName</dt><dd>Device name</dd>\n<dt>sacGroupAccountId_label</dt><dd>Location account</dd>\n<dt>groupId</dt><dd>Location</dd>\n<dt>vGroupMovingToID</dt><dd>New location</dd>\n<dt>pbxName</dt><dd>PBX</dd>\n<dt>groupCitemId_label</dt><dd>Group</dd>\n<dt>Fixed</dt><dd>Alternate fixed number</dd>\n<dt>DeskNumber</dt><dd>Alternate extension</dd>\n<dt>billing_retention_period</dt><dd>Financial data retention period (months)</dd>\n<dt>managedGroupName</dt><dd>Authorized for</dd>\n<dt>subscriptionType</dt><dd>Subscription type</dd>\n<dt>CurrentNetworkOperator</dt><dd>Current network operator</dd>\n<dt>CurrentServiceProvider</dt><dd>Current service provider</dd>\n<dt>Customer_name_at_current_provider</dt><dd>Customer name at current provider</dd>\n<dt>Current_contract_number</dt><dd>Customer number at current provider</dd>\n<dt>UIccId</dt><dd>Current SIM card number</dd>\n<dt>Initials</dt><dd>Initials</dd>\n<dt>FamilyNamePrefix</dt><dd>Family name prefix</dd>\n<dt>FamilyName</dt><dd>Family name</dd>\n<dt>delivery_TT_id</dt><dd>Delivery Track&trace ID</dd>\n<dt>IsAppleDEP</dt><dd>Apple DEP</dd>\n<dt>IsSamsungKNOX</dt><dd>Samsung KNOX</dd>\n<dt>keepCurrentSim</dt><dd>Keep existing SIM card</dd>\n<dt>Note</dt><dd>Note</dd>\n<dt>Porting_wish_date</dt><dd>Preferred transition date</dd>\n<dt>returnReason</dt><dd>Reason for return</dd>\n<dt>returnRemarks</dt><dd>Remarks</dd>\n<dt>companyName</dt><dd>Company name</dd>\n<dt>companyNamePronounciation</dt><dd>Comapny name pronounciation</dd>\n<dt>businessVoiceMailMessageText</dt><dd>Chosen business voicemail message</dd>\n</dl>\n<div>\n<style type=\"text/css\">  dl {\n    display: flex;\n    flex-flow: row wrap;\n  }\n  dt {\n    flex-basis: 20%;\n    text-align: right;\n  }\n  dd {\n    flex-basis: 70%;\n    flex-grow: 1;\n  }\n</style>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_orders_track_and_trace</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "37e2a678-a987-45c9-ac21-fc08a0f32600",
							"name": "Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/track-and-trace/service-requests/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"track-and-trace",
										"service-requests",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "49579458",
											"description": "Service request ID"
										}
									]
								},
								"description": "The possible keys of `attributes` map in response object:<div style='max-height: 400px; overflow: auto; width: 100%'>\n<dl>\n<dt><b>Attribute name</b></dt><dd><b>Meaning</b></dd>\n<dt>login</dt><dd>Login</dd>\n<dt>roles</dt><dd>Roles</dd>\n<dt>firstName</dt><dd>First name</dd>\n<dt>lastName</dt><dd>Last name</dd>\n<dt>surnamePrefix</dt><dd>Surname prefix</dd>\n<dt>email</dt><dd>E-mail</dd>\n<dt>dateOfBirth</dt><dd>Date of birth</dd>\n<dt>vip</dt><dd>VIP</dd>\n<dt>employeeNumber</dt><dd>Employee number</dd>\n<dt>gender</dt><dd>Gender</dd>\n<dt>salutation</dt><dd>Salutation</dd>\n<dt>preferredLanguage</dt><dd>Preferred language</dd>\n<dt>comments</dt><dd>Comments</dd>\n<dt>accesspointNameMSISDN</dt><dd>Mobile number</dd>\n<dt>accesspointNameSIM</dt><dd>SIM card number</dd>\n<dt>accesspointNameIMSI</dt><dd>IMSI</dd>\n<dt>IMEI</dt><dd>IMEI</dd>\n<dt>Hanset_IMEI_number</dt><dd>IMEI</dd>\n<dt>accesspointNameFixedNumber</dt><dd>Fixed Number</dd>\n<dt>activeTo</dt><dd>Active to</dd>\n<dt>contractName</dt><dd>Subscription or device name</dd>\n<dt>totalOnetimePrice</dt><dd>One time price</dd>\n<dt>totalRecurrentPrice</dt><dd>Recurring price</dd>\n<dt>deferredPrice</dt><dd>Deferred price</dd>\n<dt>newUiccId</dt><dd>New SIM card number</dd>\n<dt>movedGroupName</dt><dd>Moved account</dd>\n<dt>subscriberAccountId</dt><dd>Old location</dd>\n<dt>destinationAccount</dt><dd>New location</dd>\n<dt>selectedDuoUiccid</dt><dd>Selected Duo SIM card number</dd>\n<dt>projectId</dt><dd>Project ID</dd>\n<dt>new_fixed_number</dt><dd>New fixed number</dd>\n<dt>new_desk_number</dt><dd>New extension</dd>\n<dt>oldUserGroupName</dt><dd>Previous user group</dd>\n<dt>newUserGroupName</dt><dd>New user group</dd>\n<dt>vpnName</dt><dd>VPN name</dd>\n<dt>deskNumber</dt><dd>Extension</dd>\n<dt>accesspointNameDeskNumber</dt><dd>Extension</dd>\n<dt>mobileAddress</dt><dd>Mobile number</dd>\n<dt>enterpriseName</dt><dd>Enterprise name</dd>\n<dt>enterpriseID</dt><dd>Enterprise ID</dd>\n<dt>mobilityGroupName</dt><dd>Fixed-Mobile PBX name</dd>\n<dt>userGroupName</dt><dd>User group</dd>\n<dt>enterpriseUserGroup</dt><dd>User group</dd>\n<dt>initialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>sipAccountName</dt><dd>SIP account name</dd>\n<dt>accessInstanceAttributeinitialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>accesspointNameQueuePhoneNumber</dt><dd>Queue phone number</dd>\n<dt>accesspointNameSipAccountName</dt><dd>SIP account name</dd>\n<dt>subscriptionAmount</dt><dd>New subscription amount</dd>\n<dt>contract_contact_name</dt><dd>Contract contact person (name)</dd>\n<dt>contract_contact_phone</dt><dd>Contract contact person (phone)</dd>\n<dt>contract_contact_mail</dt><dd>Contract contact person (mail)</dd>\n<dt>financial_contact_name</dt><dd>Financial contact person (name)</dd>\n<dt>financial_contact_phone</dt><dd>Financial contact person (phone)</dd>\n<dt>financial_contact_mail</dt><dd>Financial contact person (mail)</dd>\n<dt>technical_contact_name</dt><dd>Technical contact Person (name)</dd>\n<dt>technical_contact_phone</dt><dd>Technical contact Person (phone)</dd>\n<dt>technical_contact_mail</dt><dd>Technical contact Person (mail)</dd>\n<dt>deviceOption</dt><dd>Device option</dd>\n<dt>deviceType_label</dt><dd>Device type</dd>\n<dt>macAddress</dt><dd>Mac address</dd>\n<dt>deviceName</dt><dd>Device name</dd>\n<dt>sacGroupAccountId_label</dt><dd>Location account</dd>\n<dt>groupId</dt><dd>Location</dd>\n<dt>vGroupMovingToID</dt><dd>New location</dd>\n<dt>pbxName</dt><dd>PBX</dd>\n<dt>groupCitemId_label</dt><dd>Group</dd>\n<dt>Fixed</dt><dd>Alternate fixed number</dd>\n<dt>DeskNumber</dt><dd>Alternate extension</dd>\n<dt>billing_retention_period</dt><dd>Financial data retention period (months)</dd>\n<dt>managedGroupName</dt><dd>Authorized for</dd>\n<dt>subscriptionType</dt><dd>Subscription type</dd>\n<dt>CurrentNetworkOperator</dt><dd>Current network operator</dd>\n<dt>CurrentServiceProvider</dt><dd>Current service provider</dd>\n<dt>Customer_name_at_current_provider</dt><dd>Customer name at current provider</dd>\n<dt>Current_contract_number</dt><dd>Customer number at current provider</dd>\n<dt>UIccId</dt><dd>Current SIM card number</dd>\n<dt>Initials</dt><dd>Initials</dd>\n<dt>FamilyNamePrefix</dt><dd>Family name prefix</dd>\n<dt>FamilyName</dt><dd>Family name</dd>\n<dt>delivery_TT_id</dt><dd>Delivery Track&trace ID</dd>\n<dt>IsAppleDEP</dt><dd>Apple DEP</dd>\n<dt>IsSamsungKNOX</dt><dd>Samsung KNOX</dd>\n<dt>keepCurrentSim</dt><dd>Keep existing SIM card</dd>\n<dt>Note</dt><dd>Note</dd>\n<dt>Porting_wish_date</dt><dd>Preferred transition date</dd>\n<dt>returnReason</dt><dd>Reason for return</dd>\n<dt>returnRemarks</dt><dd>Remarks</dd>\n<dt>companyName</dt><dd>Company name</dd>\n<dt>companyNamePronounciation</dt><dd>Comapny name pronounciation</dd>\n<dt>businessVoiceMailMessageText</dt><dd>Chosen business voicemail message</dd>\n</dl>\n<div>\n<style type=\"text/css\">  dl {\n    display: flex;\n    flex-flow: row wrap;\n  }\n  dt {\n    flex-basis: 20%;\n    text-align: right;\n  }\n  dd {\n    flex-basis: 70%;\n    flex-grow: 1;\n  }\n</style>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_orders_track_and_trace</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "ffd2cc35-563f-4b08-91c0-a1782ea6127c",
							"name": "Too Many Requests",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/track-and-trace/service-requests/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"track-and-trace",
										"service-requests",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "49579458",
											"description": "Service request ID"
										}
									]
								},
								"description": "The possible keys of `attributes` map in response object:<div style='max-height: 400px; overflow: auto; width: 100%'>\n<dl>\n<dt><b>Attribute name</b></dt><dd><b>Meaning</b></dd>\n<dt>login</dt><dd>Login</dd>\n<dt>roles</dt><dd>Roles</dd>\n<dt>firstName</dt><dd>First name</dd>\n<dt>lastName</dt><dd>Last name</dd>\n<dt>surnamePrefix</dt><dd>Surname prefix</dd>\n<dt>email</dt><dd>E-mail</dd>\n<dt>dateOfBirth</dt><dd>Date of birth</dd>\n<dt>vip</dt><dd>VIP</dd>\n<dt>employeeNumber</dt><dd>Employee number</dd>\n<dt>gender</dt><dd>Gender</dd>\n<dt>salutation</dt><dd>Salutation</dd>\n<dt>preferredLanguage</dt><dd>Preferred language</dd>\n<dt>comments</dt><dd>Comments</dd>\n<dt>accesspointNameMSISDN</dt><dd>Mobile number</dd>\n<dt>accesspointNameSIM</dt><dd>SIM card number</dd>\n<dt>accesspointNameIMSI</dt><dd>IMSI</dd>\n<dt>IMEI</dt><dd>IMEI</dd>\n<dt>Hanset_IMEI_number</dt><dd>IMEI</dd>\n<dt>accesspointNameFixedNumber</dt><dd>Fixed Number</dd>\n<dt>activeTo</dt><dd>Active to</dd>\n<dt>contractName</dt><dd>Subscription or device name</dd>\n<dt>totalOnetimePrice</dt><dd>One time price</dd>\n<dt>totalRecurrentPrice</dt><dd>Recurring price</dd>\n<dt>deferredPrice</dt><dd>Deferred price</dd>\n<dt>newUiccId</dt><dd>New SIM card number</dd>\n<dt>movedGroupName</dt><dd>Moved account</dd>\n<dt>subscriberAccountId</dt><dd>Old location</dd>\n<dt>destinationAccount</dt><dd>New location</dd>\n<dt>selectedDuoUiccid</dt><dd>Selected Duo SIM card number</dd>\n<dt>projectId</dt><dd>Project ID</dd>\n<dt>new_fixed_number</dt><dd>New fixed number</dd>\n<dt>new_desk_number</dt><dd>New extension</dd>\n<dt>oldUserGroupName</dt><dd>Previous user group</dd>\n<dt>newUserGroupName</dt><dd>New user group</dd>\n<dt>vpnName</dt><dd>VPN name</dd>\n<dt>deskNumber</dt><dd>Extension</dd>\n<dt>accesspointNameDeskNumber</dt><dd>Extension</dd>\n<dt>mobileAddress</dt><dd>Mobile number</dd>\n<dt>enterpriseName</dt><dd>Enterprise name</dd>\n<dt>enterpriseID</dt><dd>Enterprise ID</dd>\n<dt>mobilityGroupName</dt><dd>Fixed-Mobile PBX name</dd>\n<dt>userGroupName</dt><dd>User group</dd>\n<dt>enterpriseUserGroup</dt><dd>User group</dd>\n<dt>initialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>sipAccountName</dt><dd>SIP account name</dd>\n<dt>accessInstanceAttributeinitialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>accesspointNameQueuePhoneNumber</dt><dd>Queue phone number</dd>\n<dt>accesspointNameSipAccountName</dt><dd>SIP account name</dd>\n<dt>subscriptionAmount</dt><dd>New subscription amount</dd>\n<dt>contract_contact_name</dt><dd>Contract contact person (name)</dd>\n<dt>contract_contact_phone</dt><dd>Contract contact person (phone)</dd>\n<dt>contract_contact_mail</dt><dd>Contract contact person (mail)</dd>\n<dt>financial_contact_name</dt><dd>Financial contact person (name)</dd>\n<dt>financial_contact_phone</dt><dd>Financial contact person (phone)</dd>\n<dt>financial_contact_mail</dt><dd>Financial contact person (mail)</dd>\n<dt>technical_contact_name</dt><dd>Technical contact Person (name)</dd>\n<dt>technical_contact_phone</dt><dd>Technical contact Person (phone)</dd>\n<dt>technical_contact_mail</dt><dd>Technical contact Person (mail)</dd>\n<dt>deviceOption</dt><dd>Device option</dd>\n<dt>deviceType_label</dt><dd>Device type</dd>\n<dt>macAddress</dt><dd>Mac address</dd>\n<dt>deviceName</dt><dd>Device name</dd>\n<dt>sacGroupAccountId_label</dt><dd>Location account</dd>\n<dt>groupId</dt><dd>Location</dd>\n<dt>vGroupMovingToID</dt><dd>New location</dd>\n<dt>pbxName</dt><dd>PBX</dd>\n<dt>groupCitemId_label</dt><dd>Group</dd>\n<dt>Fixed</dt><dd>Alternate fixed number</dd>\n<dt>DeskNumber</dt><dd>Alternate extension</dd>\n<dt>billing_retention_period</dt><dd>Financial data retention period (months)</dd>\n<dt>managedGroupName</dt><dd>Authorized for</dd>\n<dt>subscriptionType</dt><dd>Subscription type</dd>\n<dt>CurrentNetworkOperator</dt><dd>Current network operator</dd>\n<dt>CurrentServiceProvider</dt><dd>Current service provider</dd>\n<dt>Customer_name_at_current_provider</dt><dd>Customer name at current provider</dd>\n<dt>Current_contract_number</dt><dd>Customer number at current provider</dd>\n<dt>UIccId</dt><dd>Current SIM card number</dd>\n<dt>Initials</dt><dd>Initials</dd>\n<dt>FamilyNamePrefix</dt><dd>Family name prefix</dd>\n<dt>FamilyName</dt><dd>Family name</dd>\n<dt>delivery_TT_id</dt><dd>Delivery Track&trace ID</dd>\n<dt>IsAppleDEP</dt><dd>Apple DEP</dd>\n<dt>IsSamsungKNOX</dt><dd>Samsung KNOX</dd>\n<dt>keepCurrentSim</dt><dd>Keep existing SIM card</dd>\n<dt>Note</dt><dd>Note</dd>\n<dt>Porting_wish_date</dt><dd>Preferred transition date</dd>\n<dt>returnReason</dt><dd>Reason for return</dd>\n<dt>returnRemarks</dt><dd>Remarks</dd>\n<dt>companyName</dt><dd>Company name</dd>\n<dt>companyNamePronounciation</dt><dd>Comapny name pronounciation</dd>\n<dt>businessVoiceMailMessageText</dt><dd>Chosen business voicemail message</dd>\n</dl>\n<div>\n<style type=\"text/css\">  dl {\n    display: flex;\n    flex-flow: row wrap;\n  }\n  dt {\n    flex-basis: 20%;\n    text-align: right;\n  }\n  dd {\n    flex-basis: 70%;\n    flex-grow: 1;\n  }\n</style>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_orders_track_and_trace</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "e3188c51-6533-452e-bb70-6026c4b278f5",
							"name": "Server Error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/track-and-trace/service-requests/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"track-and-trace",
										"service-requests",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "49579458",
											"description": "Service request ID"
										}
									]
								},
								"description": "The possible keys of `attributes` map in response object:<div style='max-height: 400px; overflow: auto; width: 100%'>\n<dl>\n<dt><b>Attribute name</b></dt><dd><b>Meaning</b></dd>\n<dt>login</dt><dd>Login</dd>\n<dt>roles</dt><dd>Roles</dd>\n<dt>firstName</dt><dd>First name</dd>\n<dt>lastName</dt><dd>Last name</dd>\n<dt>surnamePrefix</dt><dd>Surname prefix</dd>\n<dt>email</dt><dd>E-mail</dd>\n<dt>dateOfBirth</dt><dd>Date of birth</dd>\n<dt>vip</dt><dd>VIP</dd>\n<dt>employeeNumber</dt><dd>Employee number</dd>\n<dt>gender</dt><dd>Gender</dd>\n<dt>salutation</dt><dd>Salutation</dd>\n<dt>preferredLanguage</dt><dd>Preferred language</dd>\n<dt>comments</dt><dd>Comments</dd>\n<dt>accesspointNameMSISDN</dt><dd>Mobile number</dd>\n<dt>accesspointNameSIM</dt><dd>SIM card number</dd>\n<dt>accesspointNameIMSI</dt><dd>IMSI</dd>\n<dt>IMEI</dt><dd>IMEI</dd>\n<dt>Hanset_IMEI_number</dt><dd>IMEI</dd>\n<dt>accesspointNameFixedNumber</dt><dd>Fixed Number</dd>\n<dt>activeTo</dt><dd>Active to</dd>\n<dt>contractName</dt><dd>Subscription or device name</dd>\n<dt>totalOnetimePrice</dt><dd>One time price</dd>\n<dt>totalRecurrentPrice</dt><dd>Recurring price</dd>\n<dt>deferredPrice</dt><dd>Deferred price</dd>\n<dt>newUiccId</dt><dd>New SIM card number</dd>\n<dt>movedGroupName</dt><dd>Moved account</dd>\n<dt>subscriberAccountId</dt><dd>Old location</dd>\n<dt>destinationAccount</dt><dd>New location</dd>\n<dt>selectedDuoUiccid</dt><dd>Selected Duo SIM card number</dd>\n<dt>projectId</dt><dd>Project ID</dd>\n<dt>new_fixed_number</dt><dd>New fixed number</dd>\n<dt>new_desk_number</dt><dd>New extension</dd>\n<dt>oldUserGroupName</dt><dd>Previous user group</dd>\n<dt>newUserGroupName</dt><dd>New user group</dd>\n<dt>vpnName</dt><dd>VPN name</dd>\n<dt>deskNumber</dt><dd>Extension</dd>\n<dt>accesspointNameDeskNumber</dt><dd>Extension</dd>\n<dt>mobileAddress</dt><dd>Mobile number</dd>\n<dt>enterpriseName</dt><dd>Enterprise name</dd>\n<dt>enterpriseID</dt><dd>Enterprise ID</dd>\n<dt>mobilityGroupName</dt><dd>Fixed-Mobile PBX name</dd>\n<dt>userGroupName</dt><dd>User group</dd>\n<dt>enterpriseUserGroup</dt><dd>User group</dd>\n<dt>initialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>sipAccountName</dt><dd>SIP account name</dd>\n<dt>accessInstanceAttributeinitialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>accesspointNameQueuePhoneNumber</dt><dd>Queue phone number</dd>\n<dt>accesspointNameSipAccountName</dt><dd>SIP account name</dd>\n<dt>subscriptionAmount</dt><dd>New subscription amount</dd>\n<dt>contract_contact_name</dt><dd>Contract contact person (name)</dd>\n<dt>contract_contact_phone</dt><dd>Contract contact person (phone)</dd>\n<dt>contract_contact_mail</dt><dd>Contract contact person (mail)</dd>\n<dt>financial_contact_name</dt><dd>Financial contact person (name)</dd>\n<dt>financial_contact_phone</dt><dd>Financial contact person (phone)</dd>\n<dt>financial_contact_mail</dt><dd>Financial contact person (mail)</dd>\n<dt>technical_contact_name</dt><dd>Technical contact Person (name)</dd>\n<dt>technical_contact_phone</dt><dd>Technical contact Person (phone)</dd>\n<dt>technical_contact_mail</dt><dd>Technical contact Person (mail)</dd>\n<dt>deviceOption</dt><dd>Device option</dd>\n<dt>deviceType_label</dt><dd>Device type</dd>\n<dt>macAddress</dt><dd>Mac address</dd>\n<dt>deviceName</dt><dd>Device name</dd>\n<dt>sacGroupAccountId_label</dt><dd>Location account</dd>\n<dt>groupId</dt><dd>Location</dd>\n<dt>vGroupMovingToID</dt><dd>New location</dd>\n<dt>pbxName</dt><dd>PBX</dd>\n<dt>groupCitemId_label</dt><dd>Group</dd>\n<dt>Fixed</dt><dd>Alternate fixed number</dd>\n<dt>DeskNumber</dt><dd>Alternate extension</dd>\n<dt>billing_retention_period</dt><dd>Financial data retention period (months)</dd>\n<dt>managedGroupName</dt><dd>Authorized for</dd>\n<dt>subscriptionType</dt><dd>Subscription type</dd>\n<dt>CurrentNetworkOperator</dt><dd>Current network operator</dd>\n<dt>CurrentServiceProvider</dt><dd>Current service provider</dd>\n<dt>Customer_name_at_current_provider</dt><dd>Customer name at current provider</dd>\n<dt>Current_contract_number</dt><dd>Customer number at current provider</dd>\n<dt>UIccId</dt><dd>Current SIM card number</dd>\n<dt>Initials</dt><dd>Initials</dd>\n<dt>FamilyNamePrefix</dt><dd>Family name prefix</dd>\n<dt>FamilyName</dt><dd>Family name</dd>\n<dt>delivery_TT_id</dt><dd>Delivery Track&trace ID</dd>\n<dt>IsAppleDEP</dt><dd>Apple DEP</dd>\n<dt>IsSamsungKNOX</dt><dd>Samsung KNOX</dd>\n<dt>keepCurrentSim</dt><dd>Keep existing SIM card</dd>\n<dt>Note</dt><dd>Note</dd>\n<dt>Porting_wish_date</dt><dd>Preferred transition date</dd>\n<dt>returnReason</dt><dd>Reason for return</dd>\n<dt>returnRemarks</dt><dd>Remarks</dd>\n<dt>companyName</dt><dd>Company name</dd>\n<dt>companyNamePronounciation</dt><dd>Comapny name pronounciation</dd>\n<dt>businessVoiceMailMessageText</dt><dd>Chosen business voicemail message</dd>\n</dl>\n<div>\n<style type=\"text/css\">  dl {\n    display: flex;\n    flex-flow: row wrap;\n  }\n  dt {\n    flex-basis: 20%;\n    text-align: right;\n  }\n  dd {\n    flex-basis: 70%;\n    flex-grow: 1;\n  }\n</style>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_orders_track_and_trace</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"id": "587cb2ce-2899-45c1-9900-cb5301ddd48b",
							"name": "Service Unavailable",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/track-and-trace/service-requests/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"track-and-trace",
										"service-requests",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "49579458",
											"description": "Service request ID"
										}
									]
								},
								"description": "The possible keys of `attributes` map in response object:<div style='max-height: 400px; overflow: auto; width: 100%'>\n<dl>\n<dt><b>Attribute name</b></dt><dd><b>Meaning</b></dd>\n<dt>login</dt><dd>Login</dd>\n<dt>roles</dt><dd>Roles</dd>\n<dt>firstName</dt><dd>First name</dd>\n<dt>lastName</dt><dd>Last name</dd>\n<dt>surnamePrefix</dt><dd>Surname prefix</dd>\n<dt>email</dt><dd>E-mail</dd>\n<dt>dateOfBirth</dt><dd>Date of birth</dd>\n<dt>vip</dt><dd>VIP</dd>\n<dt>employeeNumber</dt><dd>Employee number</dd>\n<dt>gender</dt><dd>Gender</dd>\n<dt>salutation</dt><dd>Salutation</dd>\n<dt>preferredLanguage</dt><dd>Preferred language</dd>\n<dt>comments</dt><dd>Comments</dd>\n<dt>accesspointNameMSISDN</dt><dd>Mobile number</dd>\n<dt>accesspointNameSIM</dt><dd>SIM card number</dd>\n<dt>accesspointNameIMSI</dt><dd>IMSI</dd>\n<dt>IMEI</dt><dd>IMEI</dd>\n<dt>Hanset_IMEI_number</dt><dd>IMEI</dd>\n<dt>accesspointNameFixedNumber</dt><dd>Fixed Number</dd>\n<dt>activeTo</dt><dd>Active to</dd>\n<dt>contractName</dt><dd>Subscription or device name</dd>\n<dt>totalOnetimePrice</dt><dd>One time price</dd>\n<dt>totalRecurrentPrice</dt><dd>Recurring price</dd>\n<dt>deferredPrice</dt><dd>Deferred price</dd>\n<dt>newUiccId</dt><dd>New SIM card number</dd>\n<dt>movedGroupName</dt><dd>Moved account</dd>\n<dt>subscriberAccountId</dt><dd>Old location</dd>\n<dt>destinationAccount</dt><dd>New location</dd>\n<dt>selectedDuoUiccid</dt><dd>Selected Duo SIM card number</dd>\n<dt>projectId</dt><dd>Project ID</dd>\n<dt>new_fixed_number</dt><dd>New fixed number</dd>\n<dt>new_desk_number</dt><dd>New extension</dd>\n<dt>oldUserGroupName</dt><dd>Previous user group</dd>\n<dt>newUserGroupName</dt><dd>New user group</dd>\n<dt>vpnName</dt><dd>VPN name</dd>\n<dt>deskNumber</dt><dd>Extension</dd>\n<dt>accesspointNameDeskNumber</dt><dd>Extension</dd>\n<dt>mobileAddress</dt><dd>Mobile number</dd>\n<dt>enterpriseName</dt><dd>Enterprise name</dd>\n<dt>enterpriseID</dt><dd>Enterprise ID</dd>\n<dt>mobilityGroupName</dt><dd>Fixed-Mobile PBX name</dd>\n<dt>userGroupName</dt><dd>User group</dd>\n<dt>enterpriseUserGroup</dt><dd>User group</dd>\n<dt>initialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>sipAccountName</dt><dd>SIP account name</dd>\n<dt>accessInstanceAttributeinitialUserPrincipalName</dt><dd>User Principal Name</dd>\n<dt>accesspointNameQueuePhoneNumber</dt><dd>Queue phone number</dd>\n<dt>accesspointNameSipAccountName</dt><dd>SIP account name</dd>\n<dt>subscriptionAmount</dt><dd>New subscription amount</dd>\n<dt>contract_contact_name</dt><dd>Contract contact person (name)</dd>\n<dt>contract_contact_phone</dt><dd>Contract contact person (phone)</dd>\n<dt>contract_contact_mail</dt><dd>Contract contact person (mail)</dd>\n<dt>financial_contact_name</dt><dd>Financial contact person (name)</dd>\n<dt>financial_contact_phone</dt><dd>Financial contact person (phone)</dd>\n<dt>financial_contact_mail</dt><dd>Financial contact person (mail)</dd>\n<dt>technical_contact_name</dt><dd>Technical contact Person (name)</dd>\n<dt>technical_contact_phone</dt><dd>Technical contact Person (phone)</dd>\n<dt>technical_contact_mail</dt><dd>Technical contact Person (mail)</dd>\n<dt>deviceOption</dt><dd>Device option</dd>\n<dt>deviceType_label</dt><dd>Device type</dd>\n<dt>macAddress</dt><dd>Mac address</dd>\n<dt>deviceName</dt><dd>Device name</dd>\n<dt>sacGroupAccountId_label</dt><dd>Location account</dd>\n<dt>groupId</dt><dd>Location</dd>\n<dt>vGroupMovingToID</dt><dd>New location</dd>\n<dt>pbxName</dt><dd>PBX</dd>\n<dt>groupCitemId_label</dt><dd>Group</dd>\n<dt>Fixed</dt><dd>Alternate fixed number</dd>\n<dt>DeskNumber</dt><dd>Alternate extension</dd>\n<dt>billing_retention_period</dt><dd>Financial data retention period (months)</dd>\n<dt>managedGroupName</dt><dd>Authorized for</dd>\n<dt>subscriptionType</dt><dd>Subscription type</dd>\n<dt>CurrentNetworkOperator</dt><dd>Current network operator</dd>\n<dt>CurrentServiceProvider</dt><dd>Current service provider</dd>\n<dt>Customer_name_at_current_provider</dt><dd>Customer name at current provider</dd>\n<dt>Current_contract_number</dt><dd>Customer number at current provider</dd>\n<dt>UIccId</dt><dd>Current SIM card number</dd>\n<dt>Initials</dt><dd>Initials</dd>\n<dt>FamilyNamePrefix</dt><dd>Family name prefix</dd>\n<dt>FamilyName</dt><dd>Family name</dd>\n<dt>delivery_TT_id</dt><dd>Delivery Track&trace ID</dd>\n<dt>IsAppleDEP</dt><dd>Apple DEP</dd>\n<dt>IsSamsungKNOX</dt><dd>Samsung KNOX</dd>\n<dt>keepCurrentSim</dt><dd>Keep existing SIM card</dd>\n<dt>Note</dt><dd>Note</dd>\n<dt>Porting_wish_date</dt><dd>Preferred transition date</dd>\n<dt>returnReason</dt><dd>Reason for return</dd>\n<dt>returnRemarks</dt><dd>Remarks</dd>\n<dt>companyName</dt><dd>Company name</dd>\n<dt>companyNamePronounciation</dt><dd>Comapny name pronounciation</dd>\n<dt>businessVoiceMailMessageText</dt><dd>Chosen business voicemail message</dd>\n</dl>\n<div>\n<style type=\"text/css\">  dl {\n    display: flex;\n    flex-flow: row wrap;\n  }\n  dt {\n    flex-basis: 20%;\n    text-align: right;\n  }\n  dd {\n    flex-basis: 70%;\n    flex-grow: 1;\n  }\n</style>\n\n<strong>Required privileges</strong> (one of the following):</strong><ul><li>privileges_orders_track_and_trace</li><li>privileges_orders_authorization</li></ul>"
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			],
			"id": "79082140-47c5-474e-b48c-0045f756f59a",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "db9fc28a-5dfc-4bb4-861a-5c88c99f880a",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "09dd8fdf-52cf-4c76-afaa-ba2eae4831ba",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "GetAccessTokenComarch",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d9309136-e1ed-4054-a7cb-1b49ecd8333a",
						"exec": [
							"if (responseCode.code === 200){",
							"    var data = JSON.parse(responseBody);",
							"    postman.setEnvironmentVariable(\"access_token\", data.access_token);",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "dba96ccb-6571-48e1-a140-018acaa78a12",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "client_id",
							"value": "{{client_id}}",
							"type": "text"
						},
						{
							"key": "client_secret",
							"value": "{{client_secret}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "https://api-prd.kpn.com/oauth/grip/msm/accesstoken?grant_type=client_credentials",
					"protocol": "https",
					"host": [
						"api-prd",
						"kpn",
						"com"
					],
					"path": [
						"oauth",
						"grip",
						"msm",
						"accesstoken"
					],
					"query": [
						{
							"key": "grant_type",
							"value": "client_credentials"
						}
					]
				},
				"description": "This API resource is used for the genration of the Access Token."
			},
			"response": []
		}
	],
	"auth": {
		"type": "oauth2",
		"oauth2": [
			{
				"key": "tokenName",
				"value": "access_token",
				"type": "string"
			},
			{
				"key": "tokenType",
				"value": "",
				"type": "string"
			},
			{
				"key": "accessToken",
				"value": "",
				"type": "string"
			},
			{
				"key": "client_authentication",
				"value": "body",
				"type": "string"
			},
			{
				"key": "clientSecret",
				"value": "{{client_secret}}",
				"type": "string"
			},
			{
				"key": "clientId",
				"value": "{{client_id}}",
				"type": "string"
			},
			{
				"key": "accessTokenUrl",
				"value": "https://api-prd.kpn.com/oauth/grip/msm/accesstoken?grant_type=client_credentials",
				"type": "string"
			},
			{
				"key": "challengeAlgorithm",
				"value": "S256",
				"type": "string"
			},
			{
				"key": "grant_type",
				"value": "client_credentials",
				"type": "string"
			},
			{
				"key": "addTokenTo",
				"value": "header",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "d58a1f1f-1761-4615-9814-a034ffbd418e",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "18e9b0a5-26f6-4b0c-89d6-8fa1356e8372",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "4f99268c-0b8c-4a90-9305-8fca9f24a7e2",
			"key": "baseUrl",
			"value": "https://api-prd.kpn.com/mobile/kpn/mobileservices",
			"type": "string"
		},
		{
			"id": "43d09652-7050-433a-be34-398e9e7b5f36",
			"key": "client_id",
			"value": "",
			"type": "string"
		},
		{
			"id": "d8d5c031-2ba1-4524-acca-a0d2d3c32ce1",
			"key": "client_secret",
			"value": "",
			"type": "string"
		}
	]
}